   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"ahrs_int_cmpl_quat.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_i2f
  18              		.global	__aeabi_fmul
  19              		.global	__aeabi_f2iz
  20              		.section	.text.ahrs_init,"ax",%progbits
  21              		.align	1
  22              		.global	ahrs_init
  23              		.thumb
  24              		.thumb_func
  26              	ahrs_init:
  27              	.LFB34:
  28              		.file 1 "subsystems/ahrs/ahrs_int_cmpl_quat.c"
   1:subsystems/ahrs/ahrs_int_cmpl_quat.c **** /*
   2:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * Copyright (C) 2008-2012 The Paparazzi Team
   3:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  *
   4:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * This file is part of paparazzi.
   5:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  *
   6:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * paparazzi is free software; you can redistribute it and/or modify
   7:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * it under the terms of the GNU General Public License as published by
   8:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * the Free Software Foundation; either version 2, or (at your option)
   9:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * any later version.
  10:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  *
  11:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * paparazzi is distributed in the hope that it will be useful,
  12:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * GNU General Public License for more details.
  15:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  *
  16:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * You should have received a copy of the GNU General Public License
  17:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * along with paparazzi; see the file COPYING.  If not, write to
  18:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  19:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * Boston, MA 02111-1307, USA.
  20:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  */
  21:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  22:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  23:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #include "subsystems/ahrs/ahrs_int_cmpl_quat.h"
  24:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #include "subsystems/ahrs/ahrs_aligner.h"
  25:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #include "subsystems/ahrs/ahrs_int_utils.h"
  26:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  27:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #include "subsystems/imu.h"
  28:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #if USE_GPS
  29:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #include "subsystems/gps.h"
  30:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
  31:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #include "math/pprz_trig_int.h"
  32:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #include "math/pprz_algebra_int.h"
  33:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  34:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #include "generated/airframe.h"
  35:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  36:subsystems/ahrs/ahrs_int_cmpl_quat.c **** //#include "../../test/pprz_algebra_print.h"
  37:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  38:subsystems/ahrs/ahrs_int_cmpl_quat.c **** static inline void ahrs_update_mag_full(void);
  39:subsystems/ahrs/ahrs_int_cmpl_quat.c **** static inline void ahrs_update_mag_2d(void);
  40:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  41:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #ifdef AHRS_MAG_UPDATE_YAW_ONLY
  42:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #warning "AHRS_MAG_UPDATE_YAW_ONLY is deprecated, please remove it. This is the default behaviour. 
  43:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
  44:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  45:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #if USE_MAGNETOMETER && AHRS_USE_GPS_HEADING
  46:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #warning "Using magnetometer and GPS course to update heading. Probably better to set USE_MAGNETOME
  47:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
  48:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  49:subsystems/ahrs/ahrs_int_cmpl_quat.c **** struct AhrsIntCmpl ahrs_impl;
  50:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  51:subsystems/ahrs/ahrs_int_cmpl_quat.c **** static inline void compute_imu_euler_and_rmat_from_quat(void);
  52:subsystems/ahrs/ahrs_int_cmpl_quat.c **** static inline void compute_body_euler_and_rmat_from_quat(void);
  53:subsystems/ahrs/ahrs_int_cmpl_quat.c **** static inline void compute_imu_orientation(void);
  54:subsystems/ahrs/ahrs_int_cmpl_quat.c **** static inline void compute_body_orientation(void);
  55:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  56:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_init(void) {
  29              		.loc 1 56 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, sl, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 32
  36              		.cfi_offset 14, -4
  37              		.cfi_offset 10, -8
  38              		.cfi_offset 9, -12
  39              		.cfi_offset 8, -16
  40              		.cfi_offset 7, -20
  41              		.cfi_offset 6, -24
  42              		.cfi_offset 5, -28
  43              		.cfi_offset 4, -32
  57:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  58:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs.status = AHRS_UNINIT;
  44              		.loc 1 58 0
  45 0004 524E     		ldr	r6, .L2
  59:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.ltp_vel_norm_valid = FALSE;
  60:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.heading_aligned = FALSE;
  61:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  62:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* set ltp_to_body to zero */
  63:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_EULERS_ZERO(ahrs.ltp_to_body_euler);
  64:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_ZERO(ahrs.ltp_to_body_quat);
  46              		.loc 1 64 0
  47 0006 4FF40043 		mov	r3, #32768
  48 000a F364     		str	r3, [r6, #76]
  65:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_ZERO(ahrs.ltp_to_body_rmat);
  49              		.loc 1 65 0
  50 000c 4FF48043 		mov	r3, #16384
  51 0010 B366     		str	r3, [r6, #104]
  52 0012 B367     		str	r3, [r6, #120]
  53 0014 C6F88830 		str	r3, [r6, #136]
  66:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs.body_rate);
  67:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  68:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* set ltp_to_imu so that body is zero */
  69:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   QUAT_COPY(ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
  54              		.loc 1 69 0
  55 0018 4E4B     		ldr	r3, .L2+4
  59:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.ltp_vel_norm_valid = FALSE;
  56              		.loc 1 59 0
  57 001a 4F4D     		ldr	r5, .L2+8
  58              		.loc 1 69 0
  59 001c D3F88420 		ldr	r2, [r3, #132]
  58:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs.status = AHRS_UNINIT;
  60              		.loc 1 58 0
  61 0020 0024     		movs	r4, #0
  62              		.loc 1 69 0
  63 0022 3260     		str	r2, [r6, #0]
  64 0024 D3F88820 		ldr	r2, [r3, #136]
  70:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RMAT_COPY(ahrs.ltp_to_imu_rmat, imu.body_to_imu_rmat);
  65              		.loc 1 70 0
  66 0028 06F11C07 		add	r7, r6, #28
  69:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   QUAT_COPY(ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
  67              		.loc 1 69 0
  68 002c 7260     		str	r2, [r6, #4]
  69 002e D3F88C20 		ldr	r2, [r3, #140]
  70              		.loc 1 70 0
  71 0032 03F1940E 		add	lr, r3, #148
  69:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   QUAT_COPY(ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
  72              		.loc 1 69 0
  73 0036 B260     		str	r2, [r6, #8]
  74 0038 D3F89020 		ldr	r2, [r3, #144]
  58:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs.status = AHRS_UNINIT;
  75              		.loc 1 58 0
  76 003c 86F89840 		strb	r4, [r6, #152]
  69:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   QUAT_COPY(ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
  77              		.loc 1 69 0
  78 0040 F260     		str	r2, [r6, #12]
  59:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.ltp_vel_norm_valid = FALSE;
  79              		.loc 1 59 0
  80 0042 85F84440 		strb	r4, [r5, #68]
  81              		.loc 1 70 0
  82 0046 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
  60:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.heading_aligned = FALSE;
  83              		.loc 1 60 0
  84 004a 85F84740 		strb	r4, [r5, #71]
  63:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_EULERS_ZERO(ahrs.ltp_to_body_euler);
  85              		.loc 1 63 0
  86 004e F465     		str	r4, [r6, #92]
  87 0050 3466     		str	r4, [r6, #96]
  88 0052 7466     		str	r4, [r6, #100]
  64:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_ZERO(ahrs.ltp_to_body_quat);
  89              		.loc 1 64 0
  90 0054 3465     		str	r4, [r6, #80]
  91 0056 7465     		str	r4, [r6, #84]
  92 0058 B465     		str	r4, [r6, #88]
  65:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_ZERO(ahrs.ltp_to_body_rmat);
  93              		.loc 1 65 0
  94 005a F466     		str	r4, [r6, #108]
  95 005c 3467     		str	r4, [r6, #112]
  96 005e 7467     		str	r4, [r6, #116]
  97 0060 F467     		str	r4, [r6, #124]
  98 0062 C6F88040 		str	r4, [r6, #128]
  99 0066 C6F88440 		str	r4, [r6, #132]
  66:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs.body_rate);
 100              		.loc 1 66 0
 101 006a C6F88C40 		str	r4, [r6, #140]
 102 006e C6F89040 		str	r4, [r6, #144]
 103 0072 C6F89440 		str	r4, [r6, #148]
 104              		.loc 1 70 0
 105 0076 0FC7     		stmia	r7!, {r0, r1, r2, r3}
 106 0078 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 107 007c 0FC7     		stmia	r7!, {r0, r1, r2, r3}
 108 007e DEF80030 		ldr	r3, [lr, #0]
 109 0082 3B60     		str	r3, [r7, #0]
 110              	.LBB67:
  71:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_RMAT(ahrs.ltp_to_imu_euler, ahrs.ltp_to_imu_rmat);
 111              		.loc 1 71 0
 112 0084 F069     		ldr	r0, [r6, #28]
 113 0086 FFF7FEFF 		bl	__aeabi_i2f
 114 008a 4FF06251 		mov	r1, #947912704
 115 008e FFF7FEFF 		bl	__aeabi_fmul
 116 0092 0746     		mov	r7, r0
 117              	.LVL0:
 118 0094 306A     		ldr	r0, [r6, #32]
 119              	.LVL1:
 120 0096 FFF7FEFF 		bl	__aeabi_i2f
 121 009a 4FF06251 		mov	r1, #947912704
 122 009e FFF7FEFF 		bl	__aeabi_fmul
 123 00a2 8246     		mov	sl, r0
 124              	.LVL2:
 125 00a4 706A     		ldr	r0, [r6, #36]
 126              	.LVL3:
 127 00a6 FFF7FEFF 		bl	__aeabi_i2f
 128 00aa 4FF06251 		mov	r1, #947912704
 129 00ae FFF7FEFF 		bl	__aeabi_fmul
 130 00b2 8046     		mov	r8, r0
 131              	.LVL4:
 132 00b4 306B     		ldr	r0, [r6, #48]
 133              	.LVL5:
 134 00b6 FFF7FEFF 		bl	__aeabi_i2f
 135              	.LVL6:
 136 00ba 4FF06251 		mov	r1, #947912704
 137 00be FFF7FEFF 		bl	__aeabi_fmul
 138 00c2 8146     		mov	r9, r0
 139 00c4 F06B     		ldr	r0, [r6, #60]
 140 00c6 FFF7FEFF 		bl	__aeabi_i2f
 141 00ca 4FF06251 		mov	r1, #947912704
 142 00ce FFF7FEFF 		bl	__aeabi_fmul
 143 00d2 0146     		mov	r1, r0
 144 00d4 4846     		mov	r0, r9
 145 00d6 FFF7FEFF 		bl	atan2f
 146 00da 8146     		mov	r9, r0
 147              	.LVL7:
 148 00dc 4046     		mov	r0, r8
 149              	.LVL8:
 150 00de FFF7FEFF 		bl	asinf
 151 00e2 3946     		mov	r1, r7
 152 00e4 8046     		mov	r8, r0
 153              	.LVL9:
 154 00e6 5046     		mov	r0, sl
 155              	.LVL10:
 156 00e8 FFF7FEFF 		bl	atan2f
 157 00ec 4FF08B41 		mov	r1, #1166016512
 158 00f0 0746     		mov	r7, r0
 159              	.LVL11:
 160 00f2 4846     		mov	r0, r9
 161              	.LVL12:
 162 00f4 FFF7FEFF 		bl	__aeabi_fmul
 163 00f8 FFF7FEFF 		bl	__aeabi_f2iz
 164 00fc 4FF08B41 		mov	r1, #1166016512
 165 0100 3061     		str	r0, [r6, #16]
 166 0102 08F10040 		add	r0, r8, #-2147483648
 167 0106 FFF7FEFF 		bl	__aeabi_fmul
 168 010a FFF7FEFF 		bl	__aeabi_f2iz
 169 010e 4FF08B41 		mov	r1, #1166016512
 170 0112 7061     		str	r0, [r6, #20]
 171 0114 3846     		mov	r0, r7
 172 0116 FFF7FEFF 		bl	__aeabi_fmul
 173 011a FFF7FEFF 		bl	__aeabi_f2iz
 174              	.LBE67:
  72:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs.imu_rate);
  73:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  74:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs_impl.gyro_bias);
  75:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs_impl.rate_correction);
  76:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs_impl.high_rez_bias);
 175              		.loc 1 76 0
 176 011e 0023     		movs	r3, #0
 177 0120 0022     		movs	r2, #0
 178 0122 C5E90A23 		strd	r2, [r5, #40]
 179 0126 C5E90C23 		strd	r2, [r5, #48]
 180 012a C5E90E23 		strd	r2, [r5, #56]
  77:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  78:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #if AHRS_GRAVITY_UPDATE_COORDINATED_TURN
  79:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.correct_gravity = TRUE;
 181              		.loc 1 79 0
 182 012e 0123     		movs	r3, #1
 183              	.LBB68:
  71:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_RMAT(ahrs.ltp_to_imu_euler, ahrs.ltp_to_imu_rmat);
 184              		.loc 1 71 0
 185 0130 B061     		str	r0, [r6, #24]
 186              	.LBE68:
  72:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs.imu_rate);
 187              		.loc 1 72 0
 188 0132 3464     		str	r4, [r6, #64]
 189 0134 7464     		str	r4, [r6, #68]
 190 0136 B464     		str	r4, [r6, #72]
  74:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs_impl.gyro_bias);
 191              		.loc 1 74 0
 192 0138 2C60     		str	r4, [r5, #0]
 193 013a 6C60     		str	r4, [r5, #4]
 194 013c AC60     		str	r4, [r5, #8]
  75:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs_impl.rate_correction);
 195              		.loc 1 75 0
 196 013e EC60     		str	r4, [r5, #12]
 197 0140 2C61     		str	r4, [r5, #16]
 198 0142 6C61     		str	r4, [r5, #20]
 199              		.loc 1 79 0
 200 0144 85F84530 		strb	r3, [r5, #69]
  80:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #else
  81:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.correct_gravity = FALSE;
  82:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
  83:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  84:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #if AHRS_GRAVITY_UPDATE_NORM_HEURISTIC
  85:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.use_gravity_heuristic = TRUE;
  86:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #else
  87:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.use_gravity_heuristic = FALSE;
 201              		.loc 1 87 0
 202 0148 85F84640 		strb	r4, [r5, #70]
  88:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
  89:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  90:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 203              		.loc 1 90 0
 204 014c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 205              	.L3:
 206              		.align	2
 207              	.L2:
 208 0150 00000000 		.word	ahrs
 209 0154 00000000 		.word	imu
 210 0158 00000000 		.word	.LANCHOR0
 211              		.cfi_endproc
 212              	.LFE34:
 214              		.global	__aeabi_fadd
 215              		.global	__aeabi_f2d
 216              		.global	__aeabi_ddiv
 217              		.global	__aeabi_dmul
 218              		.global	__aeabi_d2f
 219              		.global	__aeabi_dsub
 220              		.global	__aeabi_dcmplt
 221              		.global	__aeabi_dcmpgt
 222              		.global	__aeabi_fsub
 223              		.global	__aeabi_fcmpgt
 224              		.global	__aeabi_fdiv
 225              		.global	__aeabi_dadd
 226              		.global	__aeabi_fcmplt
 227              		.section	.text.ahrs_align,"ax",%progbits
 228              		.align	1
 229              		.global	ahrs_align
 230              		.thumb
 231              		.thumb_func
 233              	ahrs_align:
 234              	.LFB35:
  91:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  92:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_align(void) {
 235              		.loc 1 92 0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 48
 238              		@ frame_needed = 0, uses_anonymous_args = 0
 239              	.LVL13:
 240 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 241              	.LCFI1:
 242              		.cfi_def_cfa_offset 36
 243              		.cfi_offset 14, -4
 244              		.cfi_offset 11, -8
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 9, -16
 247              		.cfi_offset 8, -20
 248              		.cfi_offset 7, -24
 249              		.cfi_offset 6, -28
 250              		.cfi_offset 5, -32
 251              		.cfi_offset 4, -36
 252              	.LBB69:
 253              	.LBB70:
 254              	.LBB71:
 255              	.LBB72:
 256              	.LBB73:
 257              	.LBB74:
 258              		.file 2 "./subsystems/ahrs/ahrs_float_utils.h"
   1:./subsystems/ahrs/ahrs_float_utils.h **** #ifndef AHRS_FLOAT_UTILS_H
   2:./subsystems/ahrs/ahrs_float_utils.h **** #define AHRS_FLOAT_UTILS_H
   3:./subsystems/ahrs/ahrs_float_utils.h **** 
   4:./subsystems/ahrs/ahrs_float_utils.h **** #include "subsystems/ahrs/ahrs_magnetic_field_model.h"
   5:./subsystems/ahrs/ahrs_float_utils.h **** 
   6:./subsystems/ahrs/ahrs_float_utils.h **** #include "std.h" // for ABS
   7:./subsystems/ahrs/ahrs_float_utils.h **** 
   8:./subsystems/ahrs/ahrs_float_utils.h **** static inline void ahrs_float_get_euler_from_accel_mag(struct FloatEulers* e, struct Int32Vect3* ac
   9:./subsystems/ahrs/ahrs_float_utils.h ****   /* get phi and theta from accelerometer */
  10:./subsystems/ahrs/ahrs_float_utils.h ****   struct FloatVect3 accelf;
  11:./subsystems/ahrs/ahrs_float_utils.h ****   ACCELS_FLOAT_OF_BFP(accelf, *accel);
  12:./subsystems/ahrs/ahrs_float_utils.h ****   const float phi   = atan2f(-accelf.y, -accelf.z);
  13:./subsystems/ahrs/ahrs_float_utils.h ****   const float cphi = cosf(phi);
  14:./subsystems/ahrs/ahrs_float_utils.h ****   const float theta = atan2f(cphi*accelf.x, -accelf.z);
  15:./subsystems/ahrs/ahrs_float_utils.h **** 
  16:./subsystems/ahrs/ahrs_float_utils.h ****   /* get psi from magnetometer */
  17:./subsystems/ahrs/ahrs_float_utils.h ****   /* project mag on local tangeant plane */
  18:./subsystems/ahrs/ahrs_float_utils.h ****   struct FloatVect3 magf;
  19:./subsystems/ahrs/ahrs_float_utils.h ****   MAGS_FLOAT_OF_BFP(magf, *mag);
  20:./subsystems/ahrs/ahrs_float_utils.h ****   const float sphi   = sinf(phi);
  21:./subsystems/ahrs/ahrs_float_utils.h ****   const float ctheta = cosf(theta);
  22:./subsystems/ahrs/ahrs_float_utils.h ****   const float stheta = sinf(theta);
  23:./subsystems/ahrs/ahrs_float_utils.h ****   const float mn = ctheta * magf.x + sphi*stheta*magf.y + cphi*stheta*magf.z;
  24:./subsystems/ahrs/ahrs_float_utils.h ****   const float me =     0. * magf.x + cphi       *magf.y - sphi       *magf.z;
  25:./subsystems/ahrs/ahrs_float_utils.h ****   float psi = -atan2f(me, mn) + atan2(AHRS_H_Y, AHRS_H_X);
  26:./subsystems/ahrs/ahrs_float_utils.h ****   if (psi > M_PI) psi -= 2.*M_PI; if (psi < -M_PI) psi+= 2.*M_PI;
  27:./subsystems/ahrs/ahrs_float_utils.h ****   EULERS_ASSIGN(*e, phi, theta, psi);
  28:./subsystems/ahrs/ahrs_float_utils.h **** 
  29:./subsystems/ahrs/ahrs_float_utils.h **** }
  30:./subsystems/ahrs/ahrs_float_utils.h **** 
  31:./subsystems/ahrs/ahrs_float_utils.h **** /** Compute a quaternion representing roll and pitch from an accelerometer measurement. */
  32:./subsystems/ahrs/ahrs_float_utils.h **** static inline void ahrs_float_get_quat_from_accel(struct FloatQuat* q, struct Int32Vect3* accel) {
  33:./subsystems/ahrs/ahrs_float_utils.h ****   /* normalized accel measurement in floating point */
  34:./subsystems/ahrs/ahrs_float_utils.h ****   struct FloatVect3 acc_normalized;
  35:./subsystems/ahrs/ahrs_float_utils.h ****   ACCELS_FLOAT_OF_BFP(acc_normalized, *accel);
 259              		.loc 2 35 0
 260 0004 5E4C     		ldr	r4, .L41
 261              	.LBE74:
 262              	.LBE73:
 263              	.LBE72:
 264              	.LBE71:
 265              	.LBE70:
 266              	.LBE69:
 267              		.loc 1 92 0
 268 0006 8DB0     		sub	sp, sp, #52
 269              	.LCFI2:
 270              		.cfi_def_cfa_offset 88
 271              	.LBB102:
 272              	.LBB100:
 273              	.LBB99:
 274              	.LBB98:
 275              	.LBB82:
 276              	.LBB81:
 277              		.loc 2 35 0
 278 0008 E068     		ldr	r0, [r4, #12]
 279 000a FFF7FEFF 		bl	__aeabi_i2f
 280 000e 4FF06A51 		mov	r1, #981467136
 281 0012 FFF7FEFF 		bl	__aeabi_fmul
 282 0016 0546     		mov	r5, r0
 283              	.LVL14:
 284 0018 2069     		ldr	r0, [r4, #16]
 285              	.LVL15:
 286 001a FFF7FEFF 		bl	__aeabi_i2f
 287 001e 4FF06A51 		mov	r1, #981467136
 288 0022 FFF7FEFF 		bl	__aeabi_fmul
 289 0026 0646     		mov	r6, r0
 290              	.LVL16:
 291 0028 6069     		ldr	r0, [r4, #20]
 292              	.LVL17:
 293 002a FFF7FEFF 		bl	__aeabi_i2f
 294 002e 4FF06A51 		mov	r1, #981467136
 295 0032 FFF7FEFF 		bl	__aeabi_fmul
 296              	.LBB75:
  36:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_VECT3_NORMALIZE(acc_normalized);
 297              		.loc 2 36 0
 298 0036 2946     		mov	r1, r5
 299              	.LBE75:
  35:./subsystems/ahrs/ahrs_float_utils.h ****   ACCELS_FLOAT_OF_BFP(acc_normalized, *accel);
 300              		.loc 2 35 0
 301 0038 0446     		mov	r4, r0
 302              	.LVL18:
 303              	.LBB76:
 304              		.loc 2 36 0
 305 003a 2846     		mov	r0, r5
 306              	.LVL19:
 307 003c FFF7FEFF 		bl	__aeabi_fmul
 308 0040 3146     		mov	r1, r6
 309 0042 0746     		mov	r7, r0
 310 0044 3046     		mov	r0, r6
 311 0046 FFF7FEFF 		bl	__aeabi_fmul
 312 004a 0146     		mov	r1, r0
 313 004c 3846     		mov	r0, r7
 314 004e FFF7FEFF 		bl	__aeabi_fadd
 315 0052 2146     		mov	r1, r4
 316 0054 0746     		mov	r7, r0
 317 0056 2046     		mov	r0, r4
 318 0058 FFF7FEFF 		bl	__aeabi_fmul
 319 005c 0146     		mov	r1, r0
 320 005e 3846     		mov	r0, r7
 321 0060 FFF7FEFF 		bl	__aeabi_fadd
 322 0064 FFF7FEFF 		bl	sqrtf
 323 0068 FFF7FEFF 		bl	__aeabi_f2d
 324 006c 0246     		mov	r2, r0
 325 006e 0B46     		mov	r3, r1
 326 0070 0020     		movs	r0, #0
 327 0072 4449     		ldr	r1, .L41+4
 328 0074 FFF7FEFF 		bl	__aeabi_ddiv
 329 0078 8246     		mov	sl, r0
 330 007a 8B46     		mov	fp, r1
 331              	.LVL20:
 332 007c 2046     		mov	r0, r4
 333 007e FFF7FEFF 		bl	__aeabi_f2d
 334 0082 5246     		mov	r2, sl
 335 0084 5B46     		mov	r3, fp
 336 0086 FFF7FEFF 		bl	__aeabi_dmul
 337 008a FFF7FEFF 		bl	__aeabi_d2f
 338 008e 0746     		mov	r7, r0
 339              	.LVL21:
 340              	.LBE76:
  37:./subsystems/ahrs/ahrs_float_utils.h **** 
  38:./subsystems/ahrs/ahrs_float_utils.h ****   /* check for 180deg case */
  39:./subsystems/ahrs/ahrs_float_utils.h ****   if ( ABS(acc_normalized.z - 1.0) < 5*FLT_MIN ) {
 341              		.loc 2 39 0
 342 0090 FFF7FEFF 		bl	__aeabi_f2d
 343              	.LVL22:
 344 0094 0022     		movs	r2, #0
 345 0096 3B4B     		ldr	r3, .L41+4
 346 0098 FFF7FEFF 		bl	__aeabi_dsub
 347 009c 0022     		movs	r2, #0
 348 009e 0023     		movs	r3, #0
 349 00a0 8046     		mov	r8, r0
 350 00a2 8946     		mov	r9, r1
 351 00a4 FFF7FEFF 		bl	__aeabi_dcmplt
 352 00a8 0124     		movs	r4, #1
 353 00aa 30B1     		cbz	r0, .L33
 354 00ac 4046     		mov	r0, r8
 355 00ae 4946     		mov	r1, r9
 356 00b0 0022     		movs	r2, #0
 357 00b2 354B     		ldr	r3, .L41+8
 358 00b4 FFF7FEFF 		bl	__aeabi_dcmpgt
 359 00b8 05E0     		b	.L38
 360              	.L33:
 361 00ba 4046     		mov	r0, r8
 362 00bc 4946     		mov	r1, r9
 363 00be 0022     		movs	r2, #0
 364 00c0 324B     		ldr	r3, .L41+12
 365 00c2 FFF7FEFF 		bl	__aeabi_dcmplt
 366              	.L38:
 367 00c6 00B9     		cbnz	r0, .L9
 368 00c8 0024     		movs	r4, #0
 369              	.L9:
 370 00ca E4B2     		uxtb	r4, r4
 371 00cc 002C     		cmp	r4, #0
 372 00ce 4FD1     		bne	.L23
 373              	.LBB77:
  36:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_VECT3_NORMALIZE(acc_normalized);
 374              		.loc 2 36 0
 375 00d0 2846     		mov	r0, r5
 376 00d2 FFF7FEFF 		bl	__aeabi_f2d
 377 00d6 5246     		mov	r2, sl
 378 00d8 5B46     		mov	r3, fp
 379 00da FFF7FEFF 		bl	__aeabi_dmul
 380 00de FFF7FEFF 		bl	__aeabi_d2f
 381 00e2 8046     		mov	r8, r0
 382 00e4 3046     		mov	r0, r6
 383 00e6 FFF7FEFF 		bl	__aeabi_f2d
 384 00ea 5246     		mov	r2, sl
 385 00ec 5B46     		mov	r3, fp
 386 00ee FFF7FEFF 		bl	__aeabi_dmul
 387 00f2 FFF7FEFF 		bl	__aeabi_d2f
 388              	.LBE77:
  40:./subsystems/ahrs/ahrs_float_utils.h ****     QUAT_ASSIGN(*q, 0.0, 1.0, 0.0, 0.0);
  41:./subsystems/ahrs/ahrs_float_utils.h ****   }
  42:./subsystems/ahrs/ahrs_float_utils.h ****   else {
  43:./subsystems/ahrs/ahrs_float_utils.h ****     /*
  44:./subsystems/ahrs/ahrs_float_utils.h ****      * axis we want to rotate around is cross product of accel and reference [0,0,-g]
  45:./subsystems/ahrs/ahrs_float_utils.h ****      * normalized: cross(acc_normalized, [0,0,-1])
  46:./subsystems/ahrs/ahrs_float_utils.h ****      * vector part of quaternion is the axis
  47:./subsystems/ahrs/ahrs_float_utils.h ****      * scalar part (angle): 1.0 + dot(acc_normalized, [0,0,-1])
  48:./subsystems/ahrs/ahrs_float_utils.h ****      */
  49:./subsystems/ahrs/ahrs_float_utils.h ****     q->qx = - acc_normalized.y;
  50:./subsystems/ahrs/ahrs_float_utils.h ****     q->qy = acc_normalized.x;
  51:./subsystems/ahrs/ahrs_float_utils.h ****     q->qz = 0.0;
  52:./subsystems/ahrs/ahrs_float_utils.h ****     q->qi = 1.0 - acc_normalized.z;
 389              		.loc 2 52 0
 390 00f6 3946     		mov	r1, r7
  49:./subsystems/ahrs/ahrs_float_utils.h ****     q->qx = - acc_normalized.y;
 391              		.loc 2 49 0
 392 00f8 00F10045 		add	r5, r0, #-2147483648
 393              	.LVL23:
 394              		.loc 2 52 0
 395 00fc 4FF07E50 		mov	r0, #1065353216
 396 0100 FFF7FEFF 		bl	__aeabi_fsub
 397              	.LBB78:
  53:./subsystems/ahrs/ahrs_float_utils.h ****     FLOAT_QUAT_NORMALIZE(*q);
 398              		.loc 2 53 0
 399 0104 0146     		mov	r1, r0
 400              	.LBE78:
  52:./subsystems/ahrs/ahrs_float_utils.h ****     q->qi = 1.0 - acc_normalized.z;
 401              		.loc 2 52 0
 402 0106 8246     		mov	sl, r0
 403              	.LVL24:
 404              	.LBB79:
 405              		.loc 2 53 0
 406 0108 FFF7FEFF 		bl	__aeabi_fmul
 407              	.LVL25:
 408 010c 2946     		mov	r1, r5
 409 010e 0446     		mov	r4, r0
 410 0110 2846     		mov	r0, r5
 411 0112 FFF7FEFF 		bl	__aeabi_fmul
 412 0116 0146     		mov	r1, r0
 413 0118 2046     		mov	r0, r4
 414 011a FFF7FEFF 		bl	__aeabi_fadd
 415 011e 4146     		mov	r1, r8
 416 0120 0446     		mov	r4, r0
 417 0122 4046     		mov	r0, r8
 418 0124 FFF7FEFF 		bl	__aeabi_fmul
 419 0128 0146     		mov	r1, r0
 420 012a 2046     		mov	r0, r4
 421 012c FFF7FEFF 		bl	__aeabi_fadd
 422 0130 0021     		movs	r1, #0
 423 0132 FFF7FEFF 		bl	__aeabi_fadd
 424 0136 FFF7FEFF 		bl	sqrtf
 425 013a 4FF40001 		mov	r1, #8388608
 426 013e 0446     		mov	r4, r0
 427              	.LVL26:
 428 0140 FFF7FEFF 		bl	__aeabi_fcmpgt
 429              	.LVL27:
 430 0144 20B3     		cbz	r0, .L34
 431 0146 5046     		mov	r0, sl
 432 0148 2146     		mov	r1, r4
 433 014a FFF7FEFF 		bl	__aeabi_fdiv
 434 014e 2146     		mov	r1, r4
 435 0150 8246     		mov	sl, r0
 436              	.LVL28:
 437 0152 2846     		mov	r0, r5
 438              	.LVL29:
 439 0154 FFF7FEFF 		bl	__aeabi_fdiv
 440 0158 2146     		mov	r1, r4
 441 015a 0546     		mov	r5, r0
 442              	.LVL30:
 443 015c 4046     		mov	r0, r8
 444              	.LVL31:
 445 015e FFF7FEFF 		bl	__aeabi_fdiv
 446 0162 2146     		mov	r1, r4
 447 0164 8046     		mov	r8, r0
 448              	.LVL32:
 449 0166 0020     		movs	r0, #0
 450              	.LVL33:
 451 0168 FFF7FEFF 		bl	__aeabi_fdiv
 452 016c 8146     		mov	r9, r0
 453              	.LVL34:
 454 016e 11E0     		b	.L10
 455              	.LVL35:
 456              	.L23:
 457              	.LBE79:
  40:./subsystems/ahrs/ahrs_float_utils.h ****     QUAT_ASSIGN(*q, 0.0, 1.0, 0.0, 0.0);
 458              		.loc 2 40 0
 459 0170 4FF00009 		mov	r9, #0
 460 0174 C846     		mov	r8, r9
 461 0176 4FF07E55 		mov	r5, #1065353216
 462              	.LVL36:
 463 017a CA46     		mov	sl, r9
 464              	.LVL37:
 465 017c 0AE0     		b	.L10
 466              	.L42:
 467 017e 00BF     		.align	2
 468              	.L41:
 469 0180 00000000 		.word	ahrs_aligner
 470 0184 0000F03F 		.word	1072693248
 471 0188 000034B8 		.word	-1204551680
 472 018c 00003438 		.word	942931968
 473              	.LVL38:
 474              	.L34:
 475              	.LBB80:
  51:./subsystems/ahrs/ahrs_float_utils.h ****     q->qz = 0.0;
 476              		.loc 2 51 0
 477 0190 4FF00009 		mov	r9, #0
 478              	.LVL39:
 479              	.L10:
 480              	.LBE80:
 481              	.LBE81:
 482              	.LBE82:
  54:./subsystems/ahrs/ahrs_float_utils.h ****   }
  55:./subsystems/ahrs/ahrs_float_utils.h **** }
  56:./subsystems/ahrs/ahrs_float_utils.h **** 
  57:./subsystems/ahrs/ahrs_float_utils.h **** static inline void ahrs_float_get_quat_from_accel_mag(struct FloatQuat* q, struct Int32Vect3* accel
  58:./subsystems/ahrs/ahrs_float_utils.h **** 
  59:./subsystems/ahrs/ahrs_float_utils.h ****   /* the quaternion representing roll and pitch from acc measurement */
  60:./subsystems/ahrs/ahrs_float_utils.h ****   struct FloatQuat q_a;
  61:./subsystems/ahrs/ahrs_float_utils.h ****   ahrs_float_get_quat_from_accel(&q_a, accel);
  62:./subsystems/ahrs/ahrs_float_utils.h **** 
  63:./subsystems/ahrs/ahrs_float_utils.h **** 
  64:./subsystems/ahrs/ahrs_float_utils.h ****   /* convert mag measurement to float */
  65:./subsystems/ahrs/ahrs_float_utils.h ****   struct FloatVect3 mag_float;
  66:./subsystems/ahrs/ahrs_float_utils.h ****   MAGS_FLOAT_OF_BFP(mag_float, *mag);
 483              		.loc 2 66 0
 484 0194 AC4C     		ldr	r4, .L43+24
 485 0196 A069     		ldr	r0, [r4, #24]
 486 0198 FFF7FEFF 		bl	__aeabi_i2f
 487 019c 4FF06851 		mov	r1, #973078528
 488 01a0 FFF7FEFF 		bl	__aeabi_fmul
 489 01a4 0290     		str	r0, [sp, #8]	@ float
 490              	.LVL40:
 491 01a6 E069     		ldr	r0, [r4, #28]
 492              	.LVL41:
 493 01a8 FFF7FEFF 		bl	__aeabi_i2f
 494 01ac 4FF06851 		mov	r1, #973078528
 495 01b0 FFF7FEFF 		bl	__aeabi_fmul
 496 01b4 0490     		str	r0, [sp, #16]	@ float
 497              	.LVL42:
 498 01b6 206A     		ldr	r0, [r4, #32]
 499              	.LVL43:
 500 01b8 FFF7FEFF 		bl	__aeabi_i2f
 501 01bc 4FF06851 		mov	r1, #973078528
 502 01c0 FFF7FEFF 		bl	__aeabi_fmul
 503 01c4 0690     		str	r0, [sp, #24]	@ float
 504              	.LVL44:
 505              	.LBB83:
  67:./subsystems/ahrs/ahrs_float_utils.h **** 
  68:./subsystems/ahrs/ahrs_float_utils.h ****   /* and rotate to horizontal plane using the quat from above */
  69:./subsystems/ahrs/ahrs_float_utils.h ****   struct FloatRMat rmat_phi_theta;
  70:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 506              		.loc 2 70 0
 507 01c6 5046     		mov	r0, sl
 508              	.LVL45:
 509 01c8 FFF7FEFF 		bl	__aeabi_f2d
 510 01cc 98A3     		adr	r3, .L43
 511 01ce D3E90023 		ldrd	r2, [r3]
 512 01d2 FFF7FEFF 		bl	__aeabi_dmul
 513 01d6 FFF7FEFF 		bl	__aeabi_d2f
 514 01da 0646     		mov	r6, r0
 515              	.LVL46:
 516 01dc 2846     		mov	r0, r5
 517              	.LVL47:
 518 01de FFF7FEFF 		bl	__aeabi_f2d
 519 01e2 93A3     		adr	r3, .L43
 520 01e4 D3E90023 		ldrd	r2, [r3]
 521 01e8 FFF7FEFF 		bl	__aeabi_dmul
 522 01ec FFF7FEFF 		bl	__aeabi_d2f
 523 01f0 0446     		mov	r4, r0
 524              	.LVL48:
 525 01f2 4046     		mov	r0, r8
 526              	.LVL49:
 527 01f4 FFF7FEFF 		bl	__aeabi_f2d
 528 01f8 8DA3     		adr	r3, .L43
 529 01fa D3E90023 		ldrd	r2, [r3]
 530 01fe FFF7FEFF 		bl	__aeabi_dmul
 531 0202 FFF7FEFF 		bl	__aeabi_d2f
 532 0206 0746     		mov	r7, r0
 533              	.LVL50:
 534 0208 4846     		mov	r0, r9
 535              	.LVL51:
 536 020a FFF7FEFF 		bl	__aeabi_f2d
 537 020e 88A3     		adr	r3, .L43
 538 0210 D3E90023 		ldrd	r2, [r3]
 539 0214 FFF7FEFF 		bl	__aeabi_dmul
 540 0218 FFF7FEFF 		bl	__aeabi_d2f
 541 021c 3146     		mov	r1, r6
 542 021e 8346     		mov	fp, r0
 543              	.LVL52:
 544 0220 3046     		mov	r0, r6
 545              	.LVL53:
 546 0222 FFF7FEFF 		bl	__aeabi_fmul
 547 0226 4FF07E51 		mov	r1, #1065353216
 548 022a FFF7FEFF 		bl	__aeabi_fsub
 549 022e 5946     		mov	r1, fp
 550 0230 0790     		str	r0, [sp, #28]	@ float
 551              	.LVL54:
 552 0232 3046     		mov	r0, r6
 553              	.LVL55:
 554 0234 FFF7FEFF 		bl	__aeabi_fmul
 555 0238 3946     		mov	r1, r7
 556 023a 0990     		str	r0, [sp, #36]	@ float
 557              	.LVL56:
 558 023c 2046     		mov	r0, r4
 559              	.LVL57:
 560 023e FFF7FEFF 		bl	__aeabi_fmul
 561 0242 2146     		mov	r1, r4
 562 0244 0890     		str	r0, [sp, #32]	@ float
 563              	.LVL58:
 564 0246 2046     		mov	r0, r4
 565              	.LVL59:
 566 0248 FFF7FEFF 		bl	__aeabi_fmul
 567 024c 0146     		mov	r1, r0
 568 024e 0798     		ldr	r0, [sp, #28]	@ float
 569 0250 FFF7FEFF 		bl	__aeabi_fadd
 570              	.LBE83:
  71:./subsystems/ahrs/ahrs_float_utils.h ****   struct FloatVect3 mag_ltp;
  72:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_VECT3_TRANSP_MUL(mag_ltp, rmat_phi_theta, mag_float);
 571              		.loc 2 72 0
 572 0254 0299     		ldr	r1, [sp, #8]	@ float
 573 0256 FFF7FEFF 		bl	__aeabi_fmul
 574              	.LBB84:
  70:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 575              		.loc 2 70 0
 576 025a 0999     		ldr	r1, [sp, #36]	@ float
 577              	.LBE84:
 578              		.loc 2 72 0
 579 025c 0346     		mov	r3, r0
 580              	.LBB85:
  70:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 581              		.loc 2 70 0
 582 025e 0898     		ldr	r0, [sp, #32]	@ float
 583 0260 0093     		str	r3, [sp, #0]
 584 0262 FFF7FEFF 		bl	__aeabi_fsub
 585              	.LBE85:
 586              		.loc 2 72 0
 587 0266 0499     		ldr	r1, [sp, #16]	@ float
 588 0268 FFF7FEFF 		bl	__aeabi_fmul
 589 026c 009B     		ldr	r3, [sp, #0]
 590 026e 0146     		mov	r1, r0
 591 0270 1846     		mov	r0, r3
 592 0272 FFF7FEFF 		bl	__aeabi_fadd
 593              	.LBB86:
  70:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 594              		.loc 2 70 0
 595 0276 5946     		mov	r1, fp
 596              	.LBE86:
 597              		.loc 2 72 0
 598 0278 0246     		mov	r2, r0
 599              	.LBB87:
  70:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 600              		.loc 2 70 0
 601 027a 2046     		mov	r0, r4
 602 027c 0192     		str	r2, [sp, #4]
 603 027e FFF7FEFF 		bl	__aeabi_fmul
 604 0282 3946     		mov	r1, r7
 605 0284 0346     		mov	r3, r0
 606 0286 3046     		mov	r0, r6
 607 0288 0093     		str	r3, [sp, #0]
 608 028a FFF7FEFF 		bl	__aeabi_fmul
 609 028e 009B     		ldr	r3, [sp, #0]
 610 0290 0146     		mov	r1, r0
 611 0292 1846     		mov	r0, r3
 612 0294 FFF7FEFF 		bl	__aeabi_fadd
 613              	.LBE87:
 614              		.loc 2 72 0
 615 0298 0699     		ldr	r1, [sp, #24]	@ float
 616 029a FFF7FEFF 		bl	__aeabi_fmul
 617 029e 019A     		ldr	r2, [sp, #4]
 618 02a0 0146     		mov	r1, r0
 619 02a2 1046     		mov	r0, r2
 620 02a4 FFF7FEFF 		bl	__aeabi_fadd
 621              	.LBB88:
  70:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 622              		.loc 2 70 0
 623 02a8 0999     		ldr	r1, [sp, #36]	@ float
 624              	.LBE88:
 625              		.loc 2 72 0
 626 02aa 0A90     		str	r0, [sp, #40]	@ float
 627              	.LVL60:
 628              	.LBB89:
  70:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 629              		.loc 2 70 0
 630 02ac 0898     		ldr	r0, [sp, #32]	@ float
 631              	.LVL61:
 632 02ae FFF7FEFF 		bl	__aeabi_fadd
 633              	.LBE89:
 634              		.loc 2 72 0
 635 02b2 0299     		ldr	r1, [sp, #8]	@ float
 636 02b4 FFF7FEFF 		bl	__aeabi_fmul
 637              	.LBB90:
  70:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 638              		.loc 2 70 0
 639 02b8 3946     		mov	r1, r7
 640              	.LBE90:
 641              		.loc 2 72 0
 642 02ba 0346     		mov	r3, r0
 643              	.LBB91:
  70:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 644              		.loc 2 70 0
 645 02bc 3846     		mov	r0, r7
 646 02be 0093     		str	r3, [sp, #0]
 647 02c0 FFF7FEFF 		bl	__aeabi_fmul
 648 02c4 0146     		mov	r1, r0
 649 02c6 0798     		ldr	r0, [sp, #28]	@ float
 650 02c8 FFF7FEFF 		bl	__aeabi_fadd
 651              	.LBE91:
 652              		.loc 2 72 0
 653 02cc 0499     		ldr	r1, [sp, #16]	@ float
 654 02ce FFF7FEFF 		bl	__aeabi_fmul
 655 02d2 009B     		ldr	r3, [sp, #0]
 656 02d4 0146     		mov	r1, r0
 657 02d6 1846     		mov	r0, r3
 658 02d8 FFF7FEFF 		bl	__aeabi_fadd
 659              	.LBB92:
  70:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 660              		.loc 2 70 0
 661 02dc 5946     		mov	r1, fp
 662              	.LBE92:
 663              		.loc 2 72 0
 664 02de 0346     		mov	r3, r0
 665              	.LBB93:
  70:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 666              		.loc 2 70 0
 667 02e0 3846     		mov	r0, r7
 668 02e2 0093     		str	r3, [sp, #0]
 669 02e4 FFF7FEFF 		bl	__aeabi_fmul
 670 02e8 2146     		mov	r1, r4
 671 02ea 0746     		mov	r7, r0
 672              	.LVL62:
 673 02ec 3046     		mov	r0, r6
 674 02ee FFF7FEFF 		bl	__aeabi_fmul
 675 02f2 0146     		mov	r1, r0
 676 02f4 3846     		mov	r0, r7
 677 02f6 FFF7FEFF 		bl	__aeabi_fsub
 678              	.LBE93:
 679              		.loc 2 72 0
 680 02fa 0699     		ldr	r1, [sp, #24]	@ float
 681 02fc FFF7FEFF 		bl	__aeabi_fmul
 682 0300 009B     		ldr	r3, [sp, #0]
 683 0302 0146     		mov	r1, r0
 684 0304 1846     		mov	r0, r3
 685 0306 FFF7FEFF 		bl	__aeabi_fadd
 686 030a 0446     		mov	r4, r0
 687              	.LVL63:
  73:./subsystems/ahrs/ahrs_float_utils.h **** 
  74:./subsystems/ahrs/ahrs_float_utils.h ****   /* heading from mag -> make quaternion to rotate around ltp z axis*/
  75:./subsystems/ahrs/ahrs_float_utils.h ****   struct FloatQuat q_m;
  76:./subsystems/ahrs/ahrs_float_utils.h **** 
  77:./subsystems/ahrs/ahrs_float_utils.h ****   /* dot([mag_n.x, mag_n.x, 0], [AHRS_H_X, AHRS_H_Y, 0]) */
  78:./subsystems/ahrs/ahrs_float_utils.h ****   float dot = mag_ltp.x * AHRS_H_X + mag_ltp.y * AHRS_H_Y;
 688              		.loc 2 78 0
 689 030c 0A98     		ldr	r0, [sp, #40]	@ float
 690              	.LVL64:
 691 030e FFF7FEFF 		bl	__aeabi_f2d
 692 0312 CDE90201 		strd	r0, [sp, #8]
 693 0316 2046     		mov	r0, r4
 694 0318 FFF7FEFF 		bl	__aeabi_f2d
 695 031c CDE90401 		strd	r0, [sp, #16]
 696              	.LVL65:
  79:./subsystems/ahrs/ahrs_float_utils.h **** 
  80:./subsystems/ahrs/ahrs_float_utils.h ****   /* |v1||v2| */
  81:./subsystems/ahrs/ahrs_float_utils.h ****   float norm2 = sqrtf(SQUARE(mag_ltp.x) + SQUARE(mag_ltp.y))
 697              		.loc 2 81 0
 698 0320 0A98     		ldr	r0, [sp, #40]	@ float
 699              	.LVL66:
 700 0322 0146     		mov	r1, r0
 701 0324 FFF7FEFF 		bl	__aeabi_fmul
 702 0328 2146     		mov	r1, r4
 703 032a 0646     		mov	r6, r0
 704              	.LVL67:
 705 032c 2046     		mov	r0, r4
 706 032e FFF7FEFF 		bl	__aeabi_fmul
 707 0332 0146     		mov	r1, r0
 708 0334 3046     		mov	r0, r6
 709 0336 FFF7FEFF 		bl	__aeabi_fadd
 710 033a FFF7FEFF 		bl	sqrtf
 711 033e 4349     		ldr	r1, .L43+28
 712 0340 FFF7FEFF 		bl	__aeabi_fmul
  78:./subsystems/ahrs/ahrs_float_utils.h ****   float dot = mag_ltp.x * AHRS_H_X + mag_ltp.y * AHRS_H_Y;
 713              		.loc 2 78 0
 714 0344 3CA3     		adr	r3, .L43+8
 715 0346 D3E90023 		ldrd	r2, [r3]
 716              		.loc 2 81 0
 717 034a 0446     		mov	r4, r0
 718              	.LVL68:
  78:./subsystems/ahrs/ahrs_float_utils.h ****   float dot = mag_ltp.x * AHRS_H_X + mag_ltp.y * AHRS_H_Y;
 719              		.loc 2 78 0
 720 034c DDE90201 		ldrd	r0, [sp, #8]
 721 0350 FFF7FEFF 		bl	__aeabi_dmul
 722 0354 3AA3     		adr	r3, .L43+16
 723 0356 D3E90023 		ldrd	r2, [r3]
 724 035a 0646     		mov	r6, r0
 725 035c 0F46     		mov	r7, r1
 726 035e DDE90401 		ldrd	r0, [sp, #16]
 727 0362 FFF7FEFF 		bl	__aeabi_dmul
 728 0366 0246     		mov	r2, r0
 729 0368 0B46     		mov	r3, r1
 730 036a 3046     		mov	r0, r6
 731 036c 3946     		mov	r1, r7
 732 036e FFF7FEFF 		bl	__aeabi_dadd
 733 0372 FFF7FEFF 		bl	__aeabi_d2f
 734 0376 0146     		mov	r1, r0
  82:./subsystems/ahrs/ahrs_float_utils.h ****     * sqrtf(SQUARE(AHRS_H_X) + SQUARE(AHRS_H_Y));
  83:./subsystems/ahrs/ahrs_float_utils.h **** 
  84:./subsystems/ahrs/ahrs_float_utils.h ****   // catch 180deg case
  85:./subsystems/ahrs/ahrs_float_utils.h ****   if (ABS(norm2 + dot) < 5*FLT_MIN) {
 735              		.loc 2 85 0
 736 0378 2046     		mov	r0, r4
 737 037a FFF7FEFF 		bl	__aeabi_fadd
 738 037e 0021     		movs	r1, #0
 739 0380 0446     		mov	r4, r0
 740 0382 FFF7FEFF 		bl	__aeabi_fcmplt
 741 0386 0126     		movs	r6, #1
 742 0388 20B1     		cbz	r0, .L35
 743 038a 2046     		mov	r0, r4
 744 038c 3049     		ldr	r1, .L43+32
 745 038e FFF7FEFF 		bl	__aeabi_fcmpgt
 746 0392 04E0     		b	.L40
 747              	.L35:
 748 0394 2046     		mov	r0, r4
 749 0396 4FF0D071 		mov	r1, #27262976
 750 039a FFF7FEFF 		bl	__aeabi_fcmplt
 751              	.L40:
 752 039e 00B9     		cbnz	r0, .L16
 753 03a0 0026     		movs	r6, #0
 754              	.L16:
 755 03a2 F6B2     		uxtb	r6, r6
 756 03a4 002E     		cmp	r6, #0
 757 03a6 55D1     		bne	.L25
 758              	.LVL69:
  86:./subsystems/ahrs/ahrs_float_utils.h ****     QUAT_ASSIGN(q_m, 0.0, 0.0, 0.0, 1.0);
  87:./subsystems/ahrs/ahrs_float_utils.h ****   } else {
  88:./subsystems/ahrs/ahrs_float_utils.h ****     /* q_xyz = cross([mag_n.x, mag_n.y, 0], [AHRS_H_X, AHRS_H_Y, 0]) */
  89:./subsystems/ahrs/ahrs_float_utils.h ****     q_m.qx = 0.0;
  90:./subsystems/ahrs/ahrs_float_utils.h ****     q_m.qy = 0.0;
  91:./subsystems/ahrs/ahrs_float_utils.h ****     q_m.qz = mag_ltp.x * AHRS_H_Y - mag_ltp.y * AHRS_H_X;
 759              		.loc 2 91 0
 760 03a8 DDE90201 		ldrd	r0, [sp, #8]
 761 03ac 24A3     		adr	r3, .L43+16
 762 03ae D3E90023 		ldrd	r2, [r3]
 763 03b2 FFF7FEFF 		bl	__aeabi_dmul
 764 03b6 20A3     		adr	r3, .L43+8
 765 03b8 D3E90023 		ldrd	r2, [r3]
 766 03bc 0646     		mov	r6, r0
 767 03be 0F46     		mov	r7, r1
 768 03c0 DDE90401 		ldrd	r0, [sp, #16]
 769 03c4 FFF7FEFF 		bl	__aeabi_dmul
 770 03c8 0246     		mov	r2, r0
 771 03ca 0B46     		mov	r3, r1
 772 03cc 3046     		mov	r0, r6
 773 03ce 3946     		mov	r1, r7
 774 03d0 FFF7FEFF 		bl	__aeabi_dsub
 775 03d4 FFF7FEFF 		bl	__aeabi_d2f
 776              	.LBB94:
  92:./subsystems/ahrs/ahrs_float_utils.h ****     q_m.qi = norm2 + dot;
  93:./subsystems/ahrs/ahrs_float_utils.h ****     FLOAT_QUAT_NORMALIZE(q_m);
 777              		.loc 2 93 0
 778 03d8 2146     		mov	r1, r4
 779              	.LBE94:
  91:./subsystems/ahrs/ahrs_float_utils.h ****     q_m.qz = mag_ltp.x * AHRS_H_Y - mag_ltp.y * AHRS_H_X;
 780              		.loc 2 91 0
 781 03da 0646     		mov	r6, r0
 782              	.LVL70:
 783              	.LBB95:
 784              		.loc 2 93 0
 785 03dc 2046     		mov	r0, r4
 786              	.LVL71:
 787 03de FFF7FEFF 		bl	__aeabi_fmul
 788 03e2 0021     		movs	r1, #0
 789 03e4 FFF7FEFF 		bl	__aeabi_fadd
 790 03e8 0021     		movs	r1, #0
 791 03ea FFF7FEFF 		bl	__aeabi_fadd
 792 03ee 3146     		mov	r1, r6
 793 03f0 0746     		mov	r7, r0
 794 03f2 3046     		mov	r0, r6
 795 03f4 FFF7FEFF 		bl	__aeabi_fmul
 796 03f8 0146     		mov	r1, r0
 797 03fa 3846     		mov	r0, r7
 798 03fc FFF7FEFF 		bl	__aeabi_fadd
 799 0400 FFF7FEFF 		bl	sqrtf
 800 0404 4FF40001 		mov	r1, #8388608
 801 0408 0746     		mov	r7, r0
 802              	.LVL72:
 803 040a FFF7FEFF 		bl	__aeabi_fcmpgt
 804              	.LVL73:
 805 040e 30B3     		cbz	r0, .L36
 806 0410 2046     		mov	r0, r4
 807 0412 3946     		mov	r1, r7
 808 0414 FFF7FEFF 		bl	__aeabi_fdiv
 809 0418 3946     		mov	r1, r7
 810 041a 0446     		mov	r4, r0
 811              	.LVL74:
 812 041c 0020     		movs	r0, #0
 813              	.LVL75:
 814 041e FFF7FEFF 		bl	__aeabi_fdiv
 815 0422 3946     		mov	r1, r7
 816 0424 8346     		mov	fp, r0
 817              	.LVL76:
 818 0426 3046     		mov	r0, r6
 819              	.LVL77:
 820 0428 FFF7FEFF 		bl	__aeabi_fdiv
 821 042c 0646     		mov	r6, r0
 822              	.LVL78:
 823 042e 18E0     		b	.L17
 824              	.L44:
 825              		.align	3
 826              	.L43:
 827 0430 CD3B7F66 		.word	1719614413
 828 0434 9EA0F63F 		.word	1073127582
 829 0438 95B8E130 		.word	820099221
 830 043c 4B52E03F 		.word	1071665739
 831 0440 B54CEFF8 		.word	-118534987
 832 0444 CAE0B73F 		.word	1069015242
 833 0448 00000000 		.word	ahrs_aligner
 834 044c B0BC043F 		.word	1057275056
 835 0450 0000A081 		.word	-2120220672
 836              	.LVL79:
 837              	.L25:
 838              	.LBE95:
  86:./subsystems/ahrs/ahrs_float_utils.h ****     QUAT_ASSIGN(q_m, 0.0, 0.0, 0.0, 1.0);
 839              		.loc 2 86 0
 840 0454 0024     		movs	r4, #0
 841 0456 4FF07E56 		mov	r6, #1065353216
 842 045a A346     		mov	fp, r4
 843              	.LVL80:
 844 045c 01E0     		b	.L17
 845              	.LVL81:
 846              	.L36:
 847              	.LBB96:
  89:./subsystems/ahrs/ahrs_float_utils.h ****     q_m.qx = 0.0;
 848              		.loc 2 89 0
 849 045e 4FF0000B 		mov	fp, #0
 850              	.LVL82:
 851              	.L17:
 852              	.LBE96:
  94:./subsystems/ahrs/ahrs_float_utils.h ****   }
  95:./subsystems/ahrs/ahrs_float_utils.h **** 
  96:./subsystems/ahrs/ahrs_float_utils.h ****   // q_ltp2imu = q_a * q_m
  97:./subsystems/ahrs/ahrs_float_utils.h ****   // and wrap and normalize
  98:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_QUAT_COMP_NORM_SHORTEST(*q, q_m, q_a);
 853              		.loc 2 98 0
 854 0462 2946     		mov	r1, r5
 855 0464 5846     		mov	r0, fp
 856 0466 FFF7FEFF 		bl	__aeabi_fmul
 857 046a 4146     		mov	r1, r8
 858 046c 0290     		str	r0, [sp, #8]	@ float
 859 046e 5846     		mov	r0, fp
 860 0470 FFF7FEFF 		bl	__aeabi_fmul
 861 0474 5146     		mov	r1, sl
 862 0476 0490     		str	r0, [sp, #16]	@ float
 863 0478 2046     		mov	r0, r4
 864 047a FFF7FEFF 		bl	__aeabi_fmul
 865 047e 0299     		ldr	r1, [sp, #8]	@ float
 866 0480 FFF7FEFF 		bl	__aeabi_fsub
 867 0484 0499     		ldr	r1, [sp, #16]	@ float
 868 0486 FFF7FEFF 		bl	__aeabi_fsub
 869 048a 4946     		mov	r1, r9
 870 048c 0746     		mov	r7, r0
 871 048e 3046     		mov	r0, r6
 872 0490 FFF7FEFF 		bl	__aeabi_fmul
 873 0494 0146     		mov	r1, r0
 874 0496 3846     		mov	r0, r7
 875 0498 FFF7FEFF 		bl	__aeabi_fsub
 876 049c 5146     		mov	r1, sl
 877 049e 0746     		mov	r7, r0
 878              	.LVL83:
 879 04a0 5846     		mov	r0, fp
 880              	.LVL84:
 881 04a2 FFF7FEFF 		bl	__aeabi_fmul
 882 04a6 4946     		mov	r1, r9
 883 04a8 0690     		str	r0, [sp, #24]	@ float
 884 04aa 5846     		mov	r0, fp
 885 04ac FFF7FEFF 		bl	__aeabi_fmul
 886 04b0 2946     		mov	r1, r5
 887 04b2 0790     		str	r0, [sp, #28]	@ float
 888 04b4 2046     		mov	r0, r4
 889 04b6 FFF7FEFF 		bl	__aeabi_fmul
 890 04ba 0699     		ldr	r1, [sp, #24]	@ float
 891 04bc FFF7FEFF 		bl	__aeabi_fadd
 892 04c0 0799     		ldr	r1, [sp, #28]	@ float
 893 04c2 FFF7FEFF 		bl	__aeabi_fadd
 894 04c6 4146     		mov	r1, r8
 895 04c8 8346     		mov	fp, r0
 896              	.LVL85:
 897 04ca 3046     		mov	r0, r6
 898 04cc FFF7FEFF 		bl	__aeabi_fmul
 899 04d0 0146     		mov	r1, r0
 900 04d2 5846     		mov	r0, fp
 901 04d4 FFF7FEFF 		bl	__aeabi_fsub
 902 04d8 4146     		mov	r1, r8
 903 04da 8346     		mov	fp, r0
 904              	.LVL86:
 905 04dc 2046     		mov	r0, r4
 906              	.LVL87:
 907 04de FFF7FEFF 		bl	__aeabi_fmul
 908 04e2 0799     		ldr	r1, [sp, #28]	@ float
 909 04e4 FFF7FEFF 		bl	__aeabi_fsub
 910 04e8 0699     		ldr	r1, [sp, #24]	@ float
 911 04ea FFF7FEFF 		bl	__aeabi_fadd
 912 04ee 2946     		mov	r1, r5
 913 04f0 8046     		mov	r8, r0
 914              	.LVL88:
 915 04f2 3046     		mov	r0, r6
 916 04f4 FFF7FEFF 		bl	__aeabi_fmul
 917 04f8 0146     		mov	r1, r0
 918 04fa 4046     		mov	r0, r8
 919 04fc FFF7FEFF 		bl	__aeabi_fadd
 920 0500 4946     		mov	r1, r9
 921 0502 0546     		mov	r5, r0
 922              	.LVL89:
 923 0504 2046     		mov	r0, r4
 924              	.LVL90:
 925 0506 FFF7FEFF 		bl	__aeabi_fmul
 926 050a 0499     		ldr	r1, [sp, #16]	@ float
 927 050c FFF7FEFF 		bl	__aeabi_fadd
 928 0510 0299     		ldr	r1, [sp, #8]	@ float
 929 0512 FFF7FEFF 		bl	__aeabi_fsub
 930 0516 5146     		mov	r1, sl
 931 0518 0446     		mov	r4, r0
 932              	.LVL91:
 933 051a 3046     		mov	r0, r6
 934 051c FFF7FEFF 		bl	__aeabi_fmul
 935 0520 0146     		mov	r1, r0
 936 0522 2046     		mov	r0, r4
 937 0524 FFF7FEFF 		bl	__aeabi_fadd
 938 0528 0021     		movs	r1, #0
 939 052a 0646     		mov	r6, r0
 940              	.LVL92:
 941 052c 3846     		mov	r0, r7
 942              	.LVL93:
 943 052e FFF7FEFF 		bl	__aeabi_fcmplt
 944 0532 38B1     		cbz	r0, .L19
 945 0534 07F10047 		add	r7, r7, #-2147483648
 946              	.LVL94:
 947 0538 0BF1004B 		add	fp, fp, #-2147483648
 948              	.LVL95:
 949 053c 05F10045 		add	r5, r5, #-2147483648
 950              	.LVL96:
 951 0540 06F10046 		add	r6, r6, #-2147483648
 952              	.LVL97:
 953              	.L19:
 954              	.LBB97:
 955 0544 3946     		mov	r1, r7
 956 0546 3846     		mov	r0, r7
 957 0548 FFF7FEFF 		bl	__aeabi_fmul
 958 054c 5946     		mov	r1, fp
 959 054e 0446     		mov	r4, r0
 960 0550 5846     		mov	r0, fp
 961 0552 FFF7FEFF 		bl	__aeabi_fmul
 962 0556 0146     		mov	r1, r0
 963 0558 2046     		mov	r0, r4
 964 055a FFF7FEFF 		bl	__aeabi_fadd
 965 055e 2946     		mov	r1, r5
 966 0560 0446     		mov	r4, r0
 967 0562 2846     		mov	r0, r5
 968 0564 FFF7FEFF 		bl	__aeabi_fmul
 969 0568 0146     		mov	r1, r0
 970 056a 2046     		mov	r0, r4
 971 056c FFF7FEFF 		bl	__aeabi_fadd
 972 0570 3146     		mov	r1, r6
 973 0572 0446     		mov	r4, r0
 974 0574 3046     		mov	r0, r6
 975 0576 FFF7FEFF 		bl	__aeabi_fmul
 976 057a 0146     		mov	r1, r0
 977 057c 2046     		mov	r0, r4
 978 057e FFF7FEFF 		bl	__aeabi_fadd
 979 0582 FFF7FEFF 		bl	sqrtf
 980 0586 4FF40001 		mov	r1, #8388608
 981 058a 0446     		mov	r4, r0
 982              	.LVL98:
 983 058c FFF7FEFF 		bl	__aeabi_fcmpgt
 984              	.LVL99:
 985 0590 98B1     		cbz	r0, .L21
 986 0592 3846     		mov	r0, r7
 987 0594 2146     		mov	r1, r4
 988 0596 FFF7FEFF 		bl	__aeabi_fdiv
 989 059a 2146     		mov	r1, r4
 990 059c 0746     		mov	r7, r0
 991              	.LVL100:
 992 059e 5846     		mov	r0, fp
 993              	.LVL101:
 994 05a0 FFF7FEFF 		bl	__aeabi_fdiv
 995 05a4 2146     		mov	r1, r4
 996 05a6 8346     		mov	fp, r0
 997              	.LVL102:
 998 05a8 2846     		mov	r0, r5
 999              	.LVL103:
 1000 05aa FFF7FEFF 		bl	__aeabi_fdiv
 1001 05ae 2146     		mov	r1, r4
 1002 05b0 0546     		mov	r5, r0
 1003              	.LVL104:
 1004 05b2 3046     		mov	r0, r6
 1005              	.LVL105:
 1006 05b4 FFF7FEFF 		bl	__aeabi_fdiv
 1007 05b8 0646     		mov	r6, r0
 1008              	.LVL106:
 1009              	.L21:
 1010              	.LBE97:
 1011              	.LBE98:
 1012              	.LBE99:
 1013              		.file 3 "./subsystems/ahrs/ahrs_int_utils.h"
   1:./subsystems/ahrs/ahrs_int_utils.h **** #ifndef AHRS_INT_UTILS_H
   2:./subsystems/ahrs/ahrs_int_utils.h **** #define AHRS_INT_UTILS_H
   3:./subsystems/ahrs/ahrs_int_utils.h **** 
   4:./subsystems/ahrs/ahrs_int_utils.h **** //#include "../../test/pprz_algebra_print.h"
   5:./subsystems/ahrs/ahrs_int_utils.h **** #include "math/pprz_algebra_int.h"
   6:./subsystems/ahrs/ahrs_int_utils.h **** 
   7:./subsystems/ahrs/ahrs_int_utils.h **** #include "subsystems/ahrs/ahrs_magnetic_field_model.h"
   8:./subsystems/ahrs/ahrs_int_utils.h **** 
   9:./subsystems/ahrs/ahrs_int_utils.h **** #include "subsystems/ahrs/ahrs_float_utils.h"
  10:./subsystems/ahrs/ahrs_int_utils.h **** 
  11:./subsystems/ahrs/ahrs_int_utils.h **** static inline void ahrs_int_get_euler_from_accel_mag(struct Int32Eulers* e, struct Int32Vect3* acce
  12:./subsystems/ahrs/ahrs_int_utils.h ****   //  DISPLAY_INT32_VECT3("# accel", (*accel));
  13:./subsystems/ahrs/ahrs_int_utils.h ****   const float fphi = atan2f(-accel->y, -accel->z);
  14:./subsystems/ahrs/ahrs_int_utils.h ****   //  printf("# atan float %f\n", DegOfRad(fphi));
  15:./subsystems/ahrs/ahrs_int_utils.h ****   e->phi = ANGLE_BFP_OF_REAL(fphi);
  16:./subsystems/ahrs/ahrs_int_utils.h **** 
  17:./subsystems/ahrs/ahrs_int_utils.h ****   int32_t cphi;
  18:./subsystems/ahrs/ahrs_int_utils.h ****   PPRZ_ITRIG_COS(cphi, e->phi);
  19:./subsystems/ahrs/ahrs_int_utils.h ****   int32_t cphi_ax = -INT_MULT_RSHIFT(cphi, accel->x, INT32_TRIG_FRAC);
  20:./subsystems/ahrs/ahrs_int_utils.h ****   const float ftheta = atan2f(-cphi_ax, -accel->z);
  21:./subsystems/ahrs/ahrs_int_utils.h ****   e->theta = ANGLE_BFP_OF_REAL(ftheta);
  22:./subsystems/ahrs/ahrs_int_utils.h **** 
  23:./subsystems/ahrs/ahrs_int_utils.h ****   int32_t sphi;
  24:./subsystems/ahrs/ahrs_int_utils.h ****   PPRZ_ITRIG_SIN(sphi, e->phi);
  25:./subsystems/ahrs/ahrs_int_utils.h ****   int32_t stheta;
  26:./subsystems/ahrs/ahrs_int_utils.h ****   PPRZ_ITRIG_SIN(stheta, e->theta);
  27:./subsystems/ahrs/ahrs_int_utils.h ****   int32_t ctheta;
  28:./subsystems/ahrs/ahrs_int_utils.h ****   PPRZ_ITRIG_COS(ctheta, e->theta);
  29:./subsystems/ahrs/ahrs_int_utils.h **** 
  30:./subsystems/ahrs/ahrs_int_utils.h ****   int32_t sphi_stheta = (sphi*stheta)>>INT32_TRIG_FRAC;
  31:./subsystems/ahrs/ahrs_int_utils.h ****   int32_t cphi_stheta = (cphi*stheta)>>INT32_TRIG_FRAC;
  32:./subsystems/ahrs/ahrs_int_utils.h ****   //int32_t sphi_ctheta = (sphi*ctheta)>>INT32_TRIG_FRAC;
  33:./subsystems/ahrs/ahrs_int_utils.h ****   //int32_t cphi_ctheta = (cphi*ctheta)>>INT32_TRIG_FRAC;
  34:./subsystems/ahrs/ahrs_int_utils.h **** 
  35:./subsystems/ahrs/ahrs_int_utils.h ****   const int32_t mn = ctheta * mag->x + sphi_stheta * mag->y + cphi_stheta * mag->z;
  36:./subsystems/ahrs/ahrs_int_utils.h ****   const int32_t me = 0      * mag->x + cphi        * mag->y - sphi        * mag->z;
  37:./subsystems/ahrs/ahrs_int_utils.h ****   //const int32_t md =
  38:./subsystems/ahrs/ahrs_int_utils.h ****   //  -stheta     * imu.mag.x +
  39:./subsystems/ahrs/ahrs_int_utils.h ****   //  sphi_ctheta * imu.mag.y +
  40:./subsystems/ahrs/ahrs_int_utils.h ****   //  cphi_ctheta * imu.mag.z;
  41:./subsystems/ahrs/ahrs_int_utils.h ****   //  float m_psi = -atan2(me, mn);
  42:./subsystems/ahrs/ahrs_int_utils.h ****   const float mag_dec = atan2(-AHRS_H_Y, AHRS_H_X);
  43:./subsystems/ahrs/ahrs_int_utils.h ****   const float fpsi = atan2f(-me, mn) - mag_dec;
  44:./subsystems/ahrs/ahrs_int_utils.h ****   e->psi = ANGLE_BFP_OF_REAL(fpsi);
  45:./subsystems/ahrs/ahrs_int_utils.h ****   INT32_ANGLE_NORMALIZE(e->psi);
  46:./subsystems/ahrs/ahrs_int_utils.h **** 
  47:./subsystems/ahrs/ahrs_int_utils.h **** }
  48:./subsystems/ahrs/ahrs_int_utils.h **** 
  49:./subsystems/ahrs/ahrs_int_utils.h **** static inline void ahrs_int_get_quat_from_accel(struct Int32Quat* q, struct Int32Vect3* accel) {
  50:./subsystems/ahrs/ahrs_int_utils.h ****   struct FloatQuat q_f;
  51:./subsystems/ahrs/ahrs_int_utils.h ****   ahrs_float_get_quat_from_accel(&q_f, accel);
  52:./subsystems/ahrs/ahrs_int_utils.h ****   QUAT_BFP_OF_REAL(*q, q_f);
  53:./subsystems/ahrs/ahrs_int_utils.h **** }
  54:./subsystems/ahrs/ahrs_int_utils.h **** 
  55:./subsystems/ahrs/ahrs_int_utils.h **** static inline void ahrs_int_get_quat_from_accel_mag(struct Int32Quat* q, struct Int32Vect3* accel, 
  56:./subsystems/ahrs/ahrs_int_utils.h **** 
  57:./subsystems/ahrs/ahrs_int_utils.h ****   struct FloatQuat q_f;
  58:./subsystems/ahrs/ahrs_int_utils.h ****   ahrs_float_get_quat_from_accel_mag(&q_f, accel, mag);
  59:./subsystems/ahrs/ahrs_int_utils.h ****   QUAT_BFP_OF_REAL(*q, q_f);
 1014              		.loc 3 59 0
 1015 05ba 4FF08E41 		mov	r1, #1191182336
 1016 05be 3846     		mov	r0, r7
 1017 05c0 FFF7FEFF 		bl	__aeabi_fmul
 1018 05c4 FFF7FEFF 		bl	__aeabi_f2iz
 1019 05c8 D74C     		ldr	r4, .L45
 1020              	.LVL107:
 1021 05ca 8146     		mov	r9, r0
 1022              	.LVL108:
 1023 05cc 4FF08E41 		mov	r1, #1191182336
 1024 05d0 2060     		str	r0, [r4, #0]
 1025 05d2 5846     		mov	r0, fp
 1026 05d4 FFF7FEFF 		bl	__aeabi_fmul
 1027 05d8 FFF7FEFF 		bl	__aeabi_f2iz
 1028 05dc 4FF08E41 		mov	r1, #1191182336
 1029 05e0 0746     		mov	r7, r0
 1030              	.LVL109:
 1031 05e2 6060     		str	r0, [r4, #4]
 1032 05e4 2846     		mov	r0, r5
 1033 05e6 FFF7FEFF 		bl	__aeabi_fmul
 1034 05ea FFF7FEFF 		bl	__aeabi_f2iz
 1035 05ee 4FF08E41 		mov	r1, #1191182336
 1036 05f2 8046     		mov	r8, r0
 1037 05f4 A060     		str	r0, [r4, #8]
 1038 05f6 3046     		mov	r0, r6
 1039 05f8 FFF7FEFF 		bl	__aeabi_fmul
 1040 05fc FFF7FEFF 		bl	__aeabi_f2iz
 1041              	.LBE100:
 1042              	.LBE102:
  93:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  94:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #if USE_MAGNETOMETER
  95:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Compute an initial orientation from accel and mag directly as quaternion */
  96:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_int_get_quat_from_accel_mag(&ahrs.ltp_to_imu_quat, &ahrs_aligner.lp_accel, &ahrs_aligner.lp_
  97:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.heading_aligned = TRUE;
 1043              		.loc 1 97 0
 1044 0600 CA4D     		ldr	r5, .L45+4
 1045              	.LVL110:
 1046              	.LBB103:
 1047              	.LBB101:
 1048              		.loc 3 59 0
 1049 0602 0646     		mov	r6, r0
 1050              	.LVL111:
 1051 0604 E060     		str	r0, [r4, #12]
 1052              	.LBE101:
 1053              	.LBE103:
 1054              		.loc 1 97 0
 1055 0606 0120     		movs	r0, #1
 1056 0608 85F84700 		strb	r0, [r5, #71]
 1057              	.LVL112:
 1058              	.LBB104:
 1059              	.LBB105:
  98:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #else
  99:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Compute an initial orientation from accel and just set heading to zero */
 100:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_int_get_quat_from_accel(&ahrs.ltp_to_imu_quat, &ahrs_aligner.lp_accel);
 101:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.heading_aligned = FALSE;
 102:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
 103:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 104:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Convert initial orientation from quat to euler and rotation matrix representations. */
 105:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   compute_imu_euler_and_rmat_from_quat();
 106:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 107:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   compute_body_orientation();
 108:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 109:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Use low passed gyro value as initial bias */
 110:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.gyro_bias, ahrs_aligner.lp_gyro);
 111:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.high_rez_bias, ahrs_aligner.lp_gyro);
 112:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_LSHIFT(ahrs_impl.high_rez_bias, ahrs_impl.high_rez_bias, 28);
 113:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 114:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs.status = AHRS_RUNNING;
 115:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 116:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 117:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 118:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 119:subsystems/ahrs/ahrs_int_cmpl_quat.c **** /*
 120:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  *
 121:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  *
 122:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  *
 123:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  */
 124:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_propagate(void) {
 125:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 126:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* unbias gyro             */
 127:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Rates omega;
 128:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_DIFF(omega, imu.gyro_prev, ahrs_impl.gyro_bias);
 129:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 130:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* low pass rate */
 131:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #ifdef AHRS_PROPAGATE_LOW_PASS_RATES
 132:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_SMUL(ahrs.imu_rate, ahrs.imu_rate,2);
 133:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_ADD(ahrs.imu_rate, omega);
 134:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_SDIV(ahrs.imu_rate, ahrs.imu_rate, 3);
 135:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #else
 136:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY(ahrs.imu_rate, omega);
 137:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
 138:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 139:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* add correction     */
 140:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_ADD(omega, ahrs_impl.rate_correction);
 141:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* and zeros it */
 142:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs_impl.rate_correction);
 143:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 144:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* integrate quaternion */
 145:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INTEGRATE_FI(ahrs.ltp_to_imu_quat, ahrs_impl.high_rez_quat, omega, AHRS_PROPAGATE_FREQ
 146:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 147:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 148:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   compute_imu_euler_and_rmat_from_quat();
 149:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 150:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   compute_body_orientation();
 151:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 152:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 153:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 154:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 155:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 156:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 157:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_accel(void) {
 158:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 159:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // c2 = ltp z-axis in imu-frame
 160:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 c2 = { RMAT_ELMT(ahrs.ltp_to_imu_rmat, 0,2),
 161:subsystems/ahrs/ahrs_int_cmpl_quat.c ****                            RMAT_ELMT(ahrs.ltp_to_imu_rmat, 1,2),
 162:subsystems/ahrs/ahrs_int_cmpl_quat.c ****                            RMAT_ELMT(ahrs.ltp_to_imu_rmat, 2,2)};
 163:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 residual;
 164:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 165:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ahrs_impl.correct_gravity && ahrs_impl.ltp_vel_norm_valid) {
 166:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     /*
 167:subsystems/ahrs/ahrs_int_cmpl_quat.c ****      * centrifugal acceleration in body frame
 168:subsystems/ahrs/ahrs_int_cmpl_quat.c ****      * a_c_body = omega x (omega x r)
 169:subsystems/ahrs/ahrs_int_cmpl_quat.c ****      * (omega x r) = tangential velocity in body frame
 170:subsystems/ahrs/ahrs_int_cmpl_quat.c ****      * a_c_body = omega x vel_tangential_body
 171:subsystems/ahrs/ahrs_int_cmpl_quat.c ****      * assumption: tangential velocity only along body x-axis
 172:subsystems/ahrs/ahrs_int_cmpl_quat.c ****      */
 173:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 174:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     // FIXME: check overflows !
 175:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     const struct Int32Vect3 vel_tangential_body = {(ahrs_impl.ltp_vel_norm>>INT32_ACCEL_FRAC), 0.0,
 176:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     struct Int32Vect3 acc_c_body;
 177:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     VECT3_RATES_CROSS_VECT3(acc_c_body, ahrs.body_rate, vel_tangential_body);
 178:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_RSHIFT(acc_c_body, acc_c_body, INT32_SPEED_FRAC+INT32_RATE_FRAC-INT32_ACCEL_FRAC-IN
 179:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 180:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     /* convert centrifucal acceleration from body to imu frame */
 181:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     struct Int32Vect3 acc_c_imu;
 182:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_RMAT_VMULT(acc_c_imu, imu.body_to_imu_rmat, acc_c_body);
 183:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 184:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     /* and subtract it from imu measurement to get a corrected measurement of the gravitiy vector *
 185:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     struct Int32Vect3 corrected_gravity;
 186:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_DIFF(corrected_gravity, imu.accel, acc_c_imu);
 187:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 188:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     /* compute the residual of gravity vector in imu frame */
 189:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_CROSS_PRODUCT(residual, corrected_gravity, c2);
 190:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   } else {
 191:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_CROSS_PRODUCT(residual, imu.accel, c2);
 192:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   }
 193:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 194:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 195:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   int32_t inv_weight;
 196:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ahrs_impl.use_gravity_heuristic) {
 197:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     /* heuristic on acceleration norm */
 198:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     int32_t acc_norm;
 199:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_NORM(acc_norm, imu.accel);
 200:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     const int32_t acc_norm_d = ABS(ACCEL_BFP_OF_REAL(9.81)-acc_norm);
 201:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     inv_weight = Chop(6*acc_norm_d/ACCEL_BFP_OF_REAL(9.81), 1, 6);
 202:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   }
 203:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   else {
 204:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     inv_weight = 1;
 205:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   }
 206:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 207:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // residual FRAC : ACCEL_FRAC + TRIG_FRAC = 10 + 14 = 24
 208:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // rate_correction FRAC = RATE_FRAC = 12
 209:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // 2^12 / 2^24 * 5e-2 = 1/81920
 210:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += -residual.x/82000/inv_weight;
 211:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += -residual.y/82000/inv_weight;
 212:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += -residual.z/82000/inv_weight;
 213:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 214:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // residual FRAC = ACCEL_FRAC + TRIG_FRAC = 10 + 14 = 24
 215:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // high_rez_bias = RATE_FRAC+28 = 40
 216:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // 2^40 / 2^24 * 5e-6 = 1/3.05
 217:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 218:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //  ahrs_impl.high_rez_bias.p += residual.x*3;
 219:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //  ahrs_impl.high_rez_bias.q += residual.y*3;
 220:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //  ahrs_impl.high_rez_bias.r += residual.z*3;
 221:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 222:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.p += residual.x/inv_weight;
 223:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.q += residual.y/inv_weight;
 224:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r += residual.z/inv_weight;
 225:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 226:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 227:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /*                        */
 228:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 229:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 230:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 231:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 232:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_mag(void) {
 233:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #if AHRS_MAG_UPDATE_ALL_AXES
 234:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_update_mag_full();
 235:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #else
 236:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_update_mag_2d();
 237:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
 238:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 239:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 240:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 241:subsystems/ahrs/ahrs_int_cmpl_quat.c **** static inline void ahrs_update_mag_full(void) {
 242:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   const struct Int32Vect3 expected_ltp = {MAG_BFP_OF_REAL(AHRS_H_X),
 243:subsystems/ahrs/ahrs_int_cmpl_quat.c ****                                           MAG_BFP_OF_REAL(AHRS_H_Y),
 244:subsystems/ahrs/ahrs_int_cmpl_quat.c ****                                           MAG_BFP_OF_REAL(AHRS_H_Z)};
 245:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 expected_imu;
 246:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(expected_imu, ahrs.ltp_to_imu_rmat, expected_ltp);
 247:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 248:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 residual;
 249:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_VECT3_CROSS_PRODUCT(residual, imu.mag, expected_imu);
 250:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 251:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual.x/32/16;
 252:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += residual.y/32/16;
 253:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += residual.z/32/16;
 254:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 255:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 256:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.p -= residual.x/32*1024;
 257:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.q -= residual.y/32*1024;
 258:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r -= residual.z/32*1024;
 259:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 260:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 261:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 262:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 263:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 264:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 265:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 266:subsystems/ahrs/ahrs_int_cmpl_quat.c **** static inline void ahrs_update_mag_2d(void) {
 267:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 268:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   const struct Int32Vect2 expected_ltp = {MAG_BFP_OF_REAL(AHRS_H_X),
 269:subsystems/ahrs/ahrs_int_cmpl_quat.c ****                                           MAG_BFP_OF_REAL(AHRS_H_Y)};
 270:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 271:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 measured_ltp;
 272:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_TRANSP_VMULT(measured_ltp, ahrs.ltp_to_imu_rmat, imu.mag);
 273:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 274:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 residual_ltp =
 275:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     { 0,
 276:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       0,
 277:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (measured_ltp.x * expected_ltp.y - measured_ltp.y * expected_ltp.x)/(1<<5)};
 278:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 279:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 residual_imu;
 280:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 281:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 282:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // residual_ltp FRAC = 2 * MAG_FRAC = 22
 283:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // rate_correction FRAC = RATE_FRAC = 12
 284:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // 2^12 / 2^22 * 2.5 = 1/410
 285:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 286:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //  ahrs_impl.rate_correction.p += residual_imu.x*(1<<5)/410;
 287:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //  ahrs_impl.rate_correction.q += residual_imu.y*(1<<5)/410;
 288:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //  ahrs_impl.rate_correction.r += residual_imu.z*(1<<5)/410;
 289:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 290:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/16;
 291:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += residual_imu.y/16;
 292:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += residual_imu.z/16;
 293:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 294:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 295:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // residual_ltp FRAC = 2 * MAG_FRAC = 22
 296:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // high_rez_bias = RATE_FRAC+28 = 40
 297:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // 2^40 / 2^22 * 2.5e-3 = 655
 298:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 299:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //  ahrs_impl.high_rez_bias.p -= residual_imu.x*(1<<5)*655;
 300:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //  ahrs_impl.high_rez_bias.q -= residual_imu.y*(1<<5)*655;
 301:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //  ahrs_impl.high_rez_bias.r -= residual_imu.z*(1<<5)*655;
 302:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 303:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.p -= residual_imu.x*1024;
 304:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.q -= residual_imu.y*1024;
 305:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r -= residual_imu.z*1024;
 306:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 307:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 308:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 309:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 310:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 311:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 312:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_gps(void) {
 313:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #if AHRS_GRAVITY_UPDATE_COORDINATED_TURN && USE_GPS
 314:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (gps.fix == GPS_FIX_3D) {
 315:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.ltp_vel_norm = SPEED_BFP_OF_REAL(gps.speed_3d / 100.);
 316:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.ltp_vel_norm_valid = TRUE;
 317:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   } else {
 318:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.ltp_vel_norm_valid = FALSE;
 319:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   }
 320:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
 321:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 322:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #if AHRS_USE_GPS_HEADING && USE_GPS
 323:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //got a 3d fix,ground speed > 0.5 m/s and course accuracy is better than 10deg
 324:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if(gps.fix == GPS_FIX_3D &&
 325:subsystems/ahrs/ahrs_int_cmpl_quat.c ****      gps.gspeed >= 500 &&
 326:subsystems/ahrs/ahrs_int_cmpl_quat.c ****      gps.cacc <= RadOfDeg(10*1e7)) {
 327:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 328:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     // gps.course is in rad * 1e7, we need it in rad * 2^INT32_ANGLE_FRAC
 329:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     int32_t course = gps.course * ((1<<INT32_ANGLE_FRAC) / 1e7);
 330:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 331:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     /* the assumption here is that there is no side-slip, so heading=course */
 332:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 333:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     if (ahrs_impl.heading_aligned) {
 334:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       ahrs_update_heading(course);
 335:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     }
 336:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     else {
 337:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       /* hard reset the heading if this is the first measurement */
 338:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       ahrs_realign_heading(course);
 339:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     }
 340:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   }
 341:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
 342:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 343:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 344:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 345:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_heading(int32_t heading) {
 346:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 347:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_ANGLE_NORMALIZE(heading);
 348:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 349:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // row 0 of ltp_to_body_rmat = body x-axis in ltp frame
 350:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // we only consider x and y
 351:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect2 expected_ltp =
 352:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     { RMAT_ELMT(ahrs.ltp_to_body_rmat, 0, 0),
 353:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       RMAT_ELMT(ahrs.ltp_to_body_rmat, 0, 1) };
 354:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 355:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   int32_t heading_x, heading_y;
 356:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 357:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(heading_y, heading); // measured course in y-direction
 358:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 359:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // expected_heading cross measured_heading ??
 360:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 residual_ltp =
 361:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     { 0,
 362:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       0,
 363:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (expected_ltp.x * heading_y - expected_ltp.y * heading_x)/(1<<INT32_ANGLE_FRAC)};
 364:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 365:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 residual_imu;
 366:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 367:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 368:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // residual FRAC = TRIG_FRAC + TRIG_FRAC = 14 + 14 = 28
 369:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // rate_correction FRAC = RATE_FRAC = 12
 370:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // 2^12 / 2^28 * 4.0 = 1/2^14
 371:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // (1<<INT32_ANGLE_FRAC)/2^14 = 1/4
 372:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/4;
 373:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += residual_imu.y/4;
 374:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += residual_imu.z/4;
 375:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 376:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 377:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* crude attempt to only update bias if deviation is small
 378:subsystems/ahrs/ahrs_int_cmpl_quat.c ****    * e.g. needed when you only have gps providing heading
 379:subsystems/ahrs/ahrs_int_cmpl_quat.c ****    * and the inital heading is totally different from
 380:subsystems/ahrs/ahrs_int_cmpl_quat.c ****    * the gps course information you get once you have a gps fix.
 381:subsystems/ahrs/ahrs_int_cmpl_quat.c ****    * Otherwise the bias will be falsely "corrected".
 382:subsystems/ahrs/ahrs_int_cmpl_quat.c ****    */
 383:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   int32_t sin_max_angle_deviation;
 384:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(sin_max_angle_deviation, TRIG_BFP_OF_REAL(RadOfDeg(5.)));
 385:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ABS(residual_ltp.z) < sin_max_angle_deviation)
 386:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   {
 387:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     // residual_ltp FRAC = 2 * TRIG_FRAC = 28
 388:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     // high_rez_bias = RATE_FRAC+28 = 40
 389:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     // 2^40 / 2^28 * 2.5e-4 = 1
 390:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.p -= residual_imu.x*(1<<INT32_ANGLE_FRAC);
 391:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.q -= residual_imu.y*(1<<INT32_ANGLE_FRAC);
 392:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.r -= residual_imu.z*(1<<INT32_ANGLE_FRAC);
 393:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 394:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 395:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   }
 396:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 397:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 398:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_realign_heading(int32_t heading) {
 399:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 400:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* quaternion representing only the heading rotation from ltp to body */
 401:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Quat q_h_new;
 402:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   q_h_new.qx = 0;
 403:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   q_h_new.qy = 0;
 404:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 405:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 406:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 407:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* quaternion representing current heading only */
 408:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Quat q_h;
 409:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   QUAT_COPY(q_h, ahrs.ltp_to_body_quat);
 410:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   q_h.qx = 0;
 411:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   q_h.qy = 0;
 412:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(q_h);
 413:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 414:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* quaternion representing rotation from current to new heading */
 415:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Quat q_c;
 416:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 417:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 418:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* correct current heading in body frame */
 419:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Quat q;
 420:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ahrs.ltp_to_body_quat);
 421:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   QUAT_COPY(ahrs.ltp_to_body_quat, q);
 422:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 423:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* compute other representations in body frame */
 424:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   compute_body_euler_and_rmat_from_quat();
 425:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 426:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* compute ltp to imu rotations */
 427:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   compute_imu_orientation();
 428:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 429:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.heading_aligned = TRUE;
 430:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 431:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 432:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 433:subsystems/ahrs/ahrs_int_cmpl_quat.c **** /* Compute ltp to imu rotation in euler angles and rotation matrix representation
 434:subsystems/ahrs/ahrs_int_cmpl_quat.c ****    from the quaternion representation */
 435:subsystems/ahrs/ahrs_int_cmpl_quat.c **** __attribute__ ((always_inline)) static inline void compute_imu_euler_and_rmat_from_quat(void) {
 436:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 437:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Compute LTP to IMU euler */
 438:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_QUAT(ahrs.ltp_to_imu_euler, ahrs.ltp_to_imu_quat);
 1060              		.loc 1 438 0
 1061 060c 07FB09F0 		mul	r0, r7, r9
 1062 0610 06FB08F3 		mul	r3, r6, r8
 1063 0614 C013     		asrs	r0, r0, #15
 1064 0616 00EBE330 		add	r0, r0, r3, asr #15
 1065 061a 40F31000 		sbfx	r0, r0, #0, #17
 1066 061e FFF7FEFF 		bl	__aeabi_i2f
 1067 0622 4FF06251 		mov	r1, #947912704
 1068 0626 FFF7FEFF 		bl	__aeabi_fmul
 1069 062a 08FB08FA 		mul	sl, r8, r8
 1070              	.LVL113:
 1071 062e 8346     		mov	fp, r0
 1072              	.LVL114:
 1073 0630 07FB07F0 		mul	r0, r7, r7
 1074 0634 4FEAEA3A 		asr	sl, sl, #15
 1075              	.LVL115:
 1076 0638 0AEBE030 		add	r0, sl, r0, asr #15
 1077 063c 40F31000 		sbfx	r0, r0, #0, #17
 1078 0640 C0F58040 		rsb	r0, r0, #16384
 1079 0644 FFF7FEFF 		bl	__aeabi_i2f
 1080 0648 4FF06251 		mov	r1, #947912704
 1081 064c FFF7FEFF 		bl	__aeabi_fmul
 1082 0650 0146     		mov	r1, r0
 1083 0652 5846     		mov	r0, fp
 1084 0654 FFF7FEFF 		bl	atan2f
 1085 0658 8346     		mov	fp, r0
 1086              	.LVL116:
 1087 065a 08FB09F0 		mul	r0, r8, r9
 1088              	.LVL117:
 1089 065e 06FB07F3 		mul	r3, r6, r7
 1090 0662 C013     		asrs	r0, r0, #15
 1091 0664 C0EBE330 		rsb	r0, r0, r3, asr #15
 1092 0668 40F31000 		sbfx	r0, r0, #0, #17
 1093 066c FFF7FEFF 		bl	__aeabi_i2f
 1094 0670 4FF06251 		mov	r1, #947912704
 1095 0674 FFF7FEFF 		bl	__aeabi_fmul
 1096 0678 FFF7FEFF 		bl	asinf
 1097 067c 06FB09F9 		mul	r9, r6, r9
 1098              	.LVL118:
 1099 0680 08FB07F7 		mul	r7, r8, r7
 1100              	.LVL119:
 1101 0684 4FEAE939 		asr	r9, r9, #15
 1102              	.LVL120:
 1103 0688 0346     		mov	r3, r0
 1104              	.LVL121:
 1105 068a 09EBE730 		add	r0, r9, r7, asr #15
 1106              	.LVL122:
 1107 068e 40F31000 		sbfx	r0, r0, #0, #17
 1108 0692 0093     		str	r3, [sp, #0]
 1109 0694 FFF7FEFF 		bl	__aeabi_i2f
 1110              	.LVL123:
 1111 0698 4FF06251 		mov	r1, #947912704
 1112 069c FFF7FEFF 		bl	__aeabi_fmul
 1113 06a0 7643     		muls	r6, r6, r6
 1114              	.LVL124:
 1115 06a2 0AEBE63A 		add	sl, sl, r6, asr #15
 1116              	.LVL125:
 1117 06a6 0746     		mov	r7, r0
 1118 06a8 4AF31000 		sbfx	r0, sl, #0, #17
 1119 06ac C0F58040 		rsb	r0, r0, #16384
 1120 06b0 FFF7FEFF 		bl	__aeabi_i2f
 1121 06b4 4FF06251 		mov	r1, #947912704
 1122 06b8 FFF7FEFF 		bl	__aeabi_fmul
 1123 06bc 0146     		mov	r1, r0
 1124 06be 3846     		mov	r0, r7
 1125 06c0 FFF7FEFF 		bl	atan2f
 1126 06c4 4FF08B41 		mov	r1, #1166016512
 1127 06c8 0646     		mov	r6, r0
 1128              	.LVL126:
 1129 06ca 5846     		mov	r0, fp
 1130              	.LVL127:
 1131 06cc FFF7FEFF 		bl	__aeabi_fmul
 1132 06d0 FFF7FEFF 		bl	__aeabi_f2iz
 1133 06d4 009B     		ldr	r3, [sp, #0]
 1134 06d6 4FF08B41 		mov	r1, #1166016512
 1135 06da 2061     		str	r0, [r4, #16]
 1136 06dc 03F10040 		add	r0, r3, #-2147483648
 1137 06e0 FFF7FEFF 		bl	__aeabi_fmul
 1138 06e4 FFF7FEFF 		bl	__aeabi_f2iz
 1139 06e8 4FF08B41 		mov	r1, #1166016512
 1140 06ec 6061     		str	r0, [r4, #20]
 1141 06ee 3046     		mov	r0, r6
 1142 06f0 FFF7FEFF 		bl	__aeabi_fmul
 1143 06f4 FFF7FEFF 		bl	__aeabi_f2iz
 1144              	.LBE105:
 1145              	.LBB106:
 439:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Compute LTP to IMU rotation matrix */
 440:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_imu_rmat, ahrs.ltp_to_imu_quat);
 1146              		.loc 1 440 0
 1147 06f8 2768     		ldr	r7, [r4, #0]
 1148 06fa 211D     		adds	r1, r4, #4
 1149 06fc 07FB07FE 		mul	lr, r7, r7
 1150 0700 0EC9     		ldmia	r1, {r1, r2, r3}
 1151              	.LBE106:
 1152              	.LBB107:
 438:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_QUAT(ahrs.ltp_to_imu_euler, ahrs.ltp_to_imu_quat);
 1153              		.loc 1 438 0
 1154 0702 A061     		str	r0, [r4, #24]
 1155              	.LBE107:
 1156              	.LBB108:
 1157              		.loc 1 440 0
 1158 0704 01FB07F0 		mul	r0, r1, r7
 1159 0708 03FB07F8 		mul	r8, r3, r7
 1160 070c 02FB01FA 		mul	sl, r2, r1
 1161 0710 01FB01FB 		mul	fp, r1, r1
 1162              	.LVL128:
 1163 0714 02FB07F6 		mul	r6, r2, r7
 1164              	.LVL129:
 1165 0718 03FB01FC 		mul	ip, r3, r1
 1166 071c 4FEAEE3E 		asr	lr, lr, #15
 1167 0720 AEF5804E 		sub	lr, lr, #16384
 1168              	.LVL130:
 1169 0724 C013     		asrs	r0, r0, #15
 1170 0726 0890     		str	r0, [sp, #32]
 1171              	.LVL131:
 1172 0728 4FEAE838 		asr	r8, r8, #15
 1173 072c 0EEBEB30 		add	r0, lr, fp, asr #15
 1174              	.LVL132:
 1175 0730 03FB02F9 		mul	r9, r3, r2
 1176              	.LVL133:
 1177 0734 4FEAEA3A 		asr	sl, sl, #15
 1178 0738 F613     		asrs	r6, r6, #15
 1179              	.LVL134:
 1180 073a 4FEAEC3C 		asr	ip, ip, #15
 1181 073e 0290     		str	r0, [sp, #8]
 1182 0740 E061     		str	r0, [r4, #28]
 1183 0742 C8EB0A00 		rsb	r0, r8, sl
 1184 0746 02FB02FB 		mul	fp, r2, r2
 1185 074a 0490     		str	r0, [sp, #16]
 1186 074c A062     		str	r0, [r4, #40]
 1187 074e 0CEB0600 		add	r0, ip, r6
 1188 0752 0690     		str	r0, [sp, #24]
 1189 0754 6063     		str	r0, [r4, #52]
 1190 0756 0898     		ldr	r0, [sp, #32]
 1191 0758 4FEAE939 		asr	r9, r9, #15
 1192 075c C0EB0900 		rsb	r0, r0, r9
 1193 0760 0790     		str	r0, [sp, #28]
 1194 0762 A063     		str	r0, [r4, #56]
 1195 0764 0EEBEB30 		add	r0, lr, fp, asr #15
 1196 0768 0990     		str	r0, [sp, #36]
 1197 076a E062     		str	r0, [r4, #44]
 1198 076c 0898     		ldr	r0, [sp, #32]
 1199 076e C6EB0C0C 		rsb	ip, r6, ip
 1200 0772 8144     		add	r9, r9, r0
 1201 0774 03FB03F0 		mul	r0, r3, r3
 1202              	.LBE108:
 1203              	.LBE104:
 1204              	.LBB113:
 1205              	.LBB114:
 441:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 442:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 443:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 444:subsystems/ahrs/ahrs_int_cmpl_quat.c **** /* Compute ltp to body rotation in euler angles and rotation matrix representation
 445:subsystems/ahrs/ahrs_int_cmpl_quat.c ****    from the quaternion representation */
 446:subsystems/ahrs/ahrs_int_cmpl_quat.c **** __attribute__ ((always_inline)) static inline void compute_body_euler_and_rmat_from_quat(void) {
 447:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 448:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Compute LTP to body euler */
 449:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_QUAT(ahrs.ltp_to_body_euler, ahrs.ltp_to_body_quat);
 450:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Compute LTP to body rotation matrix */
 451:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_body_rmat, ahrs.ltp_to_body_quat);
 452:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 453:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 454:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 455:subsystems/ahrs/ahrs_int_cmpl_quat.c **** __attribute__ ((always_inline)) static inline void compute_body_orientation(void) {
 456:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 457:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Compute LTP to BODY quaternion */
 458:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ahrs.ltp_to_body_quat, ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
 1206              		.loc 1 458 0
 1207 0778 6D4E     		ldr	r6, .L45+8
 1208              	.LVL135:
 1209              	.LBE114:
 1210              	.LBE113:
 1211              	.LBB121:
 1212              	.LBB109:
 440:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_imu_rmat, ahrs.ltp_to_imu_quat);
 1213              		.loc 1 440 0
 1214 077a 0EEBE03E 		add	lr, lr, r0, asr #15
 1215              	.LVL136:
 1216              	.LBE109:
 1217              	.LBE121:
 1218              	.LBB122:
 1219              	.LBB117:
 1220              		.loc 1 458 0
 1221 077e D6F88800 		ldr	r0, [r6, #136]
 1222              	.LBE117:
 1223              	.LBE122:
 1224              	.LBB123:
 1225              	.LBB110:
 440:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_imu_rmat, ahrs.ltp_to_imu_quat);
 1226              		.loc 1 440 0
 1227 0782 C244     		add	sl, sl, r8
 1228              	.LBE110:
 1229              	.LBE123:
 1230              	.LBB124:
 1231              	.LBB118:
 1232              		.loc 1 458 0
 1233 0784 00FB01FB 		mul	fp, r0, r1
 1234 0788 D6F88400 		ldr	r0, [r6, #132]
 1235 078c D6F89080 		ldr	r8, [r6, #144]
 1236              	.LVL137:
 1237 0790 00FB07BB 		mla	fp, r0, r7, fp
 1238 0794 D6F88C00 		ldr	r0, [r6, #140]
 1239 0798 CDF82CB0 		str	fp, [sp, #44]
 1240 079c 00FB02FB 		mul	fp, r0, r2
 1241 07a0 08FB03BB 		mla	fp, r8, r3, fp
 1242 07a4 0B98     		ldr	r0, [sp, #44]
 1243              	.LBE118:
 1244              	.LBE124:
 1245              	.LBB125:
 1246              	.LBB111:
 440:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_imu_rmat, ahrs.ltp_to_imu_quat);
 1247              		.loc 1 440 0
 1248 07a6 C4F820A0 		str	sl, [r4, #32]
 1249              	.LBE111:
 1250              	.LBE125:
 1251              	.LBB126:
 1252              	.LBB119:
 1253              		.loc 1 458 0
 1254 07aa 8344     		add	fp, r0, fp
 1255 07ac 4FEAEB3B 		asr	fp, fp, #15
 1256              	.LBE119:
 1257              	.LBE126:
 1258              	.LBB127:
 1259              	.LBB112:
 440:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_imu_rmat, ahrs.ltp_to_imu_quat);
 1260              		.loc 1 440 0
 1261 07b0 C4F824C0 		str	ip, [r4, #36]
 1262 07b4 C4F83090 		str	r9, [r4, #48]
 1263 07b8 C4F83CE0 		str	lr, [r4, #60]
 1264              	.LBE112:
 1265              	.LBE127:
 1266              	.LBB128:
 1267              	.LBB120:
 1268              		.loc 1 458 0
 1269 07bc C4F84CB0 		str	fp, [r4, #76]
 1270 07c0 D6F88400 		ldr	r0, [r6, #132]
 1271 07c4 7F42     		negs	r7, r7
 1272 07c6 00FB01FB 		mul	fp, r0, r1
 1273 07ca D6F88800 		ldr	r0, [r6, #136]
 1274 07ce 00FB07BB 		mla	fp, r0, r7, fp
 1275 07d2 D6F88C00 		ldr	r0, [r6, #140]
 1276 07d6 CDF82CB0 		str	fp, [sp, #44]
 1277 07da 00FB03FB 		mul	fp, r0, r3
 1278 07de 08FB12BB 		mls	fp, r8, r2, fp
 1279 07e2 0B98     		ldr	r0, [sp, #44]
 1280 07e4 8344     		add	fp, r0, fp
 1281 07e6 4FEAEB3B 		asr	fp, fp, #15
 1282 07ea C4F850B0 		str	fp, [r4, #80]
 1283 07ee 08FB01FB 		mul	fp, r8, r1
 1284 07f2 D6F88C00 		ldr	r0, [r6, #140]
 1285 07f6 00FB07BB 		mla	fp, r0, r7, fp
 1286 07fa D6F88400 		ldr	r0, [r6, #132]
 1287 07fe 08FB07F7 		mul	r7, r8, r7
 1288 0802 00FB02BB 		mla	fp, r0, r2, fp
 1289 0806 D6F88800 		ldr	r0, [r6, #136]
 1290 080a 00FB13BB 		mls	fp, r0, r3, fp
 1291 080e D6F88C00 		ldr	r0, [r6, #140]
 1292 0812 4FEAEB3B 		asr	fp, fp, #15
 1293 0816 00FB1177 		mls	r7, r0, r1, r7
 1294 081a D6F88810 		ldr	r1, [r6, #136]
 1295 081e D6F88400 		ldr	r0, [r6, #132]
 1296 0822 4A43     		muls	r2, r1, r2
 1297 0824 00FB0322 		mla	r2, r0, r3, r2
 459:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Compute LTP to BODY rotation matrix */
 460:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_COMP_INV(ahrs.ltp_to_body_rmat, ahrs.ltp_to_imu_rmat, imu.body_to_imu_rmat);
 1298              		.loc 1 460 0
 1299 0828 D6F8A010 		ldr	r1, [r6, #160]
 458:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ahrs.ltp_to_body_quat, ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
 1300              		.loc 1 458 0
 1301 082c BA18     		adds	r2, r7, r2
 1302              		.loc 1 460 0
 1303 082e 049F     		ldr	r7, [sp, #16]
 458:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ahrs.ltp_to_body_quat, ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
 1304              		.loc 1 458 0
 1305 0830 D213     		asrs	r2, r2, #15
 1306              		.loc 1 460 0
 1307 0832 07FB01F0 		mul	r0, r7, r1
 458:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ahrs.ltp_to_body_quat, ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
 1308              		.loc 1 458 0
 1309 0836 A265     		str	r2, [r4, #88]
 1310              		.loc 1 460 0
 1311 0838 029F     		ldr	r7, [sp, #8]
 1312 083a D6F89420 		ldr	r2, [r6, #148]
 1313 083e D6F8AC30 		ldr	r3, [r6, #172]
 1314 0842 07FB0200 		mla	r0, r7, r2, r0
 1315 0846 069F     		ldr	r7, [sp, #24]
 458:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ahrs.ltp_to_body_quat, ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
 1316              		.loc 1 458 0
 1317 0848 C4F854B0 		str	fp, [r4, #84]
 1318              		.loc 1 460 0
 1319 084c 07FB0300 		mla	r0, r7, r3, r0
 1320 0850 8013     		asrs	r0, r0, #14
 1321 0852 0890     		str	r0, [sp, #32]
 1322 0854 A066     		str	r0, [r4, #104]
 1323 0856 0998     		ldr	r0, [sp, #36]
 1324 0858 00FB01F7 		mul	r7, r0, r1
 1325 085c 09FB01F1 		mul	r1, r9, r1
 1326 0860 0CFB0211 		mla	r1, ip, r2, r1
 1327 0864 0AFB0277 		mla	r7, sl, r2, r7
 1328 0868 0798     		ldr	r0, [sp, #28]
 1329 086a 0EFB0311 		mla	r1, lr, r3, r1
 1330 086e 00FB0377 		mla	r7, r0, r3, r7
 1331 0872 4FEAA138 		asr	r8, r1, #14
 1332 0876 0498     		ldr	r0, [sp, #16]
 1333 0878 D6F8A410 		ldr	r1, [r6, #164]
 1334 087c BF13     		asrs	r7, r7, #14
 1335 087e 0A97     		str	r7, [sp, #40]
 1336 0880 E766     		str	r7, [r4, #108]
 1337 0882 00FB01F7 		mul	r7, r0, r1
 1338 0886 D6F89820 		ldr	r2, [r6, #152]
 1339 088a 0298     		ldr	r0, [sp, #8]
 1340 088c D6F8B030 		ldr	r3, [r6, #176]
 1341 0890 00FB0277 		mla	r7, r0, r2, r7
 1342 0894 0698     		ldr	r0, [sp, #24]
 1343 0896 C4F87080 		str	r8, [r4, #112]
 1344 089a 00FB0377 		mla	r7, r0, r3, r7
 1345 089e B813     		asrs	r0, r7, #14
 1346 08a0 6067     		str	r0, [r4, #116]
 1347 08a2 0998     		ldr	r0, [sp, #36]
 1348 08a4 00FB01F7 		mul	r7, r0, r1
 1349 08a8 09FB01F1 		mul	r1, r9, r1
 1350 08ac 0AFB0277 		mla	r7, sl, r2, r7
 1351 08b0 0CFB0211 		mla	r1, ip, r2, r1
 1352 08b4 0798     		ldr	r0, [sp, #28]
 1353 08b6 0EFB0311 		mla	r1, lr, r3, r1
 1354 08ba 00FB0377 		mla	r7, r0, r3, r7
 1355 08be B813     		asrs	r0, r7, #14
 1356 08c0 A067     		str	r0, [r4, #120]
 1357 08c2 049F     		ldr	r7, [sp, #16]
 1358 08c4 8813     		asrs	r0, r1, #14
 1359 08c6 D6F8A810 		ldr	r1, [r6, #168]
 1360 08ca D6F89C20 		ldr	r2, [r6, #156]
 1361 08ce 07FB01FB 		mul	fp, r7, r1
 1362 08d2 029F     		ldr	r7, [sp, #8]
 1363 08d4 D6F8B430 		ldr	r3, [r6, #180]
 1364 08d8 07FB02BB 		mla	fp, r7, r2, fp
 1365 08dc 069F     		ldr	r7, [sp, #24]
 1366 08de 09FB01F9 		mul	r9, r9, r1
 1367 08e2 07FB03BB 		mla	fp, r7, r3, fp
 1368 08e6 099F     		ldr	r7, [sp, #36]
 1369 08e8 4FEAAB3B 		asr	fp, fp, #14
 1370 08ec C4F880B0 		str	fp, [r4, #128]
 1371 08f0 07FB01FB 		mul	fp, r7, r1
 1372 08f4 0CFB029C 		mla	ip, ip, r2, r9
 1373 08f8 0AFB02BA 		mla	sl, sl, r2, fp
 1374 08fc 079F     		ldr	r7, [sp, #28]
 1375 08fe 0EFB03CE 		mla	lr, lr, r3, ip
 1376 0902 07FB03AA 		mla	sl, r7, r3, sl
 1377 0906 4FEAAE39 		asr	r9, lr, #14
 1378 090a 4FEAAA3A 		asr	sl, sl, #14
 1379 090e C4F884A0 		str	sl, [r4, #132]
 1380 0912 C4F88890 		str	r9, [r4, #136]
 1381              	.LVL138:
 1382 0916 E067     		str	r0, [r4, #124]
 1383              	.LBB115:
 461:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* compute LTP to BODY eulers */
 462:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_RMAT(ahrs.ltp_to_body_euler, ahrs.ltp_to_body_rmat);
 1384              		.loc 1 462 0
 1385 0918 FFF7FEFF 		bl	__aeabi_i2f
 1386              	.LVL139:
 1387 091c 4FF06251 		mov	r1, #947912704
 1388 0920 FFF7FEFF 		bl	__aeabi_fmul
 1389 0924 8246     		mov	sl, r0
 1390 0926 05E0     		b	.L46
 1391              	.L47:
 1392              		.align	2
 1393              	.L45:
 1394 0928 00000000 		.word	ahrs
 1395 092c 00000000 		.word	.LANCHOR0
 1396 0930 00000000 		.word	imu
 1397              	.L46:
 1398 0934 4846     		mov	r0, r9
 1399 0936 FFF7FEFF 		bl	__aeabi_i2f
 1400 093a 4FF06251 		mov	r1, #947912704
 1401 093e FFF7FEFF 		bl	__aeabi_fmul
 1402 0942 0146     		mov	r1, r0
 1403 0944 5046     		mov	r0, sl
 1404 0946 FFF7FEFF 		bl	atan2f
 1405 094a 8146     		mov	r9, r0
 1406              	.LVL140:
 1407 094c 4046     		mov	r0, r8
 1408              	.LVL141:
 1409 094e FFF7FEFF 		bl	__aeabi_i2f
 1410 0952 4FF06251 		mov	r1, #947912704
 1411 0956 FFF7FEFF 		bl	__aeabi_fmul
 1412 095a FFF7FEFF 		bl	asinf
 1413 095e 8046     		mov	r8, r0
 1414              	.LVL142:
 1415 0960 0A98     		ldr	r0, [sp, #40]
 1416              	.LVL143:
 1417 0962 FFF7FEFF 		bl	__aeabi_i2f
 1418 0966 4FF06251 		mov	r1, #947912704
 1419 096a FFF7FEFF 		bl	__aeabi_fmul
 1420 096e 0746     		mov	r7, r0
 1421 0970 0898     		ldr	r0, [sp, #32]
 1422 0972 FFF7FEFF 		bl	__aeabi_i2f
 1423 0976 4FF06251 		mov	r1, #947912704
 1424 097a FFF7FEFF 		bl	__aeabi_fmul
 1425 097e 0146     		mov	r1, r0
 1426 0980 3846     		mov	r0, r7
 1427 0982 FFF7FEFF 		bl	atan2f
 1428 0986 4FF08B41 		mov	r1, #1166016512
 1429 098a 0746     		mov	r7, r0
 1430              	.LVL144:
 1431 098c 4846     		mov	r0, r9
 1432              	.LVL145:
 1433 098e FFF7FEFF 		bl	__aeabi_fmul
 1434 0992 FFF7FEFF 		bl	__aeabi_f2iz
 1435 0996 4FF08B41 		mov	r1, #1166016512
 1436 099a E065     		str	r0, [r4, #92]
 1437 099c 08F10040 		add	r0, r8, #-2147483648
 1438 09a0 FFF7FEFF 		bl	__aeabi_fmul
 1439 09a4 FFF7FEFF 		bl	__aeabi_f2iz
 1440 09a8 4FF08B41 		mov	r1, #1166016512
 1441 09ac 2066     		str	r0, [r4, #96]
 1442 09ae 3846     		mov	r0, r7
 1443 09b0 FFF7FEFF 		bl	__aeabi_fmul
 1444 09b4 FFF7FEFF 		bl	__aeabi_f2iz
 1445              	.LBE115:
 463:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* compute body rates */
 464:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_TRANSP_RATEMULT(ahrs.body_rate, imu.body_to_imu_rmat, ahrs.imu_rate);
 1446              		.loc 1 464 0
 1447 09b8 616C     		ldr	r1, [r4, #68]
 1448              	.LBB116:
 462:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_RMAT(ahrs.ltp_to_body_euler, ahrs.ltp_to_body_rmat);
 1449              		.loc 1 462 0
 1450 09ba 6066     		str	r0, [r4, #100]
 1451              	.LBE116:
 1452              		.loc 1 464 0
 1453 09bc D6F8A000 		ldr	r0, [r6, #160]
 1454 09c0 226C     		ldr	r2, [r4, #64]
 1455 09c2 4843     		muls	r0, r1, r0
 1456 09c4 D6F89470 		ldr	r7, [r6, #148]
 1457              	.LVL146:
 1458 09c8 A36C     		ldr	r3, [r4, #72]
 1459 09ca 07FB0200 		mla	r0, r7, r2, r0
 1460 09ce D6F8AC70 		ldr	r7, [r6, #172]
 1461 09d2 07FB0300 		mla	r0, r7, r3, r0
 1462 09d6 8013     		asrs	r0, r0, #14
 1463 09d8 C4F88C00 		str	r0, [r4, #140]
 1464 09dc D6F8A400 		ldr	r0, [r6, #164]
 1465 09e0 D6F89870 		ldr	r7, [r6, #152]
 1466 09e4 4843     		muls	r0, r1, r0
 1467 09e6 07FB0200 		mla	r0, r7, r2, r0
 1468 09ea D6F8B070 		ldr	r7, [r6, #176]
 1469 09ee 07FB0300 		mla	r0, r7, r3, r0
 1470 09f2 D6F8A870 		ldr	r7, [r6, #168]
 1471 09f6 8013     		asrs	r0, r0, #14
 1472 09f8 7943     		muls	r1, r7, r1
 1473 09fa C4F89000 		str	r0, [r4, #144]
 1474 09fe D6F89C00 		ldr	r0, [r6, #156]
 1475 0a02 00FB0212 		mla	r2, r0, r2, r1
 1476 0a06 D6F8B410 		ldr	r1, [r6, #180]
 1477 0a0a 01FB0323 		mla	r3, r1, r3, r2
 1478 0a0e 9B13     		asrs	r3, r3, #14
 1479 0a10 C4F89430 		str	r3, [r4, #148]
 1480              	.LBE120:
 1481              	.LBE128:
 110:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.gyro_bias, ahrs_aligner.lp_gyro);
 1482              		.loc 1 110 0
 1483 0a14 104B     		ldr	r3, .L48
 1484 0a16 1968     		ldr	r1, [r3, #0]
 1485 0a18 5A68     		ldr	r2, [r3, #4]
 111:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.high_rez_bias, ahrs_aligner.lp_gyro);
 1486              		.loc 1 111 0
 1487 0a1a C817     		asrs	r0, r1, #31
 112:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_LSHIFT(ahrs_impl.high_rez_bias, ahrs_impl.high_rez_bias, 28);
 1488              		.loc 1 112 0
 1489 0a1c 0007     		lsls	r0, r0, #28
 1490 0a1e 40EA1110 		orr	r0, r0, r1, lsr #4
 110:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.gyro_bias, ahrs_aligner.lp_gyro);
 1491              		.loc 1 110 0
 1492 0a22 2960     		str	r1, [r5, #0]
 112:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_LSHIFT(ahrs_impl.high_rez_bias, ahrs_impl.high_rez_bias, 28);
 1493              		.loc 1 112 0
 1494 0a24 0907     		lsls	r1, r1, #28
 1495 0a26 A962     		str	r1, [r5, #40]
 111:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.high_rez_bias, ahrs_aligner.lp_gyro);
 1496              		.loc 1 111 0
 1497 0a28 D117     		asrs	r1, r2, #31
 110:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.gyro_bias, ahrs_aligner.lp_gyro);
 1498              		.loc 1 110 0
 1499 0a2a 9B68     		ldr	r3, [r3, #8]
 112:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_LSHIFT(ahrs_impl.high_rez_bias, ahrs_impl.high_rez_bias, 28);
 1500              		.loc 1 112 0
 1501 0a2c 0907     		lsls	r1, r1, #28
 110:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.gyro_bias, ahrs_aligner.lp_gyro);
 1502              		.loc 1 110 0
 1503 0a2e 6A60     		str	r2, [r5, #4]
 112:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_LSHIFT(ahrs_impl.high_rez_bias, ahrs_impl.high_rez_bias, 28);
 1504              		.loc 1 112 0
 1505 0a30 41EA1211 		orr	r1, r1, r2, lsr #4
 1506 0a34 1207     		lsls	r2, r2, #28
 1507 0a36 2A63     		str	r2, [r5, #48]
 111:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.high_rez_bias, ahrs_aligner.lp_gyro);
 1508              		.loc 1 111 0
 1509 0a38 DA17     		asrs	r2, r3, #31
 112:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_LSHIFT(ahrs_impl.high_rez_bias, ahrs_impl.high_rez_bias, 28);
 1510              		.loc 1 112 0
 1511 0a3a 1207     		lsls	r2, r2, #28
 110:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.gyro_bias, ahrs_aligner.lp_gyro);
 1512              		.loc 1 110 0
 1513 0a3c AB60     		str	r3, [r5, #8]
 112:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_LSHIFT(ahrs_impl.high_rez_bias, ahrs_impl.high_rez_bias, 28);
 1514              		.loc 1 112 0
 1515 0a3e E862     		str	r0, [r5, #44]
 1516 0a40 42EA1312 		orr	r2, r2, r3, lsr #4
 114:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs.status = AHRS_RUNNING;
 1517              		.loc 1 114 0
 1518 0a44 0120     		movs	r0, #1
 112:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_LSHIFT(ahrs_impl.high_rez_bias, ahrs_impl.high_rez_bias, 28);
 1519              		.loc 1 112 0
 1520 0a46 1B07     		lsls	r3, r3, #28
 1521 0a48 6963     		str	r1, [r5, #52]
 1522 0a4a EA63     		str	r2, [r5, #60]
 1523 0a4c AB63     		str	r3, [r5, #56]
 114:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs.status = AHRS_RUNNING;
 1524              		.loc 1 114 0
 1525 0a4e 84F89800 		strb	r0, [r4, #152]
 115:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 1526              		.loc 1 115 0
 1527 0a52 0DB0     		add	sp, sp, #52
 1528 0a54 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1529              	.L49:
 1530              		.align	2
 1531              	.L48:
 1532 0a58 00000000 		.word	ahrs_aligner
 1533              		.cfi_endproc
 1534              	.LFE35:
 1536 0a5c AFF30080 		.section	.text.ahrs_propagate,"ax",%progbits
 1537              		.align	1
 1538              		.global	ahrs_propagate
 1539              		.thumb
 1540              		.thumb_func
 1542              	ahrs_propagate:
 1543              	.LFB36:
 124:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_propagate(void) {
 1544              		.loc 1 124 0
 1545              		.cfi_startproc
 1546              		@ args = 0, pretend = 0, frame = 32
 1547              		@ frame_needed = 0, uses_anonymous_args = 0
 1548 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1549              	.LCFI3:
 1550              		.cfi_def_cfa_offset 36
 1551              		.cfi_offset 14, -4
 1552              		.cfi_offset 11, -8
 1553              		.cfi_offset 10, -12
 1554              		.cfi_offset 9, -16
 1555              		.cfi_offset 8, -20
 1556              		.cfi_offset 7, -24
 1557              		.cfi_offset 6, -28
 1558              		.cfi_offset 5, -32
 1559              		.cfi_offset 4, -36
 128:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_DIFF(omega, imu.gyro_prev, ahrs_impl.gyro_bias);
 1560              		.loc 1 128 0
 1561 0004 4949     		ldr	r1, .L56
 1562 0006 4A4C     		ldr	r4, .L56+4
 1563 0008 4A6A     		ldr	r2, [r1, #36]
 1564 000a 2368     		ldr	r3, [r4, #0]
 1565 000c 886A     		ldr	r0, [r1, #40]
 1566 000e D31A     		subs	r3, r2, r3
 1567              	.LVL147:
 1568 0010 6268     		ldr	r2, [r4, #4]
 1569 0012 C96A     		ldr	r1, [r1, #44]
 1570 0014 801A     		subs	r0, r0, r2
 1571              	.LVL148:
 1572 0016 A268     		ldr	r2, [r4, #8]
 136:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY(ahrs.imu_rate, omega);
 1573              		.loc 1 136 0
 1574 0018 464D     		ldr	r5, .L56+8
 128:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_DIFF(omega, imu.gyro_prev, ahrs_impl.gyro_bias);
 1575              		.loc 1 128 0
 1576 001a 8A1A     		subs	r2, r1, r2
 1577              	.LVL149:
 140:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_ADD(omega, ahrs_impl.rate_correction);
 1578              		.loc 1 140 0
 1579 001c E168     		ldr	r1, [r4, #12]
 136:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY(ahrs.imu_rate, omega);
 1580              		.loc 1 136 0
 1581 001e 2B64     		str	r3, [r5, #64]
 140:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_ADD(omega, ahrs_impl.rate_correction);
 1582              		.loc 1 140 0
 1583 0020 5B18     		adds	r3, r3, r1
 1584              	.LVL150:
 1585 0022 2169     		ldr	r1, [r4, #16]
 136:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY(ahrs.imu_rate, omega);
 1586              		.loc 1 136 0
 1587 0024 6864     		str	r0, [r5, #68]
 140:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_ADD(omega, ahrs_impl.rate_correction);
 1588              		.loc 1 140 0
 1589 0026 4018     		adds	r0, r0, r1
 1590              	.LVL151:
 1591 0028 6169     		ldr	r1, [r4, #20]
 1592              	.LBB129:
 145:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INTEGRATE_FI(ahrs.ltp_to_imu_quat, ahrs_impl.high_rez_quat, omega, AHRS_PROPAGATE_FREQ
 1593              		.loc 1 145 0
 1594 002a D5F804E0 		ldr	lr, [r5, #4]
 1595              	.LBE129:
 136:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY(ahrs.imu_rate, omega);
 1596              		.loc 1 136 0
 1597 002e AA64     		str	r2, [r5, #72]
 140:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_ADD(omega, ahrs_impl.rate_correction);
 1598              		.loc 1 140 0
 1599 0030 5218     		adds	r2, r2, r1
 1600              	.LVL152:
 142:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs_impl.rate_correction);
 1601              		.loc 1 142 0
 1602 0032 0021     		movs	r1, #0
 1603 0034 E160     		str	r1, [r4, #12]
 1604 0036 2161     		str	r1, [r4, #16]
 1605 0038 6161     		str	r1, [r4, #20]
 1606              	.LBB130:
 145:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INTEGRATE_FI(ahrs.ltp_to_imu_quat, ahrs_impl.high_rez_quat, omega, AHRS_PROPAGATE_FREQ
 1607              		.loc 1 145 0
 1608 003a 5942     		negs	r1, r3
 1609 003c 0EFB01F1 		mul	r1, lr, r1
 1610 0040 AE68     		ldr	r6, [r5, #8]
 1611 0042 D5F80CC0 		ldr	ip, [r5, #12]
 1612 0046 06FB1011 		mls	r1, r6, r0, r1
 1613 004a 0CFB1211 		mls	r1, ip, r2, r1
 1614 004e A769     		ldr	r7, [r4, #24]
 1615 0050 06FB02F8 		mul	r8, r6, r2
 1616 0054 C919     		adds	r1, r1, r7
 1617 0056 2F68     		ldr	r7, [r5, #0]
 1618 0058 D4F81C90 		ldr	r9, [r4, #28]
 1619 005c 07FB0388 		mla	r8, r7, r3, r8
 1620 0060 0CFB1088 		mls	r8, ip, r0, r8
 1621 0064 C844     		add	r8, r9, r8
 1622 0066 C4F81C80 		str	r8, [r4, #28]
 1623 006a 07FB00F8 		mul	r8, r7, r0
 1624 006e 0EFB00F0 		mul	r0, lr, r0
 1625              	.LVL153:
 1626 0072 0EFB1288 		mls	r8, lr, r2, r8
 1627 0076 07FB0202 		mla	r2, r7, r2, r0
 1628              	.LVL154:
 1629 007a 0CFB038C 		mla	ip, ip, r3, r8
 1630 007e 06FB1323 		mls	r3, r6, r3, r2
 1631              	.LVL155:
 1632 0082 D4F82080 		ldr	r8, [r4, #32]
 1633 0086 666A     		ldr	r6, [r4, #36]
 1634              	.LBE130:
 124:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_propagate(void) {
 1635              		.loc 1 124 0
 1636 0088 89B0     		sub	sp, sp, #36
 1637              	.LCFI4:
 1638              		.cfi_def_cfa_offset 72
 1639              	.LBB131:
 145:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INTEGRATE_FI(ahrs.ltp_to_imu_quat, ahrs_impl.high_rez_quat, omega, AHRS_PROPAGATE_FREQ
 1640              		.loc 1 145 0
 1641 008a C444     		add	ip, r8, ip
 1642 008c F318     		adds	r3, r6, r3
 1643 008e C4F820C0 		str	ip, [r4, #32]
 1644 0092 A161     		str	r1, [r4, #24]
 1645 0094 6362     		str	r3, [r4, #36]
 1646 0096 06A8     		add	r0, sp, #24
 1647 0098 4FF4F022 		mov	r2, #491520
 1648 009c FFF7FEFF 		bl	ldiv
 1649              	.LVL156:
 1650 00a0 2A68     		ldr	r2, [r5, #0]
 1651 00a2 069B     		ldr	r3, [sp, #24]
 1652 00a4 06A8     		add	r0, sp, #24
 1653              	.LVL157:
 1654 00a6 D318     		adds	r3, r2, r3
 1655 00a8 2B60     		str	r3, [r5, #0]
 1656 00aa 079B     		ldr	r3, [sp, #28]
 1657 00ac E169     		ldr	r1, [r4, #28]
 1658 00ae A361     		str	r3, [r4, #24]
 1659 00b0 4FF4F022 		mov	r2, #491520
 1660 00b4 FFF7FEFF 		bl	ldiv
 1661              	.LVL158:
 1662 00b8 6A68     		ldr	r2, [r5, #4]
 1663 00ba 069B     		ldr	r3, [sp, #24]
 1664 00bc 06A8     		add	r0, sp, #24
 1665              	.LVL159:
 1666 00be D318     		adds	r3, r2, r3
 1667 00c0 6B60     		str	r3, [r5, #4]
 1668 00c2 079B     		ldr	r3, [sp, #28]
 1669 00c4 216A     		ldr	r1, [r4, #32]
 1670 00c6 E361     		str	r3, [r4, #28]
 1671 00c8 4FF4F022 		mov	r2, #491520
 1672 00cc FFF7FEFF 		bl	ldiv
 1673              	.LVL160:
 1674 00d0 AA68     		ldr	r2, [r5, #8]
 1675 00d2 069B     		ldr	r3, [sp, #24]
 1676 00d4 06A8     		add	r0, sp, #24
 1677              	.LVL161:
 1678 00d6 D318     		adds	r3, r2, r3
 1679 00d8 AB60     		str	r3, [r5, #8]
 1680 00da 079B     		ldr	r3, [sp, #28]
 1681 00dc 616A     		ldr	r1, [r4, #36]
 1682 00de 2362     		str	r3, [r4, #32]
 1683 00e0 4FF4F022 		mov	r2, #491520
 1684 00e4 FFF7FEFF 		bl	ldiv
 1685              	.LVL162:
 1686              	.LBE131:
 1687              	.LBB132:
 1688              	.LBB133:
 146:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 1689              		.loc 1 146 0
 1690 00e8 95E8C200 		ldmia	r5, {r1, r6, r7}
 1691              	.LBE133:
 1692              	.LBE132:
 1693              	.LBB138:
 145:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INTEGRATE_FI(ahrs.ltp_to_imu_quat, ahrs_impl.high_rez_quat, omega, AHRS_PROPAGATE_FREQ
 1694              		.loc 1 145 0
 1695 00ec 069B     		ldr	r3, [sp, #24]
 1696 00ee EA68     		ldr	r2, [r5, #12]
 1697              	.LBE138:
 1698              	.LBB139:
 1699              	.LBB135:
 146:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 1700              		.loc 1 146 0
 1701 00f0 06FB06F0 		mul	r0, r6, r6
 1702              	.LBE135:
 1703              	.LBE139:
 1704              	.LBB140:
 145:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INTEGRATE_FI(ahrs.ltp_to_imu_quat, ahrs_impl.high_rez_quat, omega, AHRS_PROPAGATE_FREQ
 1705              		.loc 1 145 0
 1706 00f4 D218     		adds	r2, r2, r3
 1707 00f6 079B     		ldr	r3, [sp, #28]
 1708              	.LBE140:
 1709              	.LBB141:
 1710              	.LBB136:
 146:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 1711              		.loc 1 146 0
 1712 00f8 01FB0100 		mla	r0, r1, r1, r0
 1713              	.LBE136:
 1714              	.LBE141:
 1715              	.LBB142:
 145:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INTEGRATE_FI(ahrs.ltp_to_imu_quat, ahrs_impl.high_rez_quat, omega, AHRS_PROPAGATE_FREQ
 1716              		.loc 1 145 0
 1717 00fc 6362     		str	r3, [r4, #36]
 1718              	.LBE142:
 1719              	.LBB143:
 1720              	.LBB137:
 146:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 1721              		.loc 1 146 0
 1722 00fe 07FB07F3 		mul	r3, r7, r7
 1723 0102 02FB0233 		mla	r3, r2, r2, r3
 1724              	.LVL163:
 1725 0106 C018     		adds	r0, r0, r3
 1726              	.LVL164:
 1727 0108 16D0     		beq	.L54
 1728              	.LVL165:
 1729              	.LBB134:
 146:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 1730              		.loc 1 146 0 is_stmt 0 discriminator 2
 1731 010a 0346     		mov	r3, r0
 1732 010c 2824     		movs	r4, #40
 1733 010e 00E0     		b	.L53
 1734              	.LVL166:
 1735              	.L55:
 146:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 1736              		.loc 1 146 0
 1737 0110 2B46     		mov	r3, r5
 1738              	.LVL167:
 1739              	.L53:
 146:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 1740              		.loc 1 146 0 discriminator 3
 1741 0112 B0FBF3F5 		udiv	r5, r0, r3
 1742              	.LVL168:
 1743 0116 ED18     		adds	r5, r5, r3
 1744              	.LVL169:
 1745 0118 6D08     		lsrs	r5, r5, #1
 1746              	.LVL170:
 1747 011a 5B1B     		subs	r3, r3, r5
 1748              	.LVL171:
 1749 011c 012B     		cmp	r3, #1
 1750 011e 0CD9     		bls	.L51
 146:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 1751              		.loc 1 146 0 discriminator 4
 1752 0120 013C     		subs	r4, r4, #1
 1753 0122 E4B2     		uxtb	r4, r4
 1754 0124 002C     		cmp	r4, #0
 1755 0126 F3D1     		bne	.L55
 1756 0128 07E0     		b	.L51
 1757              	.L57:
 1758 012a 00BF     		.align	2
 1759              	.L56:
 1760 012c 00000000 		.word	imu
 1761 0130 00000000 		.word	.LANCHOR0
 1762 0134 00000000 		.word	ahrs
 1763              	.LVL172:
 1764              	.L54:
 1765              	.LBE134:
 146:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 1766              		.loc 1 146 0
 1767 0138 0546     		mov	r5, r0
 1768              	.L51:
 1769              	.LVL173:
 1770              	.LBE137:
 146:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 1771              		.loc 1 146 0 discriminator 6
 1772 013a 4FEAC138 		lsl	r8, r1, #15
 1773 013e F603     		lsls	r6, r6, #15
 1774 0140 D203     		lsls	r2, r2, #15
 1775 0142 96FBF5F6 		sdiv	r6, r6, r5
 1776 0146 98FBF5F8 		sdiv	r8, r8, r5
 1777 014a FF03     		lsls	r7, r7, #15
 1778 014c 97FBF5F7 		sdiv	r7, r7, r5
 1779              	.LBE143:
 1780              	.LBB144:
 1781              	.LBB145:
 438:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_QUAT(ahrs.ltp_to_imu_euler, ahrs.ltp_to_imu_quat);
 1782              		.loc 1 438 0 is_stmt 1 discriminator 6
 1783 0150 06FB08F0 		mul	r0, r6, r8
 1784              	.LVL174:
 1785              	.LBE145:
 1786              	.LBE144:
 1787              	.LBB157:
 146:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 1788              		.loc 1 146 0 discriminator 6
 1789 0154 92FBF5F5 		sdiv	r5, r2, r5
 1790              	.LVL175:
 1791              	.LBE157:
 1792              	.LBB158:
 1793              	.LBB146:
 438:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_QUAT(ahrs.ltp_to_imu_euler, ahrs.ltp_to_imu_quat);
 1794              		.loc 1 438 0 discriminator 6
 1795 0158 05FB07F3 		mul	r3, r5, r7
 1796              	.LBE146:
 1797              	.LBE158:
 1798              	.LBB159:
 146:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 1799              		.loc 1 146 0 discriminator 6
 1800 015c DA4C     		ldr	r4, .L58
 1801              	.LBE159:
 1802              	.LBB160:
 1803              	.LBB147:
 438:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_QUAT(ahrs.ltp_to_imu_euler, ahrs.ltp_to_imu_quat);
 1804              		.loc 1 438 0 discriminator 6
 1805 015e C013     		asrs	r0, r0, #15
 1806 0160 00EBE330 		add	r0, r0, r3, asr #15
 1807              	.LBE147:
 1808              	.LBE160:
 1809              	.LBB161:
 146:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 1810              		.loc 1 146 0 discriminator 6
 1811 0164 C4F80080 		str	r8, [r4, #0]
 1812 0168 6660     		str	r6, [r4, #4]
 1813 016a A760     		str	r7, [r4, #8]
 1814 016c E560     		str	r5, [r4, #12]
 1815              	.LVL176:
 1816              	.LBE161:
 1817              	.LBB162:
 1818              	.LBB148:
 438:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_QUAT(ahrs.ltp_to_imu_euler, ahrs.ltp_to_imu_quat);
 1819              		.loc 1 438 0 discriminator 6
 1820 016e 40F31000 		sbfx	r0, r0, #0, #17
 1821 0172 FFF7FEFF 		bl	__aeabi_i2f
 1822 0176 4FF06251 		mov	r1, #947912704
 1823 017a FFF7FEFF 		bl	__aeabi_fmul
 1824 017e 07FB07F9 		mul	r9, r7, r7
 1825 0182 8246     		mov	sl, r0
 1826 0184 06FB06F0 		mul	r0, r6, r6
 1827 0188 4FEAE939 		asr	r9, r9, #15
 1828              	.LVL177:
 1829 018c 09EBE030 		add	r0, r9, r0, asr #15
 1830 0190 40F31000 		sbfx	r0, r0, #0, #17
 1831 0194 C0F58040 		rsb	r0, r0, #16384
 1832 0198 FFF7FEFF 		bl	__aeabi_i2f
 1833 019c 4FF06251 		mov	r1, #947912704
 1834 01a0 FFF7FEFF 		bl	__aeabi_fmul
 1835 01a4 0146     		mov	r1, r0
 1836 01a6 5046     		mov	r0, sl
 1837 01a8 FFF7FEFF 		bl	atan2f
 1838 01ac 8346     		mov	fp, r0
 1839              	.LVL178:
 1840 01ae 07FB08F0 		mul	r0, r7, r8
 1841              	.LVL179:
 1842 01b2 05FB06F3 		mul	r3, r5, r6
 1843 01b6 C013     		asrs	r0, r0, #15
 1844 01b8 C0EBE330 		rsb	r0, r0, r3, asr #15
 1845 01bc 40F31000 		sbfx	r0, r0, #0, #17
 1846 01c0 FFF7FEFF 		bl	__aeabi_i2f
 1847 01c4 4FF06251 		mov	r1, #947912704
 1848 01c8 FFF7FEFF 		bl	__aeabi_fmul
 1849 01cc FFF7FEFF 		bl	asinf
 1850 01d0 05FB08F8 		mul	r8, r5, r8
 1851              	.LVL180:
 1852 01d4 7E43     		muls	r6, r7, r6
 1853              	.LVL181:
 1854 01d6 4FEAE838 		asr	r8, r8, #15
 1855              	.LVL182:
 1856 01da 8246     		mov	sl, r0
 1857              	.LVL183:
 1858 01dc 08EBE630 		add	r0, r8, r6, asr #15
 1859              	.LVL184:
 1860 01e0 40F31000 		sbfx	r0, r0, #0, #17
 1861 01e4 FFF7FEFF 		bl	__aeabi_i2f
 1862 01e8 4FF06251 		mov	r1, #947912704
 1863 01ec FFF7FEFF 		bl	__aeabi_fmul
 1864 01f0 6D43     		muls	r5, r5, r5
 1865              	.LVL185:
 1866 01f2 09EBE539 		add	r9, r9, r5, asr #15
 1867              	.LVL186:
 1868 01f6 0646     		mov	r6, r0
 1869 01f8 49F31000 		sbfx	r0, r9, #0, #17
 1870 01fc C0F58040 		rsb	r0, r0, #16384
 1871 0200 FFF7FEFF 		bl	__aeabi_i2f
 1872 0204 4FF06251 		mov	r1, #947912704
 1873 0208 FFF7FEFF 		bl	__aeabi_fmul
 1874 020c 0146     		mov	r1, r0
 1875 020e 3046     		mov	r0, r6
 1876 0210 FFF7FEFF 		bl	atan2f
 1877 0214 4FF08B41 		mov	r1, #1166016512
 1878 0218 0546     		mov	r5, r0
 1879              	.LVL187:
 1880 021a 5846     		mov	r0, fp
 1881              	.LVL188:
 1882 021c FFF7FEFF 		bl	__aeabi_fmul
 1883 0220 FFF7FEFF 		bl	__aeabi_f2iz
 1884 0224 4FF08B41 		mov	r1, #1166016512
 1885 0228 2061     		str	r0, [r4, #16]
 1886 022a 0AF10040 		add	r0, sl, #-2147483648
 1887 022e FFF7FEFF 		bl	__aeabi_fmul
 1888 0232 FFF7FEFF 		bl	__aeabi_f2iz
 1889 0236 4FF08B41 		mov	r1, #1166016512
 1890 023a 6061     		str	r0, [r4, #20]
 1891 023c 2846     		mov	r0, r5
 1892 023e FFF7FEFF 		bl	__aeabi_fmul
 1893 0242 FFF7FEFF 		bl	__aeabi_f2iz
 1894              	.LBE148:
 1895              	.LBB149:
 440:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_imu_rmat, ahrs.ltp_to_imu_quat);
 1896              		.loc 1 440 0 discriminator 6
 1897 0246 2668     		ldr	r6, [r4, #0]
 1898 0248 211D     		adds	r1, r4, #4
 1899 024a 06FB06FE 		mul	lr, r6, r6
 1900 024e 0EC9     		ldmia	r1, {r1, r2, r3}
 1901              	.LBE149:
 1902              	.LBB150:
 438:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_QUAT(ahrs.ltp_to_imu_euler, ahrs.ltp_to_imu_quat);
 1903              		.loc 1 438 0 discriminator 6
 1904 0250 A061     		str	r0, [r4, #24]
 1905              	.LBE150:
 1906              	.LBB151:
 440:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_imu_rmat, ahrs.ltp_to_imu_quat);
 1907              		.loc 1 440 0 discriminator 6
 1908 0252 01FB06F0 		mul	r0, r1, r6
 1909 0256 02FB06F5 		mul	r5, r2, r6
 1910              	.LVL189:
 1911 025a 03FB01FC 		mul	ip, r3, r1
 1912 025e 01FB01FB 		mul	fp, r1, r1
 1913              	.LVL190:
 1914 0262 4FEAEE3E 		asr	lr, lr, #15
 1915 0266 AEF5804E 		sub	lr, lr, #16384
 1916              	.LVL191:
 1917 026a C013     		asrs	r0, r0, #15
 1918 026c 03FB02F9 		mul	r9, r3, r2
 1919 0270 0590     		str	r0, [sp, #20]
 1920              	.LVL192:
 1921 0272 ED13     		asrs	r5, r5, #15
 1922              	.LVL193:
 1923 0274 0EEBEB30 		add	r0, lr, fp, asr #15
 1924              	.LVL194:
 1925 0278 4FEAEC3C 		asr	ip, ip, #15
 1926 027c 02FB02F8 		mul	r8, r2, r2
 1927              	.LVL195:
 1928 0280 0190     		str	r0, [sp, #4]
 1929 0282 E061     		str	r0, [r4, #28]
 1930 0284 0CEB0500 		add	r0, ip, r5
 1931 0288 0290     		str	r0, [sp, #8]
 1932 028a 6063     		str	r0, [r4, #52]
 1933 028c 0598     		ldr	r0, [sp, #20]
 1934 028e 4FEAE939 		asr	r9, r9, #15
 1935 0292 C0EB0900 		rsb	r0, r0, r9
 1936 0296 0390     		str	r0, [sp, #12]
 1937 0298 A063     		str	r0, [r4, #56]
 1938 029a 0EEBE830 		add	r0, lr, r8, asr #15
 1939 029e 0490     		str	r0, [sp, #16]
 1940 02a0 E062     		str	r0, [r4, #44]
 1941 02a2 0598     		ldr	r0, [sp, #20]
 1942 02a4 C5EB0C0C 		rsb	ip, r5, ip
 1943 02a8 8144     		add	r9, r9, r0
 1944 02aa 03FB03F0 		mul	r0, r3, r3
 1945              	.LBE151:
 1946              	.LBE162:
 1947              	.LBB163:
 1948              	.LBB164:
 458:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ahrs.ltp_to_body_quat, ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
 1949              		.loc 1 458 0 discriminator 6
 1950 02ae 874D     		ldr	r5, .L58+4
 1951              	.LVL196:
 1952              	.LBE164:
 1953              	.LBE163:
 1954              	.LBB172:
 1955              	.LBB152:
 440:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_imu_rmat, ahrs.ltp_to_imu_quat);
 1956              		.loc 1 440 0 discriminator 6
 1957 02b0 0EEBE03E 		add	lr, lr, r0, asr #15
 1958              	.LVL197:
 1959              	.LBE152:
 1960              	.LBE172:
 1961              	.LBB173:
 1962              	.LBB167:
 458:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ahrs.ltp_to_body_quat, ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
 1963              		.loc 1 458 0 discriminator 6
 1964 02b4 D5F88800 		ldr	r0, [r5, #136]
 1965              	.LBE167:
 1966              	.LBE173:
 1967              	.LBB174:
 1968              	.LBB153:
 440:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_imu_rmat, ahrs.ltp_to_imu_quat);
 1969              		.loc 1 440 0 discriminator 6
 1970 02b8 03FB06F7 		mul	r7, r3, r6
 1971              	.LVL198:
 1972              	.LBE153:
 1973              	.LBE174:
 1974              	.LBB175:
 1975              	.LBB168:
 458:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ahrs.ltp_to_body_quat, ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
 1976              		.loc 1 458 0 discriminator 6
 1977 02bc 00FB01F8 		mul	r8, r0, r1
 1978 02c0 D5F88400 		ldr	r0, [r5, #132]
 1979              	.LBE168:
 1980              	.LBE175:
 1981              	.LBB176:
 1982              	.LBB154:
 440:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_imu_rmat, ahrs.ltp_to_imu_quat);
 1983              		.loc 1 440 0 discriminator 6
 1984 02c4 02FB01FA 		mul	sl, r2, r1
 1985              	.LVL199:
 1986              	.LBE154:
 1987              	.LBE176:
 1988              	.LBB177:
 1989              	.LBB169:
 458:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ahrs.ltp_to_body_quat, ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
 1990              		.loc 1 458 0 discriminator 6
 1991 02c8 00FB0688 		mla	r8, r0, r6, r8
 1992 02cc D5F88C00 		ldr	r0, [r5, #140]
 1993 02d0 CDF81480 		str	r8, [sp, #20]
 1994 02d4 00FB02F8 		mul	r8, r0, r2
 1995              	.LBE169:
 1996              	.LBE177:
 1997              	.LBB178:
 1998              	.LBB155:
 440:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_imu_rmat, ahrs.ltp_to_imu_quat);
 1999              		.loc 1 440 0 discriminator 6
 2000 02d8 FF13     		asrs	r7, r7, #15
 2001              	.LVL200:
 2002 02da 4FEAEA3A 		asr	sl, sl, #15
 2003 02de C7EB0A0B 		rsb	fp, r7, sl
 2004 02e2 BA44     		add	sl, sl, r7
 2005              	.LBE155:
 2006              	.LBE178:
 2007              	.LBB179:
 2008              	.LBB170:
 458:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ahrs.ltp_to_body_quat, ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
 2009              		.loc 1 458 0 discriminator 6
 2010 02e4 D5F89070 		ldr	r7, [r5, #144]
 2011              	.LVL201:
 2012 02e8 0598     		ldr	r0, [sp, #20]
 2013 02ea 07FB0388 		mla	r8, r7, r3, r8
 2014 02ee 8044     		add	r8, r0, r8
 2015 02f0 4FEAE838 		asr	r8, r8, #15
 2016              	.LBE170:
 2017              	.LBE179:
 2018              	.LBB180:
 2019              	.LBB156:
 440:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_imu_rmat, ahrs.ltp_to_imu_quat);
 2020              		.loc 1 440 0 discriminator 6
 2021 02f4 C4F828B0 		str	fp, [r4, #40]
 2022 02f8 C4F820A0 		str	sl, [r4, #32]
 2023 02fc C4F824C0 		str	ip, [r4, #36]
 2024 0300 C4F83090 		str	r9, [r4, #48]
 2025 0304 C4F83CE0 		str	lr, [r4, #60]
 2026              	.LBE156:
 2027              	.LBE180:
 2028              	.LBB181:
 2029              	.LBB171:
 458:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ahrs.ltp_to_body_quat, ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
 2030              		.loc 1 458 0 discriminator 6
 2031 0308 C4F84C80 		str	r8, [r4, #76]
 2032 030c D5F88400 		ldr	r0, [r5, #132]
 2033 0310 7642     		negs	r6, r6
 2034 0312 00FB01F8 		mul	r8, r0, r1
 2035 0316 D5F88800 		ldr	r0, [r5, #136]
 2036 031a 00FB0688 		mla	r8, r0, r6, r8
 2037 031e D5F88C00 		ldr	r0, [r5, #140]
 2038 0322 CDF81480 		str	r8, [sp, #20]
 2039 0326 00FB03F8 		mul	r8, r0, r3
 2040 032a 07FB1288 		mls	r8, r7, r2, r8
 2041 032e 0598     		ldr	r0, [sp, #20]
 2042 0330 8044     		add	r8, r0, r8
 2043 0332 4FEAE838 		asr	r8, r8, #15
 2044 0336 C4F85080 		str	r8, [r4, #80]
 2045 033a 07FB01F8 		mul	r8, r7, r1
 2046 033e D5F88C00 		ldr	r0, [r5, #140]
 2047 0342 00FB0688 		mla	r8, r0, r6, r8
 2048 0346 D5F88400 		ldr	r0, [r5, #132]
 2049 034a 7E43     		muls	r6, r7, r6
 2050 034c 00FB0288 		mla	r8, r0, r2, r8
 2051 0350 D5F88800 		ldr	r0, [r5, #136]
 2052 0354 00FB1388 		mls	r8, r0, r3, r8
 2053 0358 D5F88C00 		ldr	r0, [r5, #140]
 2054 035c 4FEAE838 		asr	r8, r8, #15
 2055 0360 00FB1166 		mls	r6, r0, r1, r6
 2056 0364 D5F88810 		ldr	r1, [r5, #136]
 2057 0368 D5F88400 		ldr	r0, [r5, #132]
 2058 036c 4A43     		muls	r2, r1, r2
 2059 036e 00FB0322 		mla	r2, r0, r3, r2
 460:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_COMP_INV(ahrs.ltp_to_body_rmat, ahrs.ltp_to_imu_rmat, imu.body_to_imu_rmat);
 2060              		.loc 1 460 0 discriminator 6
 2061 0372 D5F8A010 		ldr	r1, [r5, #160]
 458:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ahrs.ltp_to_body_quat, ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
 2062              		.loc 1 458 0 discriminator 6
 2063 0376 B618     		adds	r6, r6, r2
 2064 0378 F613     		asrs	r6, r6, #15
 2065 037a A665     		str	r6, [r4, #88]
 460:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_COMP_INV(ahrs.ltp_to_body_rmat, ahrs.ltp_to_imu_rmat, imu.body_to_imu_rmat);
 2066              		.loc 1 460 0 discriminator 6
 2067 037c 0BFB01F6 		mul	r6, fp, r1
 2068 0380 D5F89420 		ldr	r2, [r5, #148]
 2069 0384 0198     		ldr	r0, [sp, #4]
 2070 0386 D5F8AC30 		ldr	r3, [r5, #172]
 2071 038a 00FB0266 		mla	r6, r0, r2, r6
 2072 038e 0298     		ldr	r0, [sp, #8]
 458:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ahrs.ltp_to_body_quat, ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
 2073              		.loc 1 458 0 discriminator 6
 2074 0390 C4F85480 		str	r8, [r4, #84]
 460:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_COMP_INV(ahrs.ltp_to_body_rmat, ahrs.ltp_to_imu_rmat, imu.body_to_imu_rmat);
 2075              		.loc 1 460 0 discriminator 6
 2076 0394 00FB0366 		mla	r6, r0, r3, r6
 2077 0398 B613     		asrs	r6, r6, #14
 2078 039a 0596     		str	r6, [sp, #20]
 2079 039c A666     		str	r6, [r4, #104]
 2080 039e 049E     		ldr	r6, [sp, #16]
 2081 03a0 0398     		ldr	r0, [sp, #12]
 2082 03a2 06FB01F7 		mul	r7, r6, r1
 2083 03a6 09FB01F1 		mul	r1, r9, r1
 2084 03aa 0CFB0211 		mla	r1, ip, r2, r1
 2085 03ae 0EFB0311 		mla	r1, lr, r3, r1
 2086 03b2 0AFB0277 		mla	r7, sl, r2, r7
 2087 03b6 4FEAA138 		asr	r8, r1, #14
 2088 03ba D5F8A410 		ldr	r1, [r5, #164]
 2089 03be D5F89820 		ldr	r2, [r5, #152]
 2090 03c2 0BFB01F6 		mul	r6, fp, r1
 2091 03c6 00FB0377 		mla	r7, r0, r3, r7
 2092 03ca 0198     		ldr	r0, [sp, #4]
 2093 03cc D5F8B030 		ldr	r3, [r5, #176]
 2094 03d0 00FB0266 		mla	r6, r0, r2, r6
 2095 03d4 0298     		ldr	r0, [sp, #8]
 2096 03d6 BF13     		asrs	r7, r7, #14
 2097 03d8 00FB0366 		mla	r6, r0, r3, r6
 2098 03dc B013     		asrs	r0, r6, #14
 2099 03de 6067     		str	r0, [r4, #116]
 2100 03e0 0498     		ldr	r0, [sp, #16]
 2101 03e2 E766     		str	r7, [r4, #108]
 2102 03e4 00FB01F6 		mul	r6, r0, r1
 2103 03e8 09FB01F1 		mul	r1, r9, r1
 2104 03ec 0AFB0266 		mla	r6, sl, r2, r6
 2105 03f0 0CFB0211 		mla	r1, ip, r2, r1
 2106 03f4 0398     		ldr	r0, [sp, #12]
 2107 03f6 0EFB0311 		mla	r1, lr, r3, r1
 2108 03fa 00FB0366 		mla	r6, r0, r3, r6
 2109 03fe B013     		asrs	r0, r6, #14
 2110 0400 C4F87080 		str	r8, [r4, #112]
 2111 0404 A067     		str	r0, [r4, #120]
 2112 0406 8813     		asrs	r0, r1, #14
 2113 0408 D5F8A810 		ldr	r1, [r5, #168]
 2114 040c D5F89C20 		ldr	r2, [r5, #156]
 2115 0410 0BFB01FB 		mul	fp, fp, r1
 2116 0414 019E     		ldr	r6, [sp, #4]
 2117 0416 D5F8B430 		ldr	r3, [r5, #180]
 2118 041a 06FB02BB 		mla	fp, r6, r2, fp
 2119 041e 029E     		ldr	r6, [sp, #8]
 2120 0420 09FB01F9 		mul	r9, r9, r1
 2121 0424 06FB03BB 		mla	fp, r6, r3, fp
 2122 0428 049E     		ldr	r6, [sp, #16]
 2123 042a 4FEAAB3B 		asr	fp, fp, #14
 2124 042e C4F880B0 		str	fp, [r4, #128]
 2125 0432 06FB01FB 		mul	fp, r6, r1
 2126 0436 0CFB029C 		mla	ip, ip, r2, r9
 2127 043a 0AFB02BA 		mla	sl, sl, r2, fp
 2128 043e 039E     		ldr	r6, [sp, #12]
 2129 0440 0EFB03CE 		mla	lr, lr, r3, ip
 2130 0444 06FB03AA 		mla	sl, r6, r3, sl
 2131 0448 4FEAAE39 		asr	r9, lr, #14
 2132 044c 4FEAAA3A 		asr	sl, sl, #14
 2133 0450 C4F884A0 		str	sl, [r4, #132]
 2134 0454 C4F88890 		str	r9, [r4, #136]
 2135              	.LVL202:
 2136 0458 E067     		str	r0, [r4, #124]
 2137              	.LBB165:
 462:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_RMAT(ahrs.ltp_to_body_euler, ahrs.ltp_to_body_rmat);
 2138              		.loc 1 462 0 discriminator 6
 2139 045a FFF7FEFF 		bl	__aeabi_i2f
 2140              	.LVL203:
 2141 045e 4FF06251 		mov	r1, #947912704
 2142 0462 FFF7FEFF 		bl	__aeabi_fmul
 2143 0466 8246     		mov	sl, r0
 2144 0468 4846     		mov	r0, r9
 2145 046a FFF7FEFF 		bl	__aeabi_i2f
 2146 046e 4FF06251 		mov	r1, #947912704
 2147 0472 FFF7FEFF 		bl	__aeabi_fmul
 2148 0476 0146     		mov	r1, r0
 2149 0478 5046     		mov	r0, sl
 2150 047a FFF7FEFF 		bl	atan2f
 2151 047e 8146     		mov	r9, r0
 2152              	.LVL204:
 2153 0480 4046     		mov	r0, r8
 2154              	.LVL205:
 2155 0482 FFF7FEFF 		bl	__aeabi_i2f
 2156 0486 4FF06251 		mov	r1, #947912704
 2157 048a FFF7FEFF 		bl	__aeabi_fmul
 2158 048e FFF7FEFF 		bl	asinf
 2159 0492 8046     		mov	r8, r0
 2160              	.LVL206:
 2161 0494 3846     		mov	r0, r7
 2162              	.LVL207:
 2163 0496 FFF7FEFF 		bl	__aeabi_i2f
 2164 049a 4FF06251 		mov	r1, #947912704
 2165 049e FFF7FEFF 		bl	__aeabi_fmul
 2166 04a2 0746     		mov	r7, r0
 2167              	.LVL208:
 2168 04a4 0598     		ldr	r0, [sp, #20]
 2169 04a6 FFF7FEFF 		bl	__aeabi_i2f
 2170 04aa 4FF06251 		mov	r1, #947912704
 2171 04ae FFF7FEFF 		bl	__aeabi_fmul
 2172 04b2 0146     		mov	r1, r0
 2173 04b4 3846     		mov	r0, r7
 2174 04b6 FFF7FEFF 		bl	atan2f
 2175 04ba 4FF08B41 		mov	r1, #1166016512
 2176 04be 0646     		mov	r6, r0
 2177              	.LVL209:
 2178 04c0 4846     		mov	r0, r9
 2179              	.LVL210:
 2180 04c2 FFF7FEFF 		bl	__aeabi_fmul
 2181 04c6 03E0     		b	.L59
 2182              	.L60:
 2183              		.align	2
 2184              	.L58:
 2185 04c8 00000000 		.word	ahrs
 2186 04cc 00000000 		.word	imu
 2187              	.L59:
 2188 04d0 FFF7FEFF 		bl	__aeabi_f2iz
 2189 04d4 4FF08B41 		mov	r1, #1166016512
 2190 04d8 E065     		str	r0, [r4, #92]
 2191 04da 08F10040 		add	r0, r8, #-2147483648
 2192 04de FFF7FEFF 		bl	__aeabi_fmul
 2193 04e2 FFF7FEFF 		bl	__aeabi_f2iz
 2194 04e6 4FF08B41 		mov	r1, #1166016512
 2195 04ea 2066     		str	r0, [r4, #96]
 2196 04ec 3046     		mov	r0, r6
 2197 04ee FFF7FEFF 		bl	__aeabi_fmul
 2198 04f2 FFF7FEFF 		bl	__aeabi_f2iz
 2199              	.LBE165:
 2200              		.loc 1 464 0 discriminator 6
 2201 04f6 616C     		ldr	r1, [r4, #68]
 2202              	.LBB166:
 462:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_RMAT(ahrs.ltp_to_body_euler, ahrs.ltp_to_body_rmat);
 2203              		.loc 1 462 0 discriminator 6
 2204 04f8 6066     		str	r0, [r4, #100]
 2205              	.LBE166:
 2206              		.loc 1 464 0 discriminator 6
 2207 04fa D5F8A000 		ldr	r0, [r5, #160]
 2208 04fe 226C     		ldr	r2, [r4, #64]
 2209 0500 4843     		muls	r0, r1, r0
 2210 0502 D5F89460 		ldr	r6, [r5, #148]
 2211              	.LVL211:
 2212 0506 A36C     		ldr	r3, [r4, #72]
 2213 0508 06FB0200 		mla	r0, r6, r2, r0
 2214 050c D5F8AC60 		ldr	r6, [r5, #172]
 2215 0510 06FB0300 		mla	r0, r6, r3, r0
 2216 0514 8013     		asrs	r0, r0, #14
 2217 0516 C4F88C00 		str	r0, [r4, #140]
 2218 051a D5F8A400 		ldr	r0, [r5, #164]
 2219 051e D5F89860 		ldr	r6, [r5, #152]
 2220 0522 4843     		muls	r0, r1, r0
 2221 0524 06FB0200 		mla	r0, r6, r2, r0
 2222 0528 D5F8B060 		ldr	r6, [r5, #176]
 2223 052c 06FB0300 		mla	r0, r6, r3, r0
 2224 0530 D5F8A860 		ldr	r6, [r5, #168]
 2225 0534 8013     		asrs	r0, r0, #14
 2226 0536 7143     		muls	r1, r6, r1
 2227 0538 C4F89000 		str	r0, [r4, #144]
 2228 053c D5F89C00 		ldr	r0, [r5, #156]
 2229 0540 00FB0212 		mla	r2, r0, r2, r1
 2230 0544 D5F8B410 		ldr	r1, [r5, #180]
 2231 0548 01FB0323 		mla	r3, r1, r3, r2
 2232 054c 9B13     		asrs	r3, r3, #14
 2233 054e C4F89430 		str	r3, [r4, #148]
 2234              	.LBE171:
 2235              	.LBE181:
 152:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 2236              		.loc 1 152 0 discriminator 6
 2237 0552 09B0     		add	sp, sp, #36
 2238 0554 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 2239              		.cfi_endproc
 2240              	.LFE36:
 2242              		.global	__aeabi_i2d
 2243              		.global	__aeabi_d2iz
 2244              		.section	.text.ahrs_update_accel,"ax",%progbits
 2245              		.align	1
 2246              		.global	ahrs_update_accel
 2247              		.thumb
 2248              		.thumb_func
 2250              	ahrs_update_accel:
 2251              	.LFB37:
 157:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_accel(void) {
 2252              		.loc 1 157 0
 2253              		.cfi_startproc
 2254              		@ args = 0, pretend = 0, frame = 0
 2255              		@ frame_needed = 0, uses_anonymous_args = 0
 2256 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, sl, lr}
 2257              	.LCFI5:
 2258              		.cfi_def_cfa_offset 32
 2259              		.cfi_offset 14, -4
 2260              		.cfi_offset 10, -8
 2261              		.cfi_offset 9, -12
 2262              		.cfi_offset 8, -16
 2263              		.cfi_offset 7, -20
 2264              		.cfi_offset 6, -24
 2265              		.cfi_offset 5, -28
 2266              		.cfi_offset 4, -32
 165:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ahrs_impl.correct_gravity && ahrs_impl.ltp_vel_norm_valid) {
 2267              		.loc 1 165 0
 2268 0004 7648     		ldr	r0, .L79+8
 160:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 c2 = { RMAT_ELMT(ahrs.ltp_to_imu_rmat, 0,2),
 2269              		.loc 1 160 0
 2270 0006 774B     		ldr	r3, .L79+12
 165:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ahrs_impl.correct_gravity && ahrs_impl.ltp_vel_norm_valid) {
 2271              		.loc 1 165 0
 2272 0008 90F84550 		ldrb	r5, [r0, #69]	@ zero_extendqisi2
 160:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 c2 = { RMAT_ELMT(ahrs.ltp_to_imu_rmat, 0,2),
 2273              		.loc 1 160 0
 2274 000c 5A6A     		ldr	r2, [r3, #36]
 2275              	.LVL212:
 161:subsystems/ahrs/ahrs_int_cmpl_quat.c ****                            RMAT_ELMT(ahrs.ltp_to_imu_rmat, 1,2),
 2276              		.loc 1 161 0
 2277 000e 196B     		ldr	r1, [r3, #48]
 2278              	.LVL213:
 162:subsystems/ahrs/ahrs_int_cmpl_quat.c ****                            RMAT_ELMT(ahrs.ltp_to_imu_rmat, 2,2)};
 2279              		.loc 1 162 0
 2280 0010 DC6B     		ldr	r4, [r3, #60]
 2281              	.LVL214:
 165:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ahrs_impl.correct_gravity && ahrs_impl.ltp_vel_norm_valid) {
 2282              		.loc 1 165 0
 2283 0012 D5B3     		cbz	r5, .L62
 165:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ahrs_impl.correct_gravity && ahrs_impl.ltp_vel_norm_valid) {
 2284              		.loc 1 165 0 is_stmt 0 discriminator 1
 2285 0014 90F84450 		ldrb	r5, [r0, #68]	@ zero_extendqisi2
 2286 0018 BDB3     		cbz	r5, .L62
 2287              	.LBB182:
 175:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     const struct Int32Vect3 vel_tangential_body = {(ahrs_impl.ltp_vel_norm>>INT32_ACCEL_FRAC), 0.0,
 2288              		.loc 1 175 0 is_stmt 1 discriminator 1
 2289 001a 006C     		ldr	r0, [r0, #64]
 177:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     VECT3_RATES_CROSS_VECT3(acc_c_body, ahrs.body_rate, vel_tangential_body);
 2290              		.loc 1 177 0 discriminator 1
 2291 001c D3F89060 		ldr	r6, [r3, #144]
 175:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     const struct Int32Vect3 vel_tangential_body = {(ahrs_impl.ltp_vel_norm>>INT32_ACCEL_FRAC), 0.0,
 2292              		.loc 1 175 0 discriminator 1
 2293 0020 8012     		asrs	r0, r0, #10
 2294              	.LVL215:
 177:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     VECT3_RATES_CROSS_VECT3(acc_c_body, ahrs.body_rate, vel_tangential_body);
 2295              		.loc 1 177 0 discriminator 1
 2296 0022 4643     		muls	r6, r0, r6
 2297 0024 D3F89450 		ldr	r5, [r3, #148]
 186:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_DIFF(corrected_gravity, imu.accel, acc_c_imu);
 2298              		.loc 1 186 0 discriminator 1
 2299 0028 6F4B     		ldr	r3, .L79+16
 2300              	.LVL216:
 177:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     VECT3_RATES_CROSS_VECT3(acc_c_body, ahrs.body_rate, vel_tangential_body);
 2301              		.loc 1 177 0 discriminator 1
 2302 002a 7642     		negs	r6, r6
 182:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_RMAT_VMULT(acc_c_imu, imu.body_to_imu_rmat, acc_c_body);
 2303              		.loc 1 182 0 discriminator 1
 2304 002c D3F89C70 		ldr	r7, [r3, #156]
 178:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_RSHIFT(acc_c_body, acc_c_body, INT32_SPEED_FRAC+INT32_RATE_FRAC-INT32_ACCEL_FRAC-IN
 2305              		.loc 1 178 0 discriminator 1
 2306 0030 F612     		asrs	r6, r6, #11
 177:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     VECT3_RATES_CROSS_VECT3(acc_c_body, ahrs.body_rate, vel_tangential_body);
 2307              		.loc 1 177 0 discriminator 1
 2308 0032 4543     		muls	r5, r0, r5
 182:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_RMAT_VMULT(acc_c_imu, imu.body_to_imu_rmat, acc_c_body);
 2309              		.loc 1 182 0 discriminator 1
 2310 0034 07FB06F8 		mul	r8, r7, r6
 2311 0038 D3F89800 		ldr	r0, [r3, #152]
 2312              	.LVL217:
 178:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_RSHIFT(acc_c_body, acc_c_body, INT32_SPEED_FRAC+INT32_RATE_FRAC-INT32_ACCEL_FRAC-IN
 2313              		.loc 1 178 0 discriminator 1
 2314 003c ED12     		asrs	r5, r5, #11
 2315              	.LVL218:
 182:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_RMAT_VMULT(acc_c_imu, imu.body_to_imu_rmat, acc_c_body);
 2316              		.loc 1 182 0 discriminator 1
 2317 003e 00FB0588 		mla	r8, r0, r5, r8
 2318 0042 D3F8A870 		ldr	r7, [r3, #168]
 186:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_DIFF(corrected_gravity, imu.accel, acc_c_imu);
 2319              		.loc 1 186 0 discriminator 1
 2320 0046 D868     		ldr	r0, [r3, #12]
 182:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_RMAT_VMULT(acc_c_imu, imu.body_to_imu_rmat, acc_c_body);
 2321              		.loc 1 182 0 discriminator 1
 2322 0048 07FB06FC 		mul	ip, r7, r6
 186:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_DIFF(corrected_gravity, imu.accel, acc_c_imu);
 2323              		.loc 1 186 0 discriminator 1
 2324 004c A0EBA838 		sub	r8, r0, r8, asr #14
 2325              	.LVL219:
 182:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_RMAT_VMULT(acc_c_imu, imu.body_to_imu_rmat, acc_c_body);
 2326              		.loc 1 182 0 discriminator 1
 2327 0050 D3F8A400 		ldr	r0, [r3, #164]
 2328 0054 D3F8B070 		ldr	r7, [r3, #176]
 2329 0058 00FB05CC 		mla	ip, r0, r5, ip
 186:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_DIFF(corrected_gravity, imu.accel, acc_c_imu);
 2330              		.loc 1 186 0 discriminator 1
 2331 005c 1869     		ldr	r0, [r3, #16]
 189:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_CROSS_PRODUCT(residual, corrected_gravity, c2);
 2332              		.loc 1 189 0 discriminator 1
 2333 005e 01FB08FA 		mul	sl, r1, r8
 186:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_DIFF(corrected_gravity, imu.accel, acc_c_imu);
 2334              		.loc 1 186 0 discriminator 1
 2335 0062 A0EBAC3C 		sub	ip, r0, ip, asr #14
 2336              	.LVL220:
 182:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_RMAT_VMULT(acc_c_imu, imu.body_to_imu_rmat, acc_c_body);
 2337              		.loc 1 182 0 discriminator 1
 2338 0066 D3F8B400 		ldr	r0, [r3, #180]
 189:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_CROSS_PRODUCT(residual, corrected_gravity, c2);
 2339              		.loc 1 189 0 discriminator 1
 2340 006a 02FB1CAA 		mls	sl, r2, ip, sl
 182:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_RMAT_VMULT(acc_c_imu, imu.body_to_imu_rmat, acc_c_body);
 2341              		.loc 1 182 0 discriminator 1
 2342 006e 4643     		muls	r6, r0, r6
 2343              	.LVL221:
 2344 0070 07FB0565 		mla	r5, r7, r5, r6
 2345              	.LVL222:
 189:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_CROSS_PRODUCT(residual, corrected_gravity, c2);
 2346              		.loc 1 189 0 discriminator 1
 2347 0074 04FB0CF6 		mul	r6, r4, ip
 186:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_DIFF(corrected_gravity, imu.accel, acc_c_imu);
 2348              		.loc 1 186 0 discriminator 1
 2349 0078 5F69     		ldr	r7, [r3, #20]
 2350 007a A7EBA535 		sub	r5, r7, r5, asr #14
 2351              	.LVL223:
 189:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_CROSS_PRODUCT(residual, corrected_gravity, c2);
 2352              		.loc 1 189 0 discriminator 1
 2353 007e 01FB1566 		mls	r6, r1, r5, r6
 2354              	.LVL224:
 2355 0082 5543     		muls	r5, r2, r5
 2356              	.LVL225:
 2357 0084 04FB1857 		mls	r7, r4, r8, r5
 2358              	.LVL226:
 2359              	.LBE182:
 165:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ahrs_impl.correct_gravity && ahrs_impl.ltp_vel_norm_valid) {
 2360              		.loc 1 165 0 discriminator 1
 2361 0088 0DE0     		b	.L63
 2362              	.LVL227:
 2363              	.L62:
 191:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_CROSS_PRODUCT(residual, imu.accel, c2);
 2364              		.loc 1 191 0
 2365 008a 574B     		ldr	r3, .L79+16
 2366              	.LVL228:
 2367 008c 1D69     		ldr	r5, [r3, #16]
 2368 008e 5F69     		ldr	r7, [r3, #20]
 2369 0090 04FB05F6 		mul	r6, r4, r5
 2370 0094 01FB1766 		mls	r6, r1, r7, r6
 2371              	.LVL229:
 2372 0098 5743     		muls	r7, r2, r7
 2373 009a D868     		ldr	r0, [r3, #12]
 2374 009c 04FB1077 		mls	r7, r4, r0, r7
 2375              	.LVL230:
 2376 00a0 4843     		muls	r0, r1, r0
 2377 00a2 02FB150A 		mls	sl, r2, r5, r0
 2378              	.LVL231:
 2379              	.L63:
 196:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ahrs_impl.use_gravity_heuristic) {
 2380              		.loc 1 196 0
 2381 00a6 4E4B     		ldr	r3, .L79+8
 2382 00a8 93F84630 		ldrb	r3, [r3, #70]	@ zero_extendqisi2
 2383 00ac 002B     		cmp	r3, #0
 2384 00ae 4ED0     		beq	.L74
 2385              	.LBB183:
 2386              	.LBB184:
 199:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_NORM(acc_norm, imu.accel);
 2387              		.loc 1 199 0
 2388 00b0 4D4A     		ldr	r2, .L79+16
 2389 00b2 1169     		ldr	r1, [r2, #16]
 2390 00b4 D368     		ldr	r3, [r2, #12]
 2391 00b6 4943     		muls	r1, r1, r1
 2392 00b8 03FB0313 		mla	r3, r3, r3, r1
 2393 00bc 5269     		ldr	r2, [r2, #20]
 2394 00be 02FB0233 		mla	r3, r2, r2, r3
 2395              	.LVL232:
 2396 00c2 7BB1     		cbz	r3, .L72
 2397              	.LVL233:
 2398              	.LBB185:
 199:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_NORM(acc_norm, imu.accel);
 2399              		.loc 1 199 0 is_stmt 0 discriminator 2
 2400 00c4 1A46     		mov	r2, r3
 2401 00c6 2821     		movs	r1, #40
 2402 00c8 00E0     		b	.L67
 2403              	.LVL234:
 2404              	.L73:
 199:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_NORM(acc_norm, imu.accel);
 2405              		.loc 1 199 0
 2406 00ca 0246     		mov	r2, r0
 2407              	.LVL235:
 2408              	.L67:
 199:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_NORM(acc_norm, imu.accel);
 2409              		.loc 1 199 0 discriminator 3
 2410 00cc B3FBF2F0 		udiv	r0, r3, r2
 2411              	.LVL236:
 2412 00d0 8018     		adds	r0, r0, r2
 2413              	.LVL237:
 2414 00d2 4008     		lsrs	r0, r0, #1
 2415              	.LVL238:
 2416 00d4 121A     		subs	r2, r2, r0
 2417              	.LVL239:
 2418 00d6 012A     		cmp	r2, #1
 2419 00d8 05D9     		bls	.L65
 199:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_NORM(acc_norm, imu.accel);
 2420              		.loc 1 199 0 discriminator 4
 2421 00da 0139     		subs	r1, r1, #1
 2422 00dc C9B2     		uxtb	r1, r1
 2423 00de 0029     		cmp	r1, #0
 2424 00e0 F3D1     		bne	.L73
 2425 00e2 00E0     		b	.L65
 2426              	.LVL240:
 2427              	.L72:
 2428              	.LBE185:
 199:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_NORM(acc_norm, imu.accel);
 2429              		.loc 1 199 0
 2430 00e4 1846     		mov	r0, r3
 2431              	.L65:
 2432              	.LVL241:
 2433              	.LBE184:
 200:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     const int32_t acc_norm_d = ABS(ACCEL_BFP_OF_REAL(9.81)-acc_norm);
 2434              		.loc 1 200 0 is_stmt 1
 2435 00e6 FFF7FEFF 		bl	__aeabi_i2d
 2436              	.LVL242:
 2437 00ea 0246     		mov	r2, r0
 2438 00ec 0B46     		mov	r3, r1
 2439 00ee 3AA1     		adr	r1, .L79
 2440 00f0 D1E90001 		ldrd	r0, [r1]
 2441 00f4 FFF7FEFF 		bl	__aeabi_dsub
 2442 00f8 0022     		movs	r2, #0
 2443 00fa 0023     		movs	r3, #0
 2444 00fc 0446     		mov	r4, r0
 2445              	.LVL243:
 2446 00fe 0D46     		mov	r5, r1
 2447 0100 FFF7FEFF 		bl	__aeabi_dcmplt
 2448 0104 18B1     		cbz	r0, .L77
 200:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     const int32_t acc_norm_d = ABS(ACCEL_BFP_OF_REAL(9.81)-acc_norm);
 2449              		.loc 1 200 0 is_stmt 0 discriminator 1
 2450 0106 2046     		mov	r0, r4
 2451 0108 05F10041 		add	r1, r5, #-2147483648
 2452 010c 01E0     		b	.L78
 2453              	.L77:
 200:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     const int32_t acc_norm_d = ABS(ACCEL_BFP_OF_REAL(9.81)-acc_norm);
 2454              		.loc 1 200 0 discriminator 2
 2455 010e 2046     		mov	r0, r4
 2456 0110 2946     		mov	r1, r5
 2457              	.L78:
 2458 0112 FFF7FEFF 		bl	__aeabi_d2iz
 2459              	.LVL244:
 201:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     inv_weight = Chop(6*acc_norm_d/ACCEL_BFP_OF_REAL(9.81), 1, 6);
 2460              		.loc 1 201 0 is_stmt 1 discriminator 2
 2461 0116 0624     		movs	r4, #6
 2462 0118 6043     		muls	r0, r4, r0
 2463              	.LVL245:
 2464 011a FFF7FEFF 		bl	__aeabi_i2d
 2465 011e 2EA3     		adr	r3, .L79
 2466 0120 D3E90023 		ldrd	r2, [r3]
 2467 0124 FFF7FEFF 		bl	__aeabi_ddiv
 2468 0128 0022     		movs	r2, #0
 2469 012a 304B     		ldr	r3, .L79+20
 2470 012c 8046     		mov	r8, r0
 2471 012e 8946     		mov	r9, r1
 2472 0130 FFF7FEFF 		bl	__aeabi_dcmplt
 2473 0134 58B9     		cbnz	r0, .L74
 2474 0136 4046     		mov	r0, r8
 2475 0138 4946     		mov	r1, r9
 2476 013a 0022     		movs	r2, #0
 2477 013c 2C4B     		ldr	r3, .L79+24
 2478 013e FFF7FEFF 		bl	__aeabi_dcmpgt
 2479 0142 30B9     		cbnz	r0, .L75
 201:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     inv_weight = Chop(6*acc_norm_d/ACCEL_BFP_OF_REAL(9.81), 1, 6);
 2480              		.loc 1 201 0 is_stmt 0 discriminator 4
 2481 0144 4046     		mov	r0, r8
 2482 0146 4946     		mov	r1, r9
 2483 0148 FFF7FEFF 		bl	__aeabi_d2iz
 2484 014c 02E0     		b	.L64
 2485              	.L74:
 201:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     inv_weight = Chop(6*acc_norm_d/ACCEL_BFP_OF_REAL(9.81), 1, 6);
 2486              		.loc 1 201 0
 2487 014e 0120     		movs	r0, #1
 2488 0150 00E0     		b	.L64
 2489              	.L75:
 2490 0152 2046     		mov	r0, r4
 2491              	.L64:
 2492              	.LVL246:
 2493              	.LBE183:
 210:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += -residual.x/82000/inv_weight;
 2494              		.loc 1 210 0 is_stmt 1
 2495 0154 2249     		ldr	r1, .L79+8
 2496 0156 274B     		ldr	r3, .L79+28
 2497 0158 CC68     		ldr	r4, [r1, #12]
 2498 015a 96FBF3F2 		sdiv	r2, r6, r3
 2499 015e 92FBF0F2 		sdiv	r2, r2, r0
 2500 0162 A218     		adds	r2, r4, r2
 2501 0164 CA60     		str	r2, [r1, #12]
 211:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += -residual.y/82000/inv_weight;
 2502              		.loc 1 211 0
 2503 0166 0C69     		ldr	r4, [r1, #16]
 2504 0168 97FBF3F2 		sdiv	r2, r7, r3
 2505 016c 92FBF0F2 		sdiv	r2, r2, r0
 2506 0170 A218     		adds	r2, r4, r2
 2507 0172 0A61     		str	r2, [r1, #16]
 212:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += -residual.z/82000/inv_weight;
 2508              		.loc 1 212 0
 2509 0174 9AFBF3F3 		sdiv	r3, sl, r3
 2510 0178 4A69     		ldr	r2, [r1, #20]
 2511 017a 93FBF0F3 		sdiv	r3, r3, r0
 222:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.p += residual.x/inv_weight;
 2512              		.loc 1 222 0
 2513 017e 96FBF0F6 		sdiv	r6, r6, r0
 2514              	.LVL247:
 212:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += -residual.z/82000/inv_weight;
 2515              		.loc 1 212 0
 2516 0182 D318     		adds	r3, r2, r3
 223:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.q += residual.y/inv_weight;
 2517              		.loc 1 223 0
 2518 0184 97FBF0F7 		sdiv	r7, r7, r0
 2519              	.LVL248:
 212:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += -residual.z/82000/inv_weight;
 2520              		.loc 1 212 0
 2521 0188 4B61     		str	r3, [r1, #20]
 222:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.p += residual.x/inv_weight;
 2522              		.loc 1 222 0
 2523 018a D1E90A23 		ldrd	r2, [r1, #40]
 2524 018e 12EB0608 		adds	r8, r2, r6
 2525 0192 43EBE679 		adc	r9, r3, r6, asr #31
 224:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r += residual.z/inv_weight;
 2526              		.loc 1 224 0
 2527 0196 9AFBF0F0 		sdiv	r0, sl, r0
 2528              	.LVL249:
 223:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.q += residual.y/inv_weight;
 2529              		.loc 1 223 0
 2530 019a D1E90C23 		ldrd	r2, [r1, #48]
 2531 019e D419     		adds	r4, r2, r7
 2532 01a0 43EBE775 		adc	r5, r3, r7, asr #31
 224:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r += residual.z/inv_weight;
 2533              		.loc 1 224 0
 2534 01a4 D1E90E23 		ldrd	r2, [r1, #56]
 2535 01a8 1218     		adds	r2, r2, r0
 2536 01aa 43EBE073 		adc	r3, r3, r0, asr #31
 228:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 2537              		.loc 1 228 0
 2538 01ae 4FEA1870 		lsr	r0, r8, #28
 2539 01b2 40EA0910 		orr	r0, r0, r9, lsl #4
 224:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r += residual.z/inv_weight;
 2540              		.loc 1 224 0
 2541 01b6 C1E90E23 		strd	r2, [r1, #56]
 228:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 2542              		.loc 1 228 0
 2543 01ba 0860     		str	r0, [r1, #0]
 2544 01bc 120F     		lsrs	r2, r2, #28
 2545 01be 200F     		lsrs	r0, r4, #28
 2546 01c0 40EA0510 		orr	r0, r0, r5, lsl #4
 2547 01c4 42EA0312 		orr	r2, r2, r3, lsl #4
 222:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.p += residual.x/inv_weight;
 2548              		.loc 1 222 0
 2549 01c8 C1E90A89 		strd	r8, [r1, #40]
 223:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.q += residual.y/inv_weight;
 2550              		.loc 1 223 0
 2551 01cc C1E90C45 		strd	r4, [r1, #48]
 228:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 2552              		.loc 1 228 0
 2553 01d0 4860     		str	r0, [r1, #4]
 2554 01d2 8A60     		str	r2, [r1, #8]
 230:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 2555              		.loc 1 230 0
 2556 01d4 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 2557              	.L80:
 2558              		.align	3
 2559              	.L79:
 2560 01d8 1F85EB51 		.word	1374389535
 2561 01dc B89EC340 		.word	1086561976
 2562 01e0 00000000 		.word	.LANCHOR0
 2563 01e4 00000000 		.word	ahrs
 2564 01e8 00000000 		.word	imu
 2565 01ec 0000F03F 		.word	1072693248
 2566 01f0 00001840 		.word	1075314688
 2567 01f4 B0BFFEFF 		.word	-82000
 2568              		.cfi_endproc
 2569              	.LFE37:
 2571              		.section	.text.ahrs_update_mag,"ax",%progbits
 2572              		.align	1
 2573              		.global	ahrs_update_mag
 2574              		.thumb
 2575              		.thumb_func
 2577              	ahrs_update_mag:
 2578              	.LFB38:
 232:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_mag(void) {
 2579              		.loc 1 232 0
 2580              		.cfi_startproc
 2581              		@ args = 0, pretend = 0, frame = 0
 2582              		@ frame_needed = 0, uses_anonymous_args = 0
 2583              	.LBB186:
 2584              	.LBB187:
 272:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_TRANSP_VMULT(measured_ltp, ahrs.ltp_to_imu_rmat, imu.mag);
 2585              		.loc 1 272 0
 2586 0000 314B     		ldr	r3, .L82
 2587              	.LBE187:
 2588              	.LBE186:
 232:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_mag(void) {
 2589              		.loc 1 232 0
 2590 0002 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 2591              	.LCFI6:
 2592              		.cfi_def_cfa_offset 28
 2593              		.cfi_offset 14, -4
 2594              		.cfi_offset 9, -8
 2595              		.cfi_offset 8, -12
 2596              		.cfi_offset 7, -16
 2597              		.cfi_offset 6, -20
 2598              		.cfi_offset 5, -24
 2599              		.cfi_offset 4, -28
 2600              	.LBB189:
 2601              	.LBB188:
 272:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_TRANSP_VMULT(measured_ltp, ahrs.ltp_to_imu_rmat, imu.mag);
 2602              		.loc 1 272 0
 2603 0006 9969     		ldr	r1, [r3, #24]
 2604 0008 DC69     		ldr	r4, [r3, #28]
 2605 000a 1A6A     		ldr	r2, [r3, #32]
 2606              	.LVL250:
 2607 000c 2F4B     		ldr	r3, .L82+4
 2608              	.LVL251:
 2609 000e 986A     		ldr	r0, [r3, #40]
 2610 0010 DD69     		ldr	r5, [r3, #28]
 2611 0012 6043     		muls	r0, r4, r0
 2612 0014 05FB0100 		mla	r0, r5, r1, r0
 2613 0018 5D6B     		ldr	r5, [r3, #52]
 2614 001a DE6A     		ldr	r6, [r3, #44]
 2615 001c 05FB0200 		mla	r0, r5, r2, r0
 2616 0020 7443     		muls	r4, r6, r4
 277:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (measured_ltp.x * expected_ltp.y - measured_ltp.y * expected_ltp.x)/(1<<5)};
 2617              		.loc 1 277 0
 2618 0022 BF25     		movs	r5, #191
 272:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_TRANSP_VMULT(measured_ltp, ahrs.ltp_to_imu_rmat, imu.mag);
 2619              		.loc 1 272 0
 2620 0024 8013     		asrs	r0, r0, #14
 277:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (measured_ltp.x * expected_ltp.y - measured_ltp.y * expected_ltp.x)/(1<<5)};
 2621              		.loc 1 277 0
 2622 0026 6843     		muls	r0, r5, r0
 272:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_TRANSP_VMULT(measured_ltp, ahrs.ltp_to_imu_rmat, imu.mag);
 2623              		.loc 1 272 0
 2624 0028 1D6A     		ldr	r5, [r3, #32]
 2625 002a 05FB0141 		mla	r1, r5, r1, r4
 2626 002e 9C6B     		ldr	r4, [r3, #56]
 2627 0030 04FB0212 		mla	r2, r4, r2, r1
 277:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (measured_ltp.x * expected_ltp.y - measured_ltp.y * expected_ltp.x)/(1<<5)};
 2628              		.loc 1 277 0
 2629 0034 40F21441 		movw	r1, #1044
 272:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_TRANSP_VMULT(measured_ltp, ahrs.ltp_to_imu_rmat, imu.mag);
 2630              		.loc 1 272 0
 2631 0038 9213     		asrs	r2, r2, #14
 277:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (measured_ltp.x * expected_ltp.y - measured_ltp.y * expected_ltp.x)/(1<<5)};
 2632              		.loc 1 277 0
 2633 003a 01FB1200 		mls	r0, r1, r2, r0
 2634 003e 2024     		movs	r4, #32
 280:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2635              		.loc 1 280 0
 2636 0040 5A6A     		ldr	r2, [r3, #36]
 277:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (measured_ltp.x * expected_ltp.y - measured_ltp.y * expected_ltp.x)/(1<<5)};
 2637              		.loc 1 277 0
 2638 0042 90FBF4F0 		sdiv	r0, r0, r4
 2639              	.LVL252:
 280:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2640              		.loc 1 280 0
 2641 0046 4243     		muls	r2, r0, r2
 2642 0048 1C6B     		ldr	r4, [r3, #48]
 290:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/16;
 2643              		.loc 1 290 0
 2644 004a 2149     		ldr	r1, .L82+8
 280:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2645              		.loc 1 280 0
 2646 004c 4443     		muls	r4, r0, r4
 303:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.p -= residual_imu.x*1024;
 2647              		.loc 1 303 0
 2648 004e D1E90A89 		ldrd	r8, [r1, #40]
 280:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2649              		.loc 1 280 0
 2650 0052 DB6B     		ldr	r3, [r3, #60]
 290:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/16;
 2651              		.loc 1 290 0
 2652 0054 CE68     		ldr	r6, [r1, #12]
 280:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2653              		.loc 1 280 0
 2654 0056 9213     		asrs	r2, r2, #14
 2655              	.LVL253:
 2656 0058 5843     		muls	r0, r3, r0
 2657              	.LVL254:
 290:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/16;
 2658              		.loc 1 290 0
 2659 005a 1023     		movs	r3, #16
 2660 005c 92FBF3F5 		sdiv	r5, r2, r3
 2661 0060 7519     		adds	r5, r6, r5
 280:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2662              		.loc 1 280 0
 2663 0062 A413     		asrs	r4, r4, #14
 2664              	.LVL255:
 291:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += residual_imu.y/16;
 2665              		.loc 1 291 0
 2666 0064 0E69     		ldr	r6, [r1, #16]
 290:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/16;
 2667              		.loc 1 290 0
 2668 0066 CD60     		str	r5, [r1, #12]
 291:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += residual_imu.y/16;
 2669              		.loc 1 291 0
 2670 0068 94FBF3F5 		sdiv	r5, r4, r3
 2671 006c 7519     		adds	r5, r6, r5
 280:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2672              		.loc 1 280 0
 2673 006e 8013     		asrs	r0, r0, #14
 2674              	.LVL256:
 291:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += residual_imu.y/16;
 2675              		.loc 1 291 0
 2676 0070 0D61     		str	r5, [r1, #16]
 292:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += residual_imu.z/16;
 2677              		.loc 1 292 0
 2678 0072 4D69     		ldr	r5, [r1, #20]
 2679 0074 90FBF3F3 		sdiv	r3, r0, r3
 303:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.p -= residual_imu.x*1024;
 2680              		.loc 1 303 0
 2681 0078 9202     		lsls	r2, r2, #10
 2682              	.LVL257:
 2683 007a B8EB0208 		subs	r8, r8, r2
 2684 007e 69EBE279 		sbc	r9, r9, r2, asr #31
 292:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += residual_imu.z/16;
 2685              		.loc 1 292 0
 2686 0082 EB18     		adds	r3, r5, r3
 305:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r -= residual_imu.z*1024;
 2687              		.loc 1 305 0
 2688 0084 8002     		lsls	r0, r0, #10
 2689              	.LVL258:
 304:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.q -= residual_imu.y*1024;
 2690              		.loc 1 304 0
 2691 0086 A402     		lsls	r4, r4, #10
 2692              	.LVL259:
 292:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += residual_imu.z/16;
 2693              		.loc 1 292 0
 2694 0088 4B61     		str	r3, [r1, #20]
 304:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.q -= residual_imu.y*1024;
 2695              		.loc 1 304 0
 2696 008a D1E90C23 		ldrd	r2, [r1, #48]
 2697 008e 161B     		subs	r6, r2, r4
 2698 0090 63EBE477 		sbc	r7, r3, r4, asr #31
 305:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r -= residual_imu.z*1024;
 2699              		.loc 1 305 0
 2700 0094 D1E90E23 		ldrd	r2, [r1, #56]
 2701 0098 121A     		subs	r2, r2, r0
 2702 009a 63EBE073 		sbc	r3, r3, r0, asr #31
 308:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 2703              		.loc 1 308 0
 2704 009e 4FEA1870 		lsr	r0, r8, #28
 2705 00a2 40EA0910 		orr	r0, r0, r9, lsl #4
 305:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r -= residual_imu.z*1024;
 2706              		.loc 1 305 0
 2707 00a6 C1E90E23 		strd	r2, [r1, #56]
 308:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 2708              		.loc 1 308 0
 2709 00aa 0860     		str	r0, [r1, #0]
 2710 00ac 120F     		lsrs	r2, r2, #28
 2711 00ae 300F     		lsrs	r0, r6, #28
 2712 00b0 40EA0710 		orr	r0, r0, r7, lsl #4
 2713 00b4 42EA0312 		orr	r2, r2, r3, lsl #4
 303:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.p -= residual_imu.x*1024;
 2714              		.loc 1 303 0
 2715 00b8 C1E90A89 		strd	r8, [r1, #40]
 304:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.q -= residual_imu.y*1024;
 2716              		.loc 1 304 0
 2717 00bc C1E90C67 		strd	r6, [r1, #48]
 308:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 2718              		.loc 1 308 0
 2719 00c0 4860     		str	r0, [r1, #4]
 2720 00c2 8A60     		str	r2, [r1, #8]
 2721              	.LBE188:
 2722              	.LBE189:
 238:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 2723              		.loc 1 238 0
 2724 00c4 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2725              	.L83:
 2726              		.align	2
 2727              	.L82:
 2728 00c8 00000000 		.word	imu
 2729 00cc 00000000 		.word	ahrs
 2730 00d0 00000000 		.word	.LANCHOR0
 2731              		.cfi_endproc
 2732              	.LFE38:
 2734              		.section	.text.ahrs_update_gps,"ax",%progbits
 2735              		.align	1
 2736              		.global	ahrs_update_gps
 2737              		.thumb
 2738              		.thumb_func
 2740              	ahrs_update_gps:
 2741              	.LFB41:
 312:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_gps(void) {
 2742              		.loc 1 312 0
 2743              		.cfi_startproc
 2744              		@ args = 0, pretend = 0, frame = 0
 2745              		@ frame_needed = 0, uses_anonymous_args = 0
 2746 0000 10B5     		push	{r4, lr}
 2747              	.LCFI7:
 2748              		.cfi_def_cfa_offset 8
 2749              		.cfi_offset 14, -4
 2750              		.cfi_offset 4, -8
 314:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (gps.fix == GPS_FIX_3D) {
 2751              		.loc 1 314 0
 2752 0002 0D4B     		ldr	r3, .L88
 2753 0004 0D4C     		ldr	r4, .L88+4
 2754 0006 93F85B20 		ldrb	r2, [r3, #91]	@ zero_extendqisi2
 2755 000a 032A     		cmp	r2, #3
 2756 000c 10D1     		bne	.L85
 315:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.ltp_vel_norm = SPEED_BFP_OF_REAL(gps.speed_3d / 100.);
 2757              		.loc 1 315 0
 2758 000e B3F94600 		ldrsh	r0, [r3, #70]
 2759 0012 FFF7FEFF 		bl	__aeabi_i2d
 2760 0016 0022     		movs	r2, #0
 2761 0018 094B     		ldr	r3, .L88+8
 2762 001a FFF7FEFF 		bl	__aeabi_ddiv
 2763 001e 094B     		ldr	r3, .L88+12
 2764 0020 0022     		movs	r2, #0
 2765 0022 FFF7FEFF 		bl	__aeabi_dmul
 2766 0026 FFF7FEFF 		bl	__aeabi_d2iz
 316:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.ltp_vel_norm_valid = TRUE;
 2767              		.loc 1 316 0
 2768 002a 0123     		movs	r3, #1
 315:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.ltp_vel_norm = SPEED_BFP_OF_REAL(gps.speed_3d / 100.);
 2769              		.loc 1 315 0
 2770 002c 2064     		str	r0, [r4, #64]
 2771 002e 00E0     		b	.L87
 2772              	.L85:
 318:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.ltp_vel_norm_valid = FALSE;
 2773              		.loc 1 318 0
 2774 0030 0023     		movs	r3, #0
 2775              	.L87:
 2776 0032 84F84430 		strb	r3, [r4, #68]
 2777 0036 10BD     		pop	{r4, pc}
 2778              	.L89:
 2779              		.align	2
 2780              	.L88:
 2781 0038 00000000 		.word	gps
 2782 003c 00000000 		.word	.LANCHOR0
 2783 0040 00005940 		.word	1079574528
 2784 0044 00002041 		.word	1092616192
 2785              		.cfi_endproc
 2786              	.LFE41:
 2788              		.section	.text.ahrs_update_heading,"ax",%progbits
 2789              		.align	1
 2790              		.global	ahrs_update_heading
 2791              		.thumb
 2792              		.thumb_func
 2794              	ahrs_update_heading:
 2795              	.LFB42:
 345:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_heading(int32_t heading) {
 2796              		.loc 1 345 0
 2797              		.cfi_startproc
 2798              		@ args = 0, pretend = 0, frame = 0
 2799              		@ frame_needed = 0, uses_anonymous_args = 0
 2800              	.LVL260:
 2801 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 2802              	.LCFI8:
 2803              		.cfi_def_cfa_offset 28
 2804              		.cfi_offset 14, -4
 2805              		.cfi_offset 9, -8
 2806              		.cfi_offset 8, -12
 2807              		.cfi_offset 7, -16
 2808              		.cfi_offset 6, -20
 2809              		.cfi_offset 5, -24
 2810              		.cfi_offset 4, -28
 347:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_ANGLE_NORMALIZE(heading);
 2811              		.loc 1 347 0
 2812 0004 43F24323 		movw	r3, #12867
 2813 0008 02E0     		b	.L91
 2814              	.L92:
 347:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_ANGLE_NORMALIZE(heading);
 2815              		.loc 1 347 0 is_stmt 0 discriminator 2
 2816 000a A0F5C940 		sub	r0, r0, #25728
 2817              	.LVL261:
 2818 000e 0738     		subs	r0, r0, #7
 2819              	.LVL262:
 2820              	.L91:
 347:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_ANGLE_NORMALIZE(heading);
 2821              		.loc 1 347 0 discriminator 1
 2822 0010 9842     		cmp	r0, r3
 2823 0012 FADC     		bgt	.L92
 2824 0014 03E0     		b	.L111
 2825              	.L94:
 347:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_ANGLE_NORMALIZE(heading);
 2826              		.loc 1 347 0 discriminator 5
 2827 0016 00F5C940 		add	r0, r0, #25728
 2828              	.LVL263:
 2829 001a 0730     		adds	r0, r0, #7
 2830              	.LVL264:
 2831 001c 00E0     		b	.L110
 2832              	.L111:
 347:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_ANGLE_NORMALIZE(heading);
 2833              		.loc 1 347 0 discriminator 4
 2834 001e 4D4B     		ldr	r3, .L112
 2835              	.L110:
 2836 0020 9842     		cmp	r0, r3
 2837 0022 F8DB     		blt	.L94
 352:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     { RMAT_ELMT(ahrs.ltp_to_body_rmat, 0, 0),
 2838              		.loc 1 352 0 is_stmt 1
 2839 0024 4C4C     		ldr	r4, .L112+4
 2840              	.LBB190:
 356:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2841              		.loc 1 356 0
 2842 0026 00F5C953 		add	r3, r0, #6432
 2843              	.LBE190:
 352:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     { RMAT_ELMT(ahrs.ltp_to_body_rmat, 0, 0),
 2844              		.loc 1 352 0
 2845 002a A66E     		ldr	r6, [r4, #104]
 2846              	.LVL265:
 353:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       RMAT_ELMT(ahrs.ltp_to_body_rmat, 0, 1) };
 2847              		.loc 1 353 0
 2848 002c E56E     		ldr	r5, [r4, #108]
 2849              	.LVL266:
 2850              	.LBB191:
 356:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2851              		.loc 1 356 0
 2852 002e 0133     		adds	r3, r3, #1
 2853              	.LVL267:
 2854 0030 43F24322 		movw	r2, #12867
 2855 0034 02E0     		b	.L95
 2856              	.L96:
 356:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2857              		.loc 1 356 0 is_stmt 0 discriminator 2
 2858 0036 A3F5C943 		sub	r3, r3, #25728
 2859              	.LVL268:
 2860 003a 073B     		subs	r3, r3, #7
 2861              	.LVL269:
 2862              	.L95:
 356:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2863              		.loc 1 356 0 discriminator 1
 2864 003c 9342     		cmp	r3, r2
 2865 003e FADC     		bgt	.L96
 356:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2866              		.loc 1 356 0
 2867 0040 41F62112 		movw	r2, #6433
 2868 0044 9342     		cmp	r3, r2
 2869 0046 454C     		ldr	r4, .L112+8
 2870              	.LVL270:
 2871 0048 03DD     		ble	.L97
 356:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2872              		.loc 1 356 0 discriminator 7
 2873 004a C3F54953 		rsb	r3, r3, #12864
 2874              	.LVL271:
 2875 004e 0333     		adds	r3, r3, #3
 2876              	.LVL272:
 2877 0050 0CE0     		b	.L98
 2878              	.L97:
 356:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2879              		.loc 1 356 0 discriminator 8
 2880 0052 6FF4C952 		mvn	r2, #6432
 2881 0056 9342     		cmp	r3, r2
 2882 0058 06DA     		bge	.L99
 356:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2883              		.loc 1 356 0 discriminator 9
 2884 005a C3F17F43 		rsb	r3, r3, #-16777216
 2885              	.LVL273:
 2886 005e 03F57F03 		add	r3, r3, #16711680
 2887 0062 03F54D43 		add	r3, r3, #52480
 2888 0066 BD33     		adds	r3, r3, #189
 2889              	.LVL274:
 2890              	.L99:
 356:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2891              		.loc 1 356 0 discriminator 10
 2892 0068 002B     		cmp	r3, #0
 2893 006a 02DB     		blt	.L100
 2894              	.L98:
 356:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2895              		.loc 1 356 0 discriminator 11
 2896 006c 34F91320 		ldrsh	r2, [r4, r3, lsl #1]
 2897              	.LVL275:
 2898 0070 03E0     		b	.L101
 2899              	.LVL276:
 2900              	.L100:
 356:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2901              		.loc 1 356 0 discriminator 12
 2902 0072 5B42     		negs	r3, r3
 2903              	.LVL277:
 2904 0074 34F91320 		ldrsh	r2, [r4, r3, lsl #1]
 2905 0078 5242     		negs	r2, r2
 2906              	.LVL278:
 2907              	.L101:
 2908              	.LBE191:
 2909              	.LBB192:
 357:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(heading_y, heading); // measured course in y-direction
 2910              		.loc 1 357 0 is_stmt 1
 2911 007a 41F62113 		movw	r3, #6433
 2912 007e 9842     		cmp	r0, r3
 2913 0080 364C     		ldr	r4, .L112+8
 2914 0082 03DD     		ble	.L102
 357:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(heading_y, heading); // measured course in y-direction
 2915              		.loc 1 357 0 is_stmt 0 discriminator 7
 2916 0084 C0F54950 		rsb	r0, r0, #12864
 2917              	.LVL279:
 2918 0088 C31C     		adds	r3, r0, #3
 2919              	.LVL280:
 2920 008a 09E0     		b	.L103
 2921              	.LVL281:
 2922              	.L102:
 357:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(heading_y, heading); // measured course in y-direction
 2923              		.loc 1 357 0 discriminator 8
 2924 008c 6FF4C953 		mvn	r3, #6432
 2925 0090 9842     		cmp	r0, r3
 2926 0092 B6BF     		itet	lt
 2927 0094 2F4B     		ldrlt	r3, .L112
 2928 0096 0346     		movge	r3, r0
 2929 0098 C0EB0303 		rsblt	r3, r0, r3
 2930              	.LVL282:
 2931 009c 002B     		cmp	r3, #0
 2932 009e 02DB     		blt	.L105
 2933              	.LVL283:
 2934              	.L103:
 357:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(heading_y, heading); // measured course in y-direction
 2935              		.loc 1 357 0 discriminator 11
 2936 00a0 34F91310 		ldrsh	r1, [r4, r3, lsl #1]
 2937              	.LVL284:
 2938 00a4 03E0     		b	.L106
 2939              	.LVL285:
 2940              	.L105:
 357:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(heading_y, heading); // measured course in y-direction
 2941              		.loc 1 357 0 discriminator 12
 2942 00a6 5B42     		negs	r3, r3
 2943              	.LVL286:
 2944 00a8 34F91310 		ldrsh	r1, [r4, r3, lsl #1]
 2945 00ac 4942     		negs	r1, r1
 2946              	.LVL287:
 2947              	.L106:
 2948              	.LBE192:
 363:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (expected_ltp.x * heading_y - expected_ltp.y * heading_x)/(1<<INT32_ANGLE_FRAC)};
 2949              		.loc 1 363 0 is_stmt 1
 2950 00ae 01FB06F3 		mul	r3, r1, r6
 2951 00b2 02FB1533 		mls	r3, r2, r5, r3
 366:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2952              		.loc 1 366 0
 2953 00b6 284A     		ldr	r2, .L112+4
 2954              	.LVL288:
 363:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (expected_ltp.x * heading_y - expected_ltp.y * heading_x)/(1<<INT32_ANGLE_FRAC)};
 2955              		.loc 1 363 0
 2956 00b8 4FF48050 		mov	r0, #4096
 366:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2957              		.loc 1 366 0
 2958 00bc 556A     		ldr	r5, [r2, #36]
 363:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (expected_ltp.x * heading_y - expected_ltp.y * heading_x)/(1<<INT32_ANGLE_FRAC)};
 2959              		.loc 1 363 0
 2960 00be 93FBF0F3 		sdiv	r3, r3, r0
 2961              	.LVL289:
 366:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2962              		.loc 1 366 0
 2963 00c2 5D43     		muls	r5, r3, r5
 2964 00c4 146B     		ldr	r4, [r2, #48]
 372:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/4;
 2965              		.loc 1 372 0
 2966 00c6 2649     		ldr	r1, .L112+12
 2967              	.LVL290:
 366:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2968              		.loc 1 366 0
 2969 00c8 5C43     		muls	r4, r3, r4
 2970 00ca D06B     		ldr	r0, [r2, #60]
 372:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/4;
 2971              		.loc 1 372 0
 2972 00cc CF68     		ldr	r7, [r1, #12]
 2973 00ce 0422     		movs	r2, #4
 2974              	.LVL291:
 366:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2975              		.loc 1 366 0
 2976 00d0 AD13     		asrs	r5, r5, #14
 2977              	.LVL292:
 2978 00d2 5843     		muls	r0, r3, r0
 372:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/4;
 2979              		.loc 1 372 0
 2980 00d4 95FBF2F6 		sdiv	r6, r5, r2
 2981 00d8 BE19     		adds	r6, r7, r6
 366:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2982              		.loc 1 366 0
 2983 00da A413     		asrs	r4, r4, #14
 2984              	.LVL293:
 373:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += residual_imu.y/4;
 2985              		.loc 1 373 0
 2986 00dc 0F69     		ldr	r7, [r1, #16]
 372:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/4;
 2987              		.loc 1 372 0
 2988 00de CE60     		str	r6, [r1, #12]
 373:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += residual_imu.y/4;
 2989              		.loc 1 373 0
 2990 00e0 94FBF2F6 		sdiv	r6, r4, r2
 2991 00e4 BE19     		adds	r6, r7, r6
 366:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2992              		.loc 1 366 0
 2993 00e6 8013     		asrs	r0, r0, #14
 2994              	.LVL294:
 373:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += residual_imu.y/4;
 2995              		.loc 1 373 0
 2996 00e8 0E61     		str	r6, [r1, #16]
 374:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += residual_imu.z/4;
 2997              		.loc 1 374 0
 2998 00ea 4E69     		ldr	r6, [r1, #20]
 2999 00ec 90FBF2F2 		sdiv	r2, r0, r2
 3000 00f0 B218     		adds	r2, r6, r2
 3001 00f2 4A61     		str	r2, [r1, #20]
 3002              	.LVL295:
 3003              	.LBB193:
 384:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(sin_max_angle_deviation, TRIG_BFP_OF_REAL(RadOfDeg(5.)));
 3004              		.loc 1 384 0
 3005 00f4 194A     		ldr	r2, .L112+8
 3006              	.LBE193:
 385:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ABS(residual_ltp.z) < sin_max_angle_deviation)
 3007              		.loc 1 385 0
 3008 00f6 002B     		cmp	r3, #0
 3009 00f8 B8BF     		it	lt
 3010 00fa 5B42     		rsblt	r3, r3, #0
 3011              	.LVL296:
 3012              	.LBB194:
 384:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(sin_max_angle_deviation, TRIG_BFP_OF_REAL(RadOfDeg(5.)));
 3013              		.loc 1 384 0
 3014 00fc B2F92A2B 		ldrsh	r2, [r2, #2858]
 3015              	.LBE194:
 385:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ABS(residual_ltp.z) < sin_max_angle_deviation)
 3016              		.loc 1 385 0
 3017 0100 9342     		cmp	r3, r2
 3018 0102 25DA     		bge	.L90
 390:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.p -= residual_imu.x*(1<<INT32_ANGLE_FRAC);
 3019              		.loc 1 390 0
 3020 0104 2D03     		lsls	r5, r5, #12
 3021              	.LVL297:
 3022 0106 D1E90A89 		ldrd	r8, [r1, #40]
 392:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.r -= residual_imu.z*(1<<INT32_ANGLE_FRAC);
 3023              		.loc 1 392 0
 3024 010a 0003     		lsls	r0, r0, #12
 3025              	.LVL298:
 390:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.p -= residual_imu.x*(1<<INT32_ANGLE_FRAC);
 3026              		.loc 1 390 0
 3027 010c B8EB0508 		subs	r8, r8, r5
 3028 0110 69EBE579 		sbc	r9, r9, r5, asr #31
 391:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.q -= residual_imu.y*(1<<INT32_ANGLE_FRAC);
 3029              		.loc 1 391 0
 3030 0114 2403     		lsls	r4, r4, #12
 3031              	.LVL299:
 3032 0116 D1E90C23 		ldrd	r2, [r1, #48]
 3033 011a 161B     		subs	r6, r2, r4
 3034 011c 63EBE477 		sbc	r7, r3, r4, asr #31
 392:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.r -= residual_imu.z*(1<<INT32_ANGLE_FRAC);
 3035              		.loc 1 392 0
 3036 0120 D1E90E23 		ldrd	r2, [r1, #56]
 3037 0124 121A     		subs	r2, r2, r0
 3038 0126 63EBE073 		sbc	r3, r3, r0, asr #31
 394:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 3039              		.loc 1 394 0
 3040 012a 4FEA1870 		lsr	r0, r8, #28
 3041 012e 40EA0910 		orr	r0, r0, r9, lsl #4
 392:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.r -= residual_imu.z*(1<<INT32_ANGLE_FRAC);
 3042              		.loc 1 392 0
 3043 0132 C1E90E23 		strd	r2, [r1, #56]
 394:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 3044              		.loc 1 394 0
 3045 0136 0860     		str	r0, [r1, #0]
 3046 0138 120F     		lsrs	r2, r2, #28
 3047 013a 300F     		lsrs	r0, r6, #28
 390:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.p -= residual_imu.x*(1<<INT32_ANGLE_FRAC);
 3048              		.loc 1 390 0
 3049 013c C1E90A89 		strd	r8, [r1, #40]
 391:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.q -= residual_imu.y*(1<<INT32_ANGLE_FRAC);
 3050              		.loc 1 391 0
 3051 0140 C1E90C67 		strd	r6, [r1, #48]
 394:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 3052              		.loc 1 394 0
 3053 0144 40EA0710 		orr	r0, r0, r7, lsl #4
 3054 0148 42EA0312 		orr	r2, r2, r3, lsl #4
 3055 014c 4860     		str	r0, [r1, #4]
 3056 014e 8A60     		str	r2, [r1, #8]
 3057              	.L90:
 3058 0150 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 3059              	.L113:
 3060              		.align	2
 3061              	.L112:
 3062 0154 BDCDFFFF 		.word	-12867
 3063 0158 00000000 		.word	ahrs
 3064 015c 00000000 		.word	pprz_trig_int
 3065 0160 00000000 		.word	.LANCHOR0
 3066              		.cfi_endproc
 3067              	.LFE42:
 3069              		.section	.text.ahrs_realign_heading,"ax",%progbits
 3070              		.align	1
 3071              		.global	ahrs_realign_heading
 3072              		.thumb
 3073              		.thumb_func
 3075              	ahrs_realign_heading:
 3076              	.LFB43:
 398:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_realign_heading(int32_t heading) {
 3077              		.loc 1 398 0
 3078              		.cfi_startproc
 3079              		@ args = 0, pretend = 0, frame = 24
 3080              		@ frame_needed = 0, uses_anonymous_args = 0
 3081              	.LVL300:
 3082 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 3083              	.LCFI9:
 3084              		.cfi_def_cfa_offset 36
 3085              		.cfi_offset 14, -4
 3086              		.cfi_offset 11, -8
 3087              		.cfi_offset 10, -12
 3088              		.cfi_offset 9, -16
 3089              		.cfi_offset 8, -20
 3090              		.cfi_offset 7, -24
 3091              		.cfi_offset 6, -28
 3092              		.cfi_offset 5, -32
 3093              		.cfi_offset 4, -36
 3094              	.LBB195:
 404:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 3095              		.loc 1 404 0
 3096 0004 0223     		movs	r3, #2
 3097 0006 90FBF3F3 		sdiv	r3, r0, r3
 3098              	.LVL301:
 3099              	.LBE195:
 398:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_realign_heading(int32_t heading) {
 3100              		.loc 1 398 0
 3101 000a 87B0     		sub	sp, sp, #28
 3102              	.LCFI10:
 3103              		.cfi_def_cfa_offset 64
 3104              	.LBB196:
 404:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 3105              		.loc 1 404 0
 3106 000c 1A46     		mov	r2, r3
 3107 000e 43F24321 		movw	r1, #12867
 3108 0012 02E0     		b	.L115
 3109              	.LVL302:
 3110              	.L116:
 404:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 3111              		.loc 1 404 0 is_stmt 0 discriminator 2
 3112 0014 A2F5C942 		sub	r2, r2, #25728
 3113              	.LVL303:
 3114 0018 073A     		subs	r2, r2, #7
 3115              	.LVL304:
 3116              	.L115:
 404:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 3117              		.loc 1 404 0 discriminator 1
 3118 001a 8A42     		cmp	r2, r1
 3119 001c FADC     		bgt	.L116
 3120 001e 03E0     		b	.L154
 3121              	.L118:
 404:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 3122              		.loc 1 404 0 discriminator 5
 3123 0020 02F5C942 		add	r2, r2, #25728
 3124              	.LVL305:
 3125 0024 0732     		adds	r2, r2, #7
 3126              	.LVL306:
 3127 0026 00E0     		b	.L151
 3128              	.L154:
 404:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 3129              		.loc 1 404 0 discriminator 4
 3130 0028 6549     		ldr	r1, .L156
 3131              	.L151:
 3132 002a 8A42     		cmp	r2, r1
 3133 002c F8DB     		blt	.L118
 404:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 3134              		.loc 1 404 0
 3135 002e 41F62111 		movw	r1, #6433
 3136 0032 8A42     		cmp	r2, r1
 3137 0034 6349     		ldr	r1, .L156+4
 3138 0036 03DD     		ble	.L119
 404:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 3139              		.loc 1 404 0 discriminator 7
 3140 0038 C2F54952 		rsb	r2, r2, #12864
 3141              	.LVL307:
 3142 003c 0332     		adds	r2, r2, #3
 3143              	.LVL308:
 3144 003e 0CE0     		b	.L120
 3145              	.L119:
 404:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 3146              		.loc 1 404 0 discriminator 8
 3147 0040 6FF4C950 		mvn	r0, #6432
 3148              	.LVL309:
 3149 0044 8242     		cmp	r2, r0
 3150 0046 06DA     		bge	.L121
 404:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 3151              		.loc 1 404 0 discriminator 9
 3152 0048 C2F17F42 		rsb	r2, r2, #-16777216
 3153              	.LVL310:
 3154 004c 02F57F02 		add	r2, r2, #16711680
 3155 0050 02F54D42 		add	r2, r2, #52480
 3156 0054 BD32     		adds	r2, r2, #189
 3157              	.LVL311:
 3158              	.L121:
 404:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 3159              		.loc 1 404 0 discriminator 10
 3160 0056 002A     		cmp	r2, #0
 3161 0058 02DB     		blt	.L122
 3162              	.L120:
 404:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 3163              		.loc 1 404 0 discriminator 11
 3164 005a 31F91260 		ldrsh	r6, [r1, r2, lsl #1]
 3165              	.LVL312:
 3166 005e 03E0     		b	.L123
 3167              	.LVL313:
 3168              	.L122:
 404:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 3169              		.loc 1 404 0 discriminator 12
 3170 0060 5242     		negs	r2, r2
 3171              	.LVL314:
 3172 0062 31F91260 		ldrsh	r6, [r1, r2, lsl #1]
 3173 0066 7642     		negs	r6, r6
 3174              	.LVL315:
 3175              	.L123:
 3176              	.LBE196:
 3177              	.LBB197:
 405:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 3178              		.loc 1 405 0 is_stmt 1
 3179 0068 03F5C953 		add	r3, r3, #6432
 3180 006c 0133     		adds	r3, r3, #1
 3181              	.LVL316:
 3182 006e 43F24322 		movw	r2, #12867
 3183 0072 02E0     		b	.L124
 3184              	.L125:
 405:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 3185              		.loc 1 405 0 is_stmt 0 discriminator 2
 3186 0074 A3F5C943 		sub	r3, r3, #25728
 3187              	.LVL317:
 3188 0078 073B     		subs	r3, r3, #7
 3189              	.LVL318:
 3190              	.L124:
 405:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 3191              		.loc 1 405 0 discriminator 1
 3192 007a 9342     		cmp	r3, r2
 3193 007c FADC     		bgt	.L125
 3194 007e 03E0     		b	.L155
 3195              	.L127:
 405:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 3196              		.loc 1 405 0 discriminator 5
 3197 0080 03F5C943 		add	r3, r3, #25728
 3198              	.LVL319:
 3199 0084 0733     		adds	r3, r3, #7
 3200              	.LVL320:
 3201 0086 00E0     		b	.L153
 3202              	.L155:
 405:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 3203              		.loc 1 405 0 discriminator 4
 3204 0088 4D4A     		ldr	r2, .L156
 3205              	.L153:
 3206 008a 9342     		cmp	r3, r2
 3207 008c F8DB     		blt	.L127
 405:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 3208              		.loc 1 405 0
 3209 008e 41F62112 		movw	r2, #6433
 3210 0092 9342     		cmp	r3, r2
 3211 0094 4B4A     		ldr	r2, .L156+4
 3212 0096 03DD     		ble	.L128
 405:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 3213              		.loc 1 405 0 discriminator 7
 3214 0098 C3F54953 		rsb	r3, r3, #12864
 3215              	.LVL321:
 3216 009c 0333     		adds	r3, r3, #3
 3217              	.LVL322:
 3218 009e 0CE0     		b	.L129
 3219              	.L128:
 405:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 3220              		.loc 1 405 0 discriminator 8
 3221 00a0 6FF4C951 		mvn	r1, #6432
 3222 00a4 8B42     		cmp	r3, r1
 3223 00a6 06DA     		bge	.L130
 405:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 3224              		.loc 1 405 0 discriminator 9
 3225 00a8 C3F17F43 		rsb	r3, r3, #-16777216
 3226              	.LVL323:
 3227 00ac 03F57F03 		add	r3, r3, #16711680
 3228 00b0 03F54D43 		add	r3, r3, #52480
 3229 00b4 BD33     		adds	r3, r3, #189
 3230              	.LVL324:
 3231              	.L130:
 405:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 3232              		.loc 1 405 0 discriminator 10
 3233 00b6 002B     		cmp	r3, #0
 3234 00b8 02DB     		blt	.L131
 3235              	.L129:
 405:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 3236              		.loc 1 405 0 discriminator 11
 3237 00ba 32F91350 		ldrsh	r5, [r2, r3, lsl #1]
 3238              	.LVL325:
 3239 00be 03E0     		b	.L132
 3240              	.LVL326:
 3241              	.L131:
 405:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 3242              		.loc 1 405 0 discriminator 12
 3243 00c0 5B42     		negs	r3, r3
 3244              	.LVL327:
 3245 00c2 32F91350 		ldrsh	r5, [r2, r3, lsl #1]
 3246 00c6 6D42     		negs	r5, r5
 3247              	.LVL328:
 3248              	.L132:
 3249              	.LBE197:
 409:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   QUAT_COPY(q_h, ahrs.ltp_to_body_quat);
 3250              		.loc 1 409 0 is_stmt 1
 3251 00c8 3F4B     		ldr	r3, .L156+8
 3252 00ca 9A6D     		ldr	r2, [r3, #88]
 3253 00cc D96C     		ldr	r1, [r3, #76]
 3254              	.LVL329:
 3255              	.LBB198:
 3256              	.LBB199:
 412:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(q_h);
 3257              		.loc 1 412 0
 3258 00ce 02FB02F3 		mul	r3, r2, r2
 3259              	.LVL330:
 3260 00d2 01FB0133 		mla	r3, r1, r1, r3
 3261              	.LVL331:
 3262 00d6 7BB1     		cbz	r3, .L133
 3263              	.LVL332:
 3264              	.LBB200:
 412:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(q_h);
 3265              		.loc 1 412 0 is_stmt 0 discriminator 2
 3266 00d8 1C46     		mov	r4, r3
 3267 00da 2827     		movs	r7, #40
 3268 00dc 00E0     		b	.L135
 3269              	.LVL333:
 3270              	.L145:
 412:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(q_h);
 3271              		.loc 1 412 0
 3272 00de 0446     		mov	r4, r0
 3273              	.LVL334:
 3274              	.L135:
 412:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(q_h);
 3275              		.loc 1 412 0 discriminator 3
 3276 00e0 B3FBF4F0 		udiv	r0, r3, r4
 3277              	.LVL335:
 3278 00e4 0019     		adds	r0, r0, r4
 3279              	.LVL336:
 3280 00e6 4008     		lsrs	r0, r0, #1
 3281              	.LVL337:
 3282 00e8 241A     		subs	r4, r4, r0
 3283              	.LVL338:
 3284 00ea 012C     		cmp	r4, #1
 3285 00ec 03D9     		bls	.L134
 412:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(q_h);
 3286              		.loc 1 412 0 discriminator 4
 3287 00ee 013F     		subs	r7, r7, #1
 3288 00f0 FFB2     		uxtb	r7, r7
 3289 00f2 002F     		cmp	r7, #0
 3290 00f4 F3D1     		bne	.L145
 3291              	.L134:
 412:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(q_h);
 3292              		.loc 1 412 0 discriminator 5
 3293 00f6 0346     		mov	r3, r0
 3294              	.LVL339:
 3295              	.L133:
 3296              	.LBE200:
 3297              	.LBE199:
 412:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(q_h);
 3298              		.loc 1 412 0 discriminator 6
 3299 00f8 D403     		lsls	r4, r2, #15
 3300 00fa C803     		lsls	r0, r1, #15
 3301 00fc 90FBF3F0 		sdiv	r0, r0, r3
 3302              	.LVL340:
 3303 0100 94FBF3F3 		sdiv	r3, r4, r3
 3304              	.LVL341:
 3305              	.LBE198:
 416:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 3306              		.loc 1 416 0 is_stmt 1 discriminator 6
 3307 0104 06FB03F4 		mul	r4, r6, r3
 3308 0108 05FB0044 		mla	r4, r5, r0, r4
 3309              	.LVL342:
 3310 010c 7043     		muls	r0, r6, r0
 3311              	.LVL343:
 3312 010e 05FB1300 		mls	r0, r5, r3, r0
 3313 0112 C013     		asrs	r0, r0, #15
 3314              	.LVL344:
 3315 0114 E413     		asrs	r4, r4, #15
 3316              	.LVL345:
 3317 0116 01D5     		bpl	.L136
 416:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 3318              		.loc 1 416 0 is_stmt 0 discriminator 1
 3319 0118 6442     		negs	r4, r4
 3320              	.LVL346:
 3321 011a 4042     		negs	r0, r0
 3322              	.LVL347:
 3323              	.L136:
 3324              	.LBB201:
 3325              	.LBB202:
 416:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 3326              		.loc 1 416 0 discriminator 2
 3327 011c 00FB00F3 		mul	r3, r0, r0
 3328              	.LVL348:
 3329 0120 04FB0433 		mla	r3, r4, r4, r3
 3330              	.LVL349:
 3331 0124 7BB1     		cbz	r3, .L137
 3332              	.LVL350:
 3333              	.LBB203:
 416:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 3334              		.loc 1 416 0 discriminator 4
 3335 0126 1D46     		mov	r5, r3
 3336              	.LVL351:
 3337 0128 2827     		movs	r7, #40
 3338 012a 00E0     		b	.L139
 3339              	.LVL352:
 3340              	.L147:
 416:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 3341              		.loc 1 416 0
 3342 012c 3546     		mov	r5, r6
 3343              	.LVL353:
 3344              	.L139:
 416:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 3345              		.loc 1 416 0 discriminator 5
 3346 012e B3FBF5F6 		udiv	r6, r3, r5
 3347              	.LVL354:
 3348 0132 7619     		adds	r6, r6, r5
 3349              	.LVL355:
 3350 0134 7608     		lsrs	r6, r6, #1
 3351              	.LVL356:
 3352 0136 AD1B     		subs	r5, r5, r6
 3353              	.LVL357:
 3354 0138 012D     		cmp	r5, #1
 3355 013a 03D9     		bls	.L138
 416:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 3356              		.loc 1 416 0 discriminator 6
 3357 013c 013F     		subs	r7, r7, #1
 3358 013e FFB2     		uxtb	r7, r7
 3359 0140 002F     		cmp	r7, #0
 3360 0142 F3D1     		bne	.L147
 3361              	.L138:
 416:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 3362              		.loc 1 416 0 discriminator 7
 3363 0144 3346     		mov	r3, r6
 3364              	.LVL358:
 3365              	.L137:
 3366              	.LBE203:
 3367              	.LBE202:
 416:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 3368              		.loc 1 416 0 discriminator 8
 3369 0146 E403     		lsls	r4, r4, #15
 3370              	.LVL359:
 3371 0148 C003     		lsls	r0, r0, #15
 3372              	.LVL360:
 3373 014a 94FBF3F4 		sdiv	r4, r4, r3
 3374              	.LVL361:
 3375 014e 90FBF3F0 		sdiv	r0, r0, r3
 3376              	.LVL362:
 3377              	.LBE201:
 420:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ahrs.ltp_to_body_quat);
 3378              		.loc 1 420 0 is_stmt 1 discriminator 8
 3379 0152 1D4B     		ldr	r3, .L156+8
 3380              	.LVL363:
 3381 0154 01FB04F8 		mul	r8, r1, r4
 3382 0158 1F6D     		ldr	r7, [r3, #80]
 3383 015a 5B6D     		ldr	r3, [r3, #84]
 3384 015c 07FB04F6 		mul	r6, r7, r4
 3385 0160 4743     		muls	r7, r0, r7
 3386 0162 03FB1066 		mls	r6, r3, r0, r6
 3387 0166 03FB0477 		mla	r7, r3, r4, r7
 3388 016a 01FB00F3 		mul	r3, r1, r0
 3389 016e 02FB1088 		mls	r8, r2, r0, r8
 3390              	.LVL364:
 3391 0172 02FB0433 		mla	r3, r2, r4, r3
 3392 0176 F613     		asrs	r6, r6, #15
 3393              	.LVL365:
 3394 0178 FF13     		asrs	r7, r7, #15
 3395              	.LVL366:
 3396 017a DB13     		asrs	r3, r3, #15
 3397              	.LVL367:
 3398 017c 5FEAE838 		asrs	r8, r8, #15
 3399              	.LVL368:
 3400 0180 04D5     		bpl	.L140
 420:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ahrs.ltp_to_body_quat);
 3401              		.loc 1 420 0 is_stmt 0 discriminator 1
 3402 0182 C8F10008 		rsb	r8, r8, #0
 3403              	.LVL369:
 3404 0186 7642     		negs	r6, r6
 3405              	.LVL370:
 3406 0188 7F42     		negs	r7, r7
 3407              	.LVL371:
 3408 018a 5B42     		negs	r3, r3
 3409              	.LVL372:
 3410              	.L140:
 3411              	.LBB204:
 3412              	.LBB205:
 420:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ahrs.ltp_to_body_quat);
 3413              		.loc 1 420 0 discriminator 2
 3414 018c 06FB06F1 		mul	r1, r6, r6
 3415 0190 07FB07F2 		mul	r2, r7, r7
 3416 0194 08FB0811 		mla	r1, r8, r8, r1
 3417 0198 03FB0322 		mla	r2, r3, r3, r2
 3418              	.LVL373:
 3419 019c 8918     		adds	r1, r1, r2
 3420              	.LVL374:
 3421 019e 15D0     		beq	.L148
 3422              	.LVL375:
 3423              	.LBB206:
 420:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ahrs.ltp_to_body_quat);
 3424              		.loc 1 420 0 discriminator 4
 3425 01a0 0A46     		mov	r2, r1
 3426 01a2 2820     		movs	r0, #40
 3427              	.LVL376:
 3428 01a4 00E0     		b	.L143
 3429              	.LVL377:
 3430              	.L149:
 420:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ahrs.ltp_to_body_quat);
 3431              		.loc 1 420 0
 3432 01a6 2A46     		mov	r2, r5
 3433              	.LVL378:
 3434              	.L143:
 420:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ahrs.ltp_to_body_quat);
 3435              		.loc 1 420 0 discriminator 5
 3436 01a8 B1FBF2F5 		udiv	r5, r1, r2
 3437              	.LVL379:
 3438 01ac AD18     		adds	r5, r5, r2
 3439              	.LVL380:
 3440 01ae 6D08     		lsrs	r5, r5, #1
 3441              	.LVL381:
 3442 01b0 521B     		subs	r2, r2, r5
 3443              	.LVL382:
 3444 01b2 012A     		cmp	r2, #1
 3445 01b4 0BD9     		bls	.L141
 420:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ahrs.ltp_to_body_quat);
 3446              		.loc 1 420 0 discriminator 6
 3447 01b6 0138     		subs	r0, r0, #1
 3448 01b8 C0B2     		uxtb	r0, r0
 3449 01ba 0028     		cmp	r0, #0
 3450 01bc F3D1     		bne	.L149
 3451 01be 06E0     		b	.L141
 3452              	.L157:
 3453              		.align	2
 3454              	.L156:
 3455 01c0 BDCDFFFF 		.word	-12867
 3456 01c4 00000000 		.word	pprz_trig_int
 3457 01c8 00000000 		.word	ahrs
 3458              	.LVL383:
 3459              	.L148:
 3460              	.LBE206:
 420:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ahrs.ltp_to_body_quat);
 3461              		.loc 1 420 0
 3462 01cc 0D46     		mov	r5, r1
 3463              	.LVL384:
 3464              	.L141:
 3465              	.LBE205:
 420:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ahrs.ltp_to_body_quat);
 3466              		.loc 1 420 0 discriminator 8
 3467 01ce F603     		lsls	r6, r6, #15
 3468              	.LVL385:
 3469 01d0 4FEAC838 		lsl	r8, r8, #15
 3470              	.LVL386:
 3471 01d4 96FBF5F6 		sdiv	r6, r6, r5
 3472 01d8 98FBF5F8 		sdiv	r8, r8, r5
 3473              	.LVL387:
 3474 01dc DB03     		lsls	r3, r3, #15
 3475              	.LVL388:
 3476 01de FF03     		lsls	r7, r7, #15
 3477              	.LVL389:
 3478 01e0 97FBF5F7 		sdiv	r7, r7, r5
 3479              	.LVL390:
 3480              	.LBE204:
 3481              	.LBB207:
 3482              	.LBB208:
 449:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_QUAT(ahrs.ltp_to_body_euler, ahrs.ltp_to_body_quat);
 3483              		.loc 1 449 0 is_stmt 1 discriminator 8
 3484 01e4 06FB08F0 		mul	r0, r6, r8
 3485              	.LBE208:
 3486              	.LBE207:
 3487              	.LBB223:
 420:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ahrs.ltp_to_body_quat);
 3488              		.loc 1 420 0 discriminator 8
 3489 01e8 93FBF5F5 		sdiv	r5, r3, r5
 3490              	.LVL391:
 3491              	.LBE223:
 3492              	.LBB224:
 3493              	.LBB209:
 449:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_QUAT(ahrs.ltp_to_body_euler, ahrs.ltp_to_body_quat);
 3494              		.loc 1 449 0 discriminator 8
 3495 01ec 05FB07F3 		mul	r3, r5, r7
 3496              	.LBE209:
 3497              	.LBE224:
 421:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   QUAT_COPY(ahrs.ltp_to_body_quat, q);
 3498              		.loc 1 421 0 discriminator 8
 3499 01f0 DB4C     		ldr	r4, .L158
 3500              	.LVL392:
 3501              	.LBB225:
 3502              	.LBB210:
 449:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_QUAT(ahrs.ltp_to_body_euler, ahrs.ltp_to_body_quat);
 3503              		.loc 1 449 0 discriminator 8
 3504 01f2 C013     		asrs	r0, r0, #15
 3505 01f4 00EBE330 		add	r0, r0, r3, asr #15
 3506              	.LBE210:
 3507              	.LBE225:
 421:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   QUAT_COPY(ahrs.ltp_to_body_quat, q);
 3508              		.loc 1 421 0 discriminator 8
 3509 01f8 C4F84C80 		str	r8, [r4, #76]
 3510 01fc 2665     		str	r6, [r4, #80]
 3511 01fe 6765     		str	r7, [r4, #84]
 3512 0200 A565     		str	r5, [r4, #88]
 3513              	.LVL393:
 3514              	.LBB226:
 3515              	.LBB211:
 449:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_QUAT(ahrs.ltp_to_body_euler, ahrs.ltp_to_body_quat);
 3516              		.loc 1 449 0 discriminator 8
 3517 0202 40F31000 		sbfx	r0, r0, #0, #17
 3518 0206 FFF7FEFF 		bl	__aeabi_i2f
 3519              	.LVL394:
 3520 020a 4FF06251 		mov	r1, #947912704
 3521 020e FFF7FEFF 		bl	__aeabi_fmul
 3522 0212 07FB07F9 		mul	r9, r7, r7
 3523 0216 8246     		mov	sl, r0
 3524 0218 06FB06F0 		mul	r0, r6, r6
 3525 021c 4FEAE939 		asr	r9, r9, #15
 3526              	.LVL395:
 3527 0220 09EBE030 		add	r0, r9, r0, asr #15
 3528 0224 40F31000 		sbfx	r0, r0, #0, #17
 3529 0228 C0F58040 		rsb	r0, r0, #16384
 3530 022c FFF7FEFF 		bl	__aeabi_i2f
 3531 0230 4FF06251 		mov	r1, #947912704
 3532 0234 FFF7FEFF 		bl	__aeabi_fmul
 3533 0238 0146     		mov	r1, r0
 3534 023a 5046     		mov	r0, sl
 3535 023c FFF7FEFF 		bl	atan2f
 3536 0240 8346     		mov	fp, r0
 3537              	.LVL396:
 3538 0242 07FB08F0 		mul	r0, r7, r8
 3539              	.LVL397:
 3540 0246 05FB06F3 		mul	r3, r5, r6
 3541 024a C013     		asrs	r0, r0, #15
 3542 024c C0EBE330 		rsb	r0, r0, r3, asr #15
 3543 0250 40F31000 		sbfx	r0, r0, #0, #17
 3544 0254 FFF7FEFF 		bl	__aeabi_i2f
 3545 0258 4FF06251 		mov	r1, #947912704
 3546 025c FFF7FEFF 		bl	__aeabi_fmul
 3547 0260 FFF7FEFF 		bl	asinf
 3548 0264 05FB08F8 		mul	r8, r5, r8
 3549              	.LVL398:
 3550 0268 7E43     		muls	r6, r7, r6
 3551              	.LVL399:
 3552 026a 4FEAE838 		asr	r8, r8, #15
 3553              	.LVL400:
 3554 026e 8246     		mov	sl, r0
 3555              	.LVL401:
 3556 0270 08EBE630 		add	r0, r8, r6, asr #15
 3557              	.LVL402:
 3558 0274 40F31000 		sbfx	r0, r0, #0, #17
 3559 0278 FFF7FEFF 		bl	__aeabi_i2f
 3560 027c 4FF06251 		mov	r1, #947912704
 3561 0280 FFF7FEFF 		bl	__aeabi_fmul
 3562 0284 6D43     		muls	r5, r5, r5
 3563              	.LVL403:
 3564 0286 09EBE539 		add	r9, r9, r5, asr #15
 3565              	.LVL404:
 3566 028a 0646     		mov	r6, r0
 3567 028c 49F31000 		sbfx	r0, r9, #0, #17
 3568 0290 C0F58040 		rsb	r0, r0, #16384
 3569 0294 FFF7FEFF 		bl	__aeabi_i2f
 3570 0298 4FF06251 		mov	r1, #947912704
 3571 029c FFF7FEFF 		bl	__aeabi_fmul
 3572 02a0 0146     		mov	r1, r0
 3573 02a2 3046     		mov	r0, r6
 3574 02a4 FFF7FEFF 		bl	atan2f
 3575 02a8 4FF08B41 		mov	r1, #1166016512
 3576 02ac 0546     		mov	r5, r0
 3577              	.LVL405:
 3578 02ae 5846     		mov	r0, fp
 3579              	.LVL406:
 3580 02b0 FFF7FEFF 		bl	__aeabi_fmul
 3581 02b4 FFF7FEFF 		bl	__aeabi_f2iz
 3582 02b8 4FF08B41 		mov	r1, #1166016512
 3583 02bc E065     		str	r0, [r4, #92]
 3584 02be 0AF10040 		add	r0, sl, #-2147483648
 3585 02c2 FFF7FEFF 		bl	__aeabi_fmul
 3586 02c6 FFF7FEFF 		bl	__aeabi_f2iz
 3587 02ca 4FF08B41 		mov	r1, #1166016512
 3588 02ce 2066     		str	r0, [r4, #96]
 3589 02d0 2846     		mov	r0, r5
 3590 02d2 FFF7FEFF 		bl	__aeabi_fmul
 3591 02d6 FFF7FEFF 		bl	__aeabi_f2iz
 3592              	.LBE211:
 3593              	.LBB212:
 451:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_body_rmat, ahrs.ltp_to_body_quat);
 3594              		.loc 1 451 0 discriminator 8
 3595 02da E16C     		ldr	r1, [r4, #76]
 3596 02dc 266D     		ldr	r6, [r4, #80]
 3597 02de 636D     		ldr	r3, [r4, #84]
 3598 02e0 A26D     		ldr	r2, [r4, #88]
 3599 02e2 01FB01FE 		mul	lr, r1, r1
 3600              	.LBE212:
 3601              	.LBB213:
 449:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_QUAT(ahrs.ltp_to_body_euler, ahrs.ltp_to_body_quat);
 3602              		.loc 1 449 0 discriminator 8
 3603 02e6 6066     		str	r0, [r4, #100]
 3604              	.LBE213:
 3605              	.LBB214:
 451:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_body_rmat, ahrs.ltp_to_body_quat);
 3606              		.loc 1 451 0 discriminator 8
 3607 02e8 06FB01F0 		mul	r0, r6, r1
 3608 02ec 03FB01F5 		mul	r5, r3, r1
 3609              	.LVL407:
 3610 02f0 02FB06FC 		mul	ip, r2, r6
 3611 02f4 06FB06FB 		mul	fp, r6, r6
 3612              	.LVL408:
 3613 02f8 4FEAEE3E 		asr	lr, lr, #15
 3614 02fc AEF5804E 		sub	lr, lr, #16384
 3615              	.LVL409:
 3616 0300 C013     		asrs	r0, r0, #15
 3617 0302 02FB03F9 		mul	r9, r2, r3
 3618 0306 0590     		str	r0, [sp, #20]
 3619              	.LVL410:
 3620 0308 ED13     		asrs	r5, r5, #15
 3621              	.LVL411:
 3622 030a 0EEBEB30 		add	r0, lr, fp, asr #15
 3623              	.LVL412:
 3624 030e 4FEAEC3C 		asr	ip, ip, #15
 3625 0312 03FB03F8 		mul	r8, r3, r3
 3626              	.LVL413:
 3627 0316 0190     		str	r0, [sp, #4]
 3628 0318 A066     		str	r0, [r4, #104]
 3629 031a 0CEB0500 		add	r0, ip, r5
 3630 031e 0290     		str	r0, [sp, #8]
 3631 0320 C4F88000 		str	r0, [r4, #128]
 3632 0324 0598     		ldr	r0, [sp, #20]
 3633 0326 4FEAE939 		asr	r9, r9, #15
 3634 032a C0EB0900 		rsb	r0, r0, r9
 3635 032e 0390     		str	r0, [sp, #12]
 3636 0330 C4F88400 		str	r0, [r4, #132]
 3637 0334 0EEBE830 		add	r0, lr, r8, asr #15
 3638 0338 0490     		str	r0, [sp, #16]
 3639 033a A067     		str	r0, [r4, #120]
 3640 033c 0598     		ldr	r0, [sp, #20]
 3641 033e C5EB0C0C 		rsb	ip, r5, ip
 3642 0342 8144     		add	r9, r9, r0
 3643 0344 02FB02F0 		mul	r0, r2, r2
 3644              	.LBE214:
 3645              	.LBE226:
 3646              	.LBB227:
 3647              	.LBB228:
 465:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 466:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 467:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 468:subsystems/ahrs/ahrs_int_cmpl_quat.c **** __attribute__ ((always_inline)) static inline void compute_imu_orientation(void) {
 469:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 470:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Compute LTP to IMU quaternion */
 471:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP(ahrs.ltp_to_imu_quat, ahrs.ltp_to_body_quat, imu.body_to_imu_quat);
 3648              		.loc 1 471 0 discriminator 8
 3649 0348 864D     		ldr	r5, .L158+4
 3650              	.LVL414:
 3651              	.LBE228:
 3652              	.LBE227:
 3653              	.LBB239:
 3654              	.LBB215:
 451:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_body_rmat, ahrs.ltp_to_body_quat);
 3655              		.loc 1 451 0 discriminator 8
 3656 034a 0EEBE03E 		add	lr, lr, r0, asr #15
 3657              	.LVL415:
 3658              	.LBE215:
 3659              	.LBE239:
 3660              	.LBB240:
 3661              	.LBB231:
 3662              		.loc 1 471 0 discriminator 8
 3663 034e D5F88400 		ldr	r0, [r5, #132]
 3664              	.LBE231:
 3665              	.LBE240:
 3666              	.LBB241:
 3667              	.LBB216:
 451:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_body_rmat, ahrs.ltp_to_body_quat);
 3668              		.loc 1 451 0 discriminator 8
 3669 0352 02FB01F7 		mul	r7, r2, r1
 3670              	.LVL416:
 3671              	.LBE216:
 3672              	.LBE241:
 3673              	.LBB242:
 3674              	.LBB232:
 3675              		.loc 1 471 0 discriminator 8
 3676 0356 00FB01F8 		mul	r8, r0, r1
 3677              	.LBE232:
 3678              	.LBE242:
 3679              	.LBB243:
 3680              	.LBB217:
 451:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_body_rmat, ahrs.ltp_to_body_quat);
 3681              		.loc 1 451 0 discriminator 8
 3682 035a 03FB06FA 		mul	sl, r3, r6
 3683              	.LVL417:
 3684              	.LBE217:
 3685              	.LBE243:
 3686              	.LBB244:
 3687              	.LBB233:
 3688              		.loc 1 471 0 discriminator 8
 3689 035e D5F88800 		ldr	r0, [r5, #136]
 3690              	.LBE233:
 3691              	.LBE244:
 3692              	.LBB245:
 3693              	.LBB218:
 451:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_body_rmat, ahrs.ltp_to_body_quat);
 3694              		.loc 1 451 0 discriminator 8
 3695 0362 FF13     		asrs	r7, r7, #15
 3696              	.LVL418:
 3697              	.LBE218:
 3698              	.LBE245:
 3699              	.LBB246:
 3700              	.LBB234:
 3701              		.loc 1 471 0 discriminator 8
 3702 0364 00FB1688 		mls	r8, r0, r6, r8
 3703              	.LBE234:
 3704              	.LBE246:
 3705              	.LBB247:
 3706              	.LBB219:
 451:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_body_rmat, ahrs.ltp_to_body_quat);
 3707              		.loc 1 451 0 discriminator 8
 3708 0368 4FEAEA3A 		asr	sl, sl, #15
 3709 036c C7EB0A0B 		rsb	fp, r7, sl
 3710 0370 BA44     		add	sl, sl, r7
 3711              	.LBE219:
 3712              	.LBE247:
 3713              	.LBB248:
 3714              	.LBB235:
 3715              		.loc 1 471 0 discriminator 8
 3716 0372 D5F88C70 		ldr	r7, [r5, #140]
 3717              	.LVL419:
 3718 0376 D5F89000 		ldr	r0, [r5, #144]
 3719 037a 07FB1388 		mls	r8, r7, r3, r8
 3720 037e 00FB1288 		mls	r8, r0, r2, r8
 3721 0382 D5F88400 		ldr	r0, [r5, #132]
 3722 0386 4FEAE838 		asr	r8, r8, #15
 3723 038a C4F80080 		str	r8, [r4, #0]
 3724 038e 00FB06F8 		mul	r8, r0, r6
 3725 0392 D5F88800 		ldr	r0, [r5, #136]
 3726              	.LBE235:
 3727              	.LBE248:
 3728              	.LBB249:
 3729              	.LBB220:
 451:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_body_rmat, ahrs.ltp_to_body_quat);
 3730              		.loc 1 451 0 discriminator 8
 3731 0396 C4F874B0 		str	fp, [r4, #116]
 3732              	.LBE220:
 3733              	.LBE249:
 3734              	.LBB250:
 3735              	.LBB236:
 3736              		.loc 1 471 0 discriminator 8
 3737 039a 00FB0188 		mla	r8, r0, r1, r8
 3738 039e D5F89000 		ldr	r0, [r5, #144]
 3739              	.LBE236:
 3740              	.LBE250:
 3741              	.LBB251:
 3742              	.LBB221:
 451:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_body_rmat, ahrs.ltp_to_body_quat);
 3743              		.loc 1 451 0 discriminator 8
 3744 03a2 C4F86CA0 		str	sl, [r4, #108]
 3745              	.LBE221:
 3746              	.LBE251:
 3747              	.LBB252:
 3748              	.LBB237:
 3749              		.loc 1 471 0 discriminator 8
 3750 03a6 00FB0388 		mla	r8, r0, r3, r8
 3751 03aa 07FB1288 		mls	r8, r7, r2, r8
 3752 03ae 4FEAE838 		asr	r8, r8, #15
 3753              	.LBE237:
 3754              	.LBE252:
 3755              	.LBB253:
 3756              	.LBB222:
 451:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_body_rmat, ahrs.ltp_to_body_quat);
 3757              		.loc 1 451 0 discriminator 8
 3758 03b2 C4F870C0 		str	ip, [r4, #112]
 3759 03b6 C4F87C90 		str	r9, [r4, #124]
 3760 03ba C4F888E0 		str	lr, [r4, #136]
 3761              	.LBE222:
 3762              	.LBE253:
 3763              	.LBB254:
 3764              	.LBB238:
 3765              		.loc 1 471 0 discriminator 8
 3766 03be C4F80480 		str	r8, [r4, #4]
 3767 03c2 07FB01F8 		mul	r8, r7, r1
 3768 03c6 00FB1688 		mls	r8, r0, r6, r8
 3769 03ca D5F88400 		ldr	r0, [r5, #132]
 3770 03ce CDF81480 		str	r8, [sp, #20]
 3771 03d2 00FB03F8 		mul	r8, r0, r3
 3772 03d6 D5F88800 		ldr	r0, [r5, #136]
 3773 03da 7E43     		muls	r6, r7, r6
 3774 03dc 00FB0288 		mla	r8, r0, r2, r8
 3775 03e0 0598     		ldr	r0, [sp, #20]
 3776 03e2 8044     		add	r8, r0, r8
 3777 03e4 D5F89000 		ldr	r0, [r5, #144]
 3778 03e8 4FEAE838 		asr	r8, r8, #15
 3779 03ec 00FB0166 		mla	r6, r0, r1, r6
 3780 03f0 D5F88410 		ldr	r1, [r5, #132]
 3781 03f4 D5F88800 		ldr	r0, [r5, #136]
 3782 03f8 4A43     		muls	r2, r1, r2
 3783 03fa 00FB1322 		mls	r2, r0, r3, r2
 472:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Compute LTP to IMU rotation matrix */
 473:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_COMP(ahrs.ltp_to_imu_rmat, ahrs.ltp_to_body_rmat, imu.body_to_imu_rmat);
 3784              		.loc 1 473 0 discriminator 8
 3785 03fe D5F89810 		ldr	r1, [r5, #152]
 471:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP(ahrs.ltp_to_imu_quat, ahrs.ltp_to_body_quat, imu.body_to_imu_quat);
 3786              		.loc 1 471 0 discriminator 8
 3787 0402 B618     		adds	r6, r6, r2
 3788 0404 F613     		asrs	r6, r6, #15
 3789 0406 E660     		str	r6, [r4, #12]
 3790              		.loc 1 473 0 discriminator 8
 3791 0408 0BFB01F6 		mul	r6, fp, r1
 3792 040c D5F89420 		ldr	r2, [r5, #148]
 3793 0410 0198     		ldr	r0, [sp, #4]
 3794 0412 D5F89C30 		ldr	r3, [r5, #156]
 3795 0416 00FB0266 		mla	r6, r0, r2, r6
 3796 041a 0298     		ldr	r0, [sp, #8]
 471:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP(ahrs.ltp_to_imu_quat, ahrs.ltp_to_body_quat, imu.body_to_imu_quat);
 3797              		.loc 1 471 0 discriminator 8
 3798 041c C4F80880 		str	r8, [r4, #8]
 3799              		.loc 1 473 0 discriminator 8
 3800 0420 00FB0366 		mla	r6, r0, r3, r6
 3801 0424 B613     		asrs	r6, r6, #14
 3802 0426 0596     		str	r6, [sp, #20]
 3803 0428 E661     		str	r6, [r4, #28]
 3804 042a 049E     		ldr	r6, [sp, #16]
 3805 042c 0398     		ldr	r0, [sp, #12]
 3806 042e 06FB01F7 		mul	r7, r6, r1
 3807 0432 09FB01F1 		mul	r1, r9, r1
 3808 0436 0CFB0211 		mla	r1, ip, r2, r1
 3809 043a 0EFB0311 		mla	r1, lr, r3, r1
 3810 043e 0AFB0277 		mla	r7, sl, r2, r7
 3811 0442 4FEAA138 		asr	r8, r1, #14
 3812 0446 D5F8A410 		ldr	r1, [r5, #164]
 3813 044a D5F8A020 		ldr	r2, [r5, #160]
 3814 044e 0BFB01F6 		mul	r6, fp, r1
 3815 0452 00FB0377 		mla	r7, r0, r3, r7
 3816 0456 0198     		ldr	r0, [sp, #4]
 3817 0458 D5F8A830 		ldr	r3, [r5, #168]
 3818 045c 00FB0266 		mla	r6, r0, r2, r6
 3819 0460 0298     		ldr	r0, [sp, #8]
 3820 0462 BF13     		asrs	r7, r7, #14
 3821 0464 00FB0366 		mla	r6, r0, r3, r6
 3822 0468 B013     		asrs	r0, r6, #14
 3823 046a A062     		str	r0, [r4, #40]
 3824 046c 0498     		ldr	r0, [sp, #16]
 3825 046e 2762     		str	r7, [r4, #32]
 3826 0470 00FB01F6 		mul	r6, r0, r1
 3827 0474 09FB01F1 		mul	r1, r9, r1
 3828 0478 0AFB0266 		mla	r6, sl, r2, r6
 3829 047c 0CFB0211 		mla	r1, ip, r2, r1
 3830 0480 0398     		ldr	r0, [sp, #12]
 3831 0482 0EFB0311 		mla	r1, lr, r3, r1
 3832 0486 00FB0366 		mla	r6, r0, r3, r6
 3833 048a B013     		asrs	r0, r6, #14
 3834 048c E062     		str	r0, [r4, #44]
 3835 048e 8813     		asrs	r0, r1, #14
 3836 0490 D5F8B010 		ldr	r1, [r5, #176]
 3837 0494 D5F8AC20 		ldr	r2, [r5, #172]
 3838 0498 0BFB01FB 		mul	fp, fp, r1
 3839 049c 019E     		ldr	r6, [sp, #4]
 3840 049e D5F8B430 		ldr	r3, [r5, #180]
 3841 04a2 06FB02BB 		mla	fp, r6, r2, fp
 3842 04a6 029E     		ldr	r6, [sp, #8]
 3843 04a8 C4F82480 		str	r8, [r4, #36]
 3844 04ac 06FB03BB 		mla	fp, r6, r3, fp
 3845 04b0 4FEAAB3B 		asr	fp, fp, #14
 3846 04b4 2063     		str	r0, [r4, #48]
 3847 04b6 C4F834B0 		str	fp, [r4, #52]
 3848 04ba 049E     		ldr	r6, [sp, #16]
 3849 04bc 09FB01F9 		mul	r9, r9, r1
 3850 04c0 06FB01FB 		mul	fp, r6, r1
 3851 04c4 0CFB029C 		mla	ip, ip, r2, r9
 3852 04c8 0AFB02BA 		mla	sl, sl, r2, fp
 3853 04cc 039E     		ldr	r6, [sp, #12]
 3854 04ce 0EFB03CE 		mla	lr, lr, r3, ip
 3855 04d2 06FB03AA 		mla	sl, r6, r3, sl
 3856 04d6 4FEAAE39 		asr	r9, lr, #14
 3857 04da 4FEAAA3A 		asr	sl, sl, #14
 3858 04de C4F838A0 		str	sl, [r4, #56]
 3859 04e2 C4F83C90 		str	r9, [r4, #60]
 3860              	.LVL420:
 3861              	.LBB229:
 474:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* compute LTP to IMU eulers */
 475:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_RMAT(ahrs.ltp_to_imu_euler, ahrs.ltp_to_imu_rmat);
 3862              		.loc 1 475 0 discriminator 8
 3863 04e6 FFF7FEFF 		bl	__aeabi_i2f
 3864              	.LVL421:
 3865 04ea 4FF06251 		mov	r1, #947912704
 3866 04ee FFF7FEFF 		bl	__aeabi_fmul
 3867 04f2 8246     		mov	sl, r0
 3868 04f4 4846     		mov	r0, r9
 3869 04f6 FFF7FEFF 		bl	__aeabi_i2f
 3870 04fa 4FF06251 		mov	r1, #947912704
 3871 04fe FFF7FEFF 		bl	__aeabi_fmul
 3872 0502 0146     		mov	r1, r0
 3873 0504 5046     		mov	r0, sl
 3874 0506 FFF7FEFF 		bl	atan2f
 3875 050a 8146     		mov	r9, r0
 3876              	.LVL422:
 3877 050c 4046     		mov	r0, r8
 3878              	.LVL423:
 3879 050e FFF7FEFF 		bl	__aeabi_i2f
 3880 0512 4FF06251 		mov	r1, #947912704
 3881 0516 FFF7FEFF 		bl	__aeabi_fmul
 3882 051a FFF7FEFF 		bl	asinf
 3883 051e 8046     		mov	r8, r0
 3884              	.LVL424:
 3885 0520 3846     		mov	r0, r7
 3886              	.LVL425:
 3887 0522 FFF7FEFF 		bl	__aeabi_i2f
 3888 0526 4FF06251 		mov	r1, #947912704
 3889 052a FFF7FEFF 		bl	__aeabi_fmul
 3890 052e 0746     		mov	r7, r0
 3891              	.LVL426:
 3892 0530 0598     		ldr	r0, [sp, #20]
 3893 0532 FFF7FEFF 		bl	__aeabi_i2f
 3894 0536 4FF06251 		mov	r1, #947912704
 3895 053a FFF7FEFF 		bl	__aeabi_fmul
 3896 053e 0146     		mov	r1, r0
 3897 0540 3846     		mov	r0, r7
 3898 0542 FFF7FEFF 		bl	atan2f
 3899 0546 4FF08B41 		mov	r1, #1166016512
 3900 054a 0646     		mov	r6, r0
 3901              	.LVL427:
 3902 054c 4846     		mov	r0, r9
 3903              	.LVL428:
 3904 054e FFF7FEFF 		bl	__aeabi_fmul
 3905 0552 FFF7FEFF 		bl	__aeabi_f2iz
 3906 0556 4FF08B41 		mov	r1, #1166016512
 3907 055a 2061     		str	r0, [r4, #16]
 3908 055c 04E0     		b	.L159
 3909              	.L160:
 3910 055e 00BF     		.align	2
 3911              	.L158:
 3912 0560 00000000 		.word	ahrs
 3913 0564 00000000 		.word	imu
 3914              	.L159:
 3915 0568 08F10040 		add	r0, r8, #-2147483648
 3916 056c FFF7FEFF 		bl	__aeabi_fmul
 3917 0570 FFF7FEFF 		bl	__aeabi_f2iz
 3918 0574 4FF08B41 		mov	r1, #1166016512
 3919 0578 6061     		str	r0, [r4, #20]
 3920 057a 3046     		mov	r0, r6
 3921 057c FFF7FEFF 		bl	__aeabi_fmul
 3922 0580 FFF7FEFF 		bl	__aeabi_f2iz
 3923              	.LBE229:
 476:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* compute IMU rates */
 477:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_RATEMULT(ahrs.imu_rate, imu.body_to_imu_rmat, ahrs.body_rate);
 3924              		.loc 1 477 0 discriminator 8
 3925 0584 D4F89010 		ldr	r1, [r4, #144]
 3926              	.LBB230:
 475:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_RMAT(ahrs.ltp_to_imu_euler, ahrs.ltp_to_imu_rmat);
 3927              		.loc 1 475 0 discriminator 8
 3928 0588 A061     		str	r0, [r4, #24]
 3929              	.LBE230:
 3930              		.loc 1 477 0 discriminator 8
 3931 058a D5F89800 		ldr	r0, [r5, #152]
 3932 058e D4F88C20 		ldr	r2, [r4, #140]
 3933 0592 4843     		muls	r0, r1, r0
 3934 0594 D5F89460 		ldr	r6, [r5, #148]
 3935              	.LVL429:
 3936 0598 D4F89430 		ldr	r3, [r4, #148]
 3937 059c 06FB0200 		mla	r0, r6, r2, r0
 3938 05a0 D5F89C60 		ldr	r6, [r5, #156]
 3939 05a4 06FB0300 		mla	r0, r6, r3, r0
 3940 05a8 8013     		asrs	r0, r0, #14
 3941 05aa 2064     		str	r0, [r4, #64]
 3942 05ac D5F8A400 		ldr	r0, [r5, #164]
 3943 05b0 D5F8A060 		ldr	r6, [r5, #160]
 3944 05b4 4843     		muls	r0, r1, r0
 3945 05b6 06FB0200 		mla	r0, r6, r2, r0
 3946 05ba D5F8A860 		ldr	r6, [r5, #168]
 3947 05be 06FB0300 		mla	r0, r6, r3, r0
 3948 05c2 D5F8B060 		ldr	r6, [r5, #176]
 3949 05c6 8013     		asrs	r0, r0, #14
 3950 05c8 7143     		muls	r1, r6, r1
 3951 05ca 6064     		str	r0, [r4, #68]
 3952 05cc D5F8AC00 		ldr	r0, [r5, #172]
 3953 05d0 00FB0212 		mla	r2, r0, r2, r1
 3954 05d4 D5F8B410 		ldr	r1, [r5, #180]
 3955 05d8 01FB0323 		mla	r3, r1, r3, r2
 3956 05dc 9B13     		asrs	r3, r3, #14
 3957 05de A364     		str	r3, [r4, #72]
 3958              	.LBE238:
 3959              	.LBE254:
 429:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.heading_aligned = TRUE;
 3960              		.loc 1 429 0 discriminator 8
 3961 05e0 034B     		ldr	r3, .L161
 3962 05e2 0122     		movs	r2, #1
 3963 05e4 83F84720 		strb	r2, [r3, #71]
 430:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 3964              		.loc 1 430 0 discriminator 8
 3965 05e8 07B0     		add	sp, sp, #28
 3966 05ea BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 3967              	.L162:
 3968 05ee 00BF     		.align	2
 3969              	.L161:
 3970 05f0 00000000 		.word	.LANCHOR0
 3971              		.cfi_endproc
 3972              	.LFE43:
 3974              		.section	.text.ahrs_update_fw_estimator,"ax",%progbits
 3975              		.align	1
 3976              		.global	ahrs_update_fw_estimator
 3977              		.thumb
 3978              		.thumb_func
 3980              	ahrs_update_fw_estimator:
 3981              	.LFB48:
 478:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 479:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 480:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 481:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 482:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #ifdef AHRS_UPDATE_FW_ESTIMATOR
 483:subsystems/ahrs/ahrs_int_cmpl_quat.c **** // TODO use ahrs result directly
 484:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #include "estimator.h"
 485:subsystems/ahrs/ahrs_int_cmpl_quat.c **** // remotely settable
 486:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #ifndef INS_ROLL_NEUTRAL_DEFAULT
 487:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #define INS_ROLL_NEUTRAL_DEFAULT 0
 488:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
 489:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #ifndef INS_PITCH_NEUTRAL_DEFAULT
 490:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #define INS_PITCH_NEUTRAL_DEFAULT 0
 491:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
 492:subsystems/ahrs/ahrs_int_cmpl_quat.c **** float ins_roll_neutral = INS_ROLL_NEUTRAL_DEFAULT;
 493:subsystems/ahrs/ahrs_int_cmpl_quat.c **** float ins_pitch_neutral = INS_PITCH_NEUTRAL_DEFAULT;
 494:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_fw_estimator(void)
 495:subsystems/ahrs/ahrs_int_cmpl_quat.c **** {
 3982              		.loc 1 495 0
 3983              		.cfi_startproc
 3984              		@ args = 0, pretend = 0, frame = 0
 3985              		@ frame_needed = 0, uses_anonymous_args = 0
 3986              	.LVL430:
 3987 0000 70B5     		push	{r4, r5, r6, lr}
 3988              	.LCFI11:
 3989              		.cfi_def_cfa_offset 16
 3990              		.cfi_offset 14, -4
 3991              		.cfi_offset 6, -8
 3992              		.cfi_offset 5, -12
 3993              		.cfi_offset 4, -16
 496:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct FloatEulers att;
 497:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // export results to estimator
 498:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   EULERS_FLOAT_OF_BFP(att, ahrs.ltp_to_body_euler);
 3994              		.loc 1 498 0
 3995 0002 244C     		ldr	r4, .L164
 3996 0004 206E     		ldr	r0, [r4, #96]
 3997 0006 FFF7FEFF 		bl	__aeabi_i2f
 3998              	.LVL431:
 3999 000a 4FF06651 		mov	r1, #964689920
 4000 000e FFF7FEFF 		bl	__aeabi_fmul
 4001 0012 0646     		mov	r6, r0
 4002              	.LVL432:
 4003 0014 606E     		ldr	r0, [r4, #100]
 4004              	.LVL433:
 4005 0016 FFF7FEFF 		bl	__aeabi_i2f
 4006 001a 4FF06651 		mov	r1, #964689920
 4007 001e FFF7FEFF 		bl	__aeabi_fmul
 4008 0022 0546     		mov	r5, r0
 4009              	.LVL434:
 4010 0024 E06D     		ldr	r0, [r4, #92]
 4011              	.LVL435:
 4012 0026 FFF7FEFF 		bl	__aeabi_i2f
 4013 002a 4FF06651 		mov	r1, #964689920
 4014 002e FFF7FEFF 		bl	__aeabi_fmul
 499:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 500:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   estimator_phi   = att.phi - ins_roll_neutral;
 4015              		.loc 1 500 0
 4016 0032 194B     		ldr	r3, .L164+4
 4017 0034 1968     		ldr	r1, [r3, #0]	@ float
 4018 0036 FFF7FEFF 		bl	__aeabi_fsub
 4019 003a 184B     		ldr	r3, .L164+8
 4020 003c 1860     		str	r0, [r3, #0]	@ float
 501:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   estimator_theta = att.theta - ins_pitch_neutral;
 4021              		.loc 1 501 0
 4022 003e 184B     		ldr	r3, .L164+12
 4023 0040 3046     		mov	r0, r6
 4024 0042 1968     		ldr	r1, [r3, #0]	@ float
 4025 0044 FFF7FEFF 		bl	__aeabi_fsub
 4026 0048 164B     		ldr	r3, .L164+16
 4027 004a 1860     		str	r0, [r3, #0]	@ float
 502:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   estimator_psi   = att.psi;
 4028              		.loc 1 502 0
 4029 004c 164B     		ldr	r3, .L164+20
 503:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 504:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct FloatRates rates;
 505:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_FLOAT_OF_BFP(rates, ahrs.body_rate);
 4030              		.loc 1 505 0
 4031 004e D4F89000 		ldr	r0, [r4, #144]
 502:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   estimator_psi   = att.psi;
 4032              		.loc 1 502 0
 4033 0052 1D60     		str	r5, [r3, #0]	@ float
 4034              	.LVL436:
 4035              		.loc 1 505 0
 4036 0054 FFF7FEFF 		bl	__aeabi_i2f
 4037              	.LVL437:
 4038 0058 4FF06651 		mov	r1, #964689920
 4039 005c FFF7FEFF 		bl	__aeabi_fmul
 4040 0060 0646     		mov	r6, r0
 4041              	.LVL438:
 4042 0062 D4F89400 		ldr	r0, [r4, #148]
 4043              	.LVL439:
 4044 0066 FFF7FEFF 		bl	__aeabi_i2f
 4045 006a 4FF06651 		mov	r1, #964689920
 4046 006e FFF7FEFF 		bl	__aeabi_fmul
 4047 0072 0546     		mov	r5, r0
 4048              	.LVL440:
 4049 0074 D4F88C00 		ldr	r0, [r4, #140]
 4050              	.LVL441:
 4051 0078 FFF7FEFF 		bl	__aeabi_i2f
 4052 007c 4FF06651 		mov	r1, #964689920
 4053 0080 FFF7FEFF 		bl	__aeabi_fmul
 506:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   estimator_p = rates.p;
 4054              		.loc 1 506 0
 4055 0084 094B     		ldr	r3, .L164+24
 4056 0086 1860     		str	r0, [r3, #0]	@ float
 507:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   estimator_q = rates.q;
 4057              		.loc 1 507 0
 4058 0088 094B     		ldr	r3, .L164+28
 4059 008a 1E60     		str	r6, [r3, #0]	@ float
 508:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   estimator_r = rates.r;
 4060              		.loc 1 508 0
 4061 008c 094B     		ldr	r3, .L164+32
 4062 008e 1D60     		str	r5, [r3, #0]	@ float
 509:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 510:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 4063              		.loc 1 510 0
 4064 0090 70BD     		pop	{r4, r5, r6, pc}
 4065              	.L165:
 4066 0092 00BF     		.align	2
 4067              	.L164:
 4068 0094 00000000 		.word	ahrs
 4069 0098 00000000 		.word	.LANCHOR1
 4070 009c 00000000 		.word	estimator_phi
 4071 00a0 00000000 		.word	.LANCHOR2
 4072 00a4 00000000 		.word	estimator_theta
 4073 00a8 00000000 		.word	estimator_psi
 4074 00ac 00000000 		.word	estimator_p
 4075 00b0 00000000 		.word	estimator_q
 4076 00b4 00000000 		.word	estimator_r
 4077              		.cfi_endproc
 4078              	.LFE48:
 4080              		.global	ins_pitch_neutral
 4081              		.global	ins_roll_neutral
 4082              		.global	ahrs_impl
 4083              		.section	.bss.ahrs_impl,"aw",%nobits
 4084              		.align	3
 4085              		.set	.LANCHOR0,. + 0
 4088              	ahrs_impl:
 4089 0000 00000000 		.space	72
 4089      00000000 
 4089      00000000 
 4089      00000000 
 4089      00000000 
 4090              		.section	.bss.ins_pitch_neutral,"aw",%nobits
 4091              		.align	2
 4092              		.set	.LANCHOR2,. + 0
 4095              	ins_pitch_neutral:
 4096 0000 00000000 		.space	4
 4097              		.section	.bss.ins_roll_neutral,"aw",%nobits
 4098              		.align	2
 4099              		.set	.LANCHOR1,. + 0
 4102              	ins_roll_neutral:
 4103 0000 00000000 		.space	4
 4104              		.text
 4105              	.Letext0:
 4106              		.file 4 "/opt/paparazzi/arm-multilib/lib/gcc/arm-none-eabi/4.6.2/../../../../arm-none-eabi/include
 4107              		.file 5 "/home/mav/paparazzi/sw/include/std.h"
 4108              		.file 6 "/opt/paparazzi/arm-multilib/lib/gcc/arm-none-eabi/4.6.2/../../../../arm-none-eabi/include
 4109              		.file 7 "./math/pprz_algebra_int.h"
 4110              		.file 8 "./math/pprz_algebra_float.h"
 4111              		.file 9 "./subsystems/ahrs.h"
 4112              		.file 10 "./subsystems/ahrs/ahrs_int_cmpl_quat.h"
 4113              		.file 11 "./subsystems/ahrs/ahrs_aligner.h"
 4114              		.file 12 "./subsystems/imu.h"
 4115              		.file 13 "./subsystems/imu/imu_aspirin2.h"
 4116              		.file 14 "./math/pprz_geodetic_int.h"
 4117              		.file 15 "./subsystems/gps.h"
 4118              		.file 16 "./math/pprz_trig_int.h"
 4119              		.file 17 "./estimator.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ahrs_int_cmpl_quat.c
     /tmp/ccubqNIX.s:21     .text.ahrs_init:00000000 $t
     /tmp/ccubqNIX.s:26     .text.ahrs_init:00000000 ahrs_init
     /tmp/ccubqNIX.s:208    .text.ahrs_init:00000150 $d
     /tmp/ccubqNIX.s:228    .text.ahrs_align:00000000 $t
     /tmp/ccubqNIX.s:233    .text.ahrs_align:00000000 ahrs_align
     /tmp/ccubqNIX.s:469    .text.ahrs_align:00000180 $d
     /tmp/ccubqNIX.s:477    .text.ahrs_align:00000190 $t
     /tmp/ccubqNIX.s:827    .text.ahrs_align:00000430 $d
     /tmp/ccubqNIX.s:840    .text.ahrs_align:00000454 $t
     /tmp/ccubqNIX.s:1394   .text.ahrs_align:00000928 $d
     /tmp/ccubqNIX.s:1398   .text.ahrs_align:00000934 $t
     /tmp/ccubqNIX.s:1532   .text.ahrs_align:00000a58 $d
     /tmp/ccubqNIX.s:1537   .text.ahrs_propagate:00000000 $t
     /tmp/ccubqNIX.s:1542   .text.ahrs_propagate:00000000 ahrs_propagate
     /tmp/ccubqNIX.s:1760   .text.ahrs_propagate:0000012c $d
     /tmp/ccubqNIX.s:1767   .text.ahrs_propagate:00000138 $t
     /tmp/ccubqNIX.s:2185   .text.ahrs_propagate:000004c8 $d
     /tmp/ccubqNIX.s:2188   .text.ahrs_propagate:000004d0 $t
     /tmp/ccubqNIX.s:2245   .text.ahrs_update_accel:00000000 $t
     /tmp/ccubqNIX.s:2250   .text.ahrs_update_accel:00000000 ahrs_update_accel
     /tmp/ccubqNIX.s:2560   .text.ahrs_update_accel:000001d8 $d
     /tmp/ccubqNIX.s:2572   .text.ahrs_update_mag:00000000 $t
     /tmp/ccubqNIX.s:2577   .text.ahrs_update_mag:00000000 ahrs_update_mag
     /tmp/ccubqNIX.s:2728   .text.ahrs_update_mag:000000c8 $d
     /tmp/ccubqNIX.s:2735   .text.ahrs_update_gps:00000000 $t
     /tmp/ccubqNIX.s:2740   .text.ahrs_update_gps:00000000 ahrs_update_gps
     /tmp/ccubqNIX.s:2781   .text.ahrs_update_gps:00000038 $d
     /tmp/ccubqNIX.s:2789   .text.ahrs_update_heading:00000000 $t
     /tmp/ccubqNIX.s:2794   .text.ahrs_update_heading:00000000 ahrs_update_heading
     /tmp/ccubqNIX.s:3062   .text.ahrs_update_heading:00000154 $d
     /tmp/ccubqNIX.s:3070   .text.ahrs_realign_heading:00000000 $t
     /tmp/ccubqNIX.s:3075   .text.ahrs_realign_heading:00000000 ahrs_realign_heading
     /tmp/ccubqNIX.s:3455   .text.ahrs_realign_heading:000001c0 $d
     /tmp/ccubqNIX.s:3462   .text.ahrs_realign_heading:000001cc $t
     /tmp/ccubqNIX.s:3912   .text.ahrs_realign_heading:00000560 $d
     /tmp/ccubqNIX.s:3915   .text.ahrs_realign_heading:00000568 $t
     /tmp/ccubqNIX.s:3970   .text.ahrs_realign_heading:000005f0 $d
     /tmp/ccubqNIX.s:3975   .text.ahrs_update_fw_estimator:00000000 $t
     /tmp/ccubqNIX.s:3980   .text.ahrs_update_fw_estimator:00000000 ahrs_update_fw_estimator
     /tmp/ccubqNIX.s:4068   .text.ahrs_update_fw_estimator:00000094 $d
     /tmp/ccubqNIX.s:4095   .bss.ins_pitch_neutral:00000000 ins_pitch_neutral
     /tmp/ccubqNIX.s:4102   .bss.ins_roll_neutral:00000000 ins_roll_neutral
     /tmp/ccubqNIX.s:4088   .bss.ahrs_impl:00000000 ahrs_impl
     /tmp/ccubqNIX.s:4084   .bss.ahrs_impl:00000000 $d
     /tmp/ccubqNIX.s:4091   .bss.ins_pitch_neutral:00000000 $d
     /tmp/ccubqNIX.s:4098   .bss.ins_roll_neutral:00000000 $d
                     .debug_frame:00000010 $d
     /tmp/ccubqNIX.s:1536   .text.ahrs_align:00000a5c $t

UNDEFINED SYMBOLS
__aeabi_i2f
__aeabi_fmul
__aeabi_f2iz
atan2f
asinf
ahrs
imu
__aeabi_fadd
__aeabi_f2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_d2f
__aeabi_dsub
__aeabi_dcmplt
__aeabi_dcmpgt
__aeabi_fsub
__aeabi_fcmpgt
__aeabi_fdiv
__aeabi_dadd
__aeabi_fcmplt
sqrtf
ahrs_aligner
ldiv
__aeabi_i2d
__aeabi_d2iz
gps
pprz_trig_int
estimator_phi
estimator_theta
estimator_psi
estimator_p
estimator_q
estimator_r
