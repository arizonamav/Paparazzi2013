# 25 "expr_lexer.mll"
 
open Expr_parser

# 6 "expr_lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\226\255\227\255\229\255\232\255\234\255\002\000\002\000\
    \022\000\003\000\030\000\240\255\241\255\242\255\243\255\244\255\
    \245\255\246\255\247\255\248\255\249\255\055\000\079\000\160\000\
    \156\000\054\000\255\255\095\000\091\000\128\000\254\255\166\000\
    \100\000\250\255\239\255\238\255\237\255\236\255\233\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\020\000\255\255\
    \255\255\024\000\025\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\004\000\255\255\
    \002\000\027\000\255\255\255\255\255\255\001\000\255\255\003\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\255\255\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\032\000\255\255\255\255\
    \255\255\255\255\000\000\027\000\027\000\027\000\000\000\255\255\
    \032\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\026\000\026\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \026\000\002\000\000\000\000\000\023\000\005\000\008\000\021\000\
    \016\000\015\000\003\000\004\000\020\000\010\000\019\000\025\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\017\000\018\000\036\000\009\000\006\000\038\000\
    \035\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\012\000\034\000\011\000\255\255\022\000\
    \027\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\014\000\007\000\013\000\037\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\028\000\030\000\033\000\000\000\000\000\029\000\000\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\028\000\000\000\000\000\000\000\022\000\029\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\031\000\000\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \000\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\000\000\000\000\000\000\000\000\022\000\
    \001\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\008\000\000\000\000\000\006\000\
    \009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\010\000\000\000\021\000\000\000\
    \025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\007\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\027\000\028\000\032\000\255\255\255\255\027\000\255\255\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\029\000\255\255\255\255\255\255\022\000\029\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\024\000\255\255\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \255\255\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\255\255\255\255\255\255\255\255\023\000\
    \000\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\021\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\028\000\255\255\255\255\255\255\027\000\
    \255\255\255\255\255\255\255\255\032\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \029\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
  __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 29 "expr_lexer.mll"
                    ( token lexbuf)
# 155 "expr_lexer.ml"

  | 1 ->
# 30 "expr_lexer.mll"
                                   ( token lexbuf)
# 160 "expr_lexer.ml"

  | 2 ->
# 31 "expr_lexer.mll"
               ( INT (int_of_string (Lexing.lexeme lexbuf)) )
# 165 "expr_lexer.ml"

  | 3 ->
# 32 "expr_lexer.mll"
                            ( FLOAT (float_of_string (Lexing.lexeme lexbuf)) )
# 170 "expr_lexer.ml"

  | 4 ->
# 33 "expr_lexer.mll"
                                                               ( IDENT (Lexing.lexeme lexbuf) )
# 175 "expr_lexer.ml"

  | 5 ->
# 34 "expr_lexer.mll"
                     ( let s = Lexing.lexeme lexbuf in IDENT (String.sub s 1 (String.length s - 2)) )
# 180 "expr_lexer.ml"

  | 6 ->
# 35 "expr_lexer.mll"
        ( COMMA )
# 185 "expr_lexer.ml"

  | 7 ->
# 36 "expr_lexer.mll"
        ( DOT )
# 190 "expr_lexer.ml"

  | 8 ->
# 37 "expr_lexer.mll"
        ( SEMICOLON )
# 195 "expr_lexer.ml"

  | 9 ->
# 38 "expr_lexer.mll"
        ( COLON )
# 200 "expr_lexer.ml"

  | 10 ->
# 39 "expr_lexer.mll"
        ( LP )
# 205 "expr_lexer.ml"

  | 11 ->
# 40 "expr_lexer.mll"
        ( RP )
# 210 "expr_lexer.ml"

  | 12 ->
# 41 "expr_lexer.mll"
        ( LC )
# 215 "expr_lexer.ml"

  | 13 ->
# 42 "expr_lexer.mll"
        ( RC )
# 220 "expr_lexer.ml"

  | 14 ->
# 43 "expr_lexer.mll"
        ( LB )
# 225 "expr_lexer.ml"

  | 15 ->
# 44 "expr_lexer.mll"
        ( RB )
# 230 "expr_lexer.ml"

  | 16 ->
# 45 "expr_lexer.mll"
         ( DEREF )
# 235 "expr_lexer.ml"

  | 17 ->
# 46 "expr_lexer.mll"
         ( EQ )
# 240 "expr_lexer.ml"

  | 18 ->
# 47 "expr_lexer.mll"
         ( AND )
# 245 "expr_lexer.ml"

  | 19 ->
# 48 "expr_lexer.mll"
         ( OR )
# 250 "expr_lexer.ml"

  | 20 ->
# 49 "expr_lexer.mll"
        ( GT )
# 255 "expr_lexer.ml"

  | 21 ->
# 50 "expr_lexer.mll"
        ( MOD )
# 260 "expr_lexer.ml"

  | 22 ->
# 51 "expr_lexer.mll"
         ( GEQ )
# 265 "expr_lexer.ml"

  | 23 ->
# 52 "expr_lexer.mll"
        ( PLUS )
# 270 "expr_lexer.ml"

  | 24 ->
# 53 "expr_lexer.mll"
        ( ASSIGN )
# 275 "expr_lexer.ml"

  | 25 ->
# 54 "expr_lexer.mll"
        ( MINUS )
# 280 "expr_lexer.ml"

  | 26 ->
# 55 "expr_lexer.mll"
        ( MULT )
# 285 "expr_lexer.ml"

  | 27 ->
# 56 "expr_lexer.mll"
        ( DIV )
# 290 "expr_lexer.ml"

  | 28 ->
# 57 "expr_lexer.mll"
        ( NOT )
# 295 "expr_lexer.ml"

  | 29 ->
# 58 "expr_lexer.mll"
        ( EOF )
# 300 "expr_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

# 60 "expr_lexer.mll"
 
  let parse = fun s ->
    let lexbuf = Lexing.from_string s in
    try
      Expr_parser.expression token lexbuf
    with
      Failure("lexing: empty token") ->
	Printf.fprintf stderr "Lexing error in '%s': unexpected char: '%c' \n"
	  s (Lexing.lexeme_char lexbuf 0);
	exit 1
    | Parsing.Parse_error ->
	Printf.fprintf stderr "Parsing error in '%s', token '%s' ?\n"
	  s (Lexing.lexeme lexbuf);
	exit 1

# 322 "expr_lexer.ml"
